<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Chatitem/mobion_definition_types.php';

$GLOBALS['gnt_mobion_storage_mobionchatiteminfo_E_ProductStatus'] = array(
  'BUY' => 0,
  'USE_LIMIT' => 1,
  'USE_FOREVER' => 2,
);

final class ProductStatus {
  const BUY = 0;
  const USE_LIMIT = 1;
  const USE_FOREVER = 2;
  static public $__names = array(
    0 => 'BUY',
    1 => 'USE_LIMIT',
    2 => 'USE_FOREVER',
  );
}

$GLOBALS['gnt_mobion_storage_mobionchatiteminfo_E_SaleOff'] = array(
  'NONE' => 0,
  'FREE' => 1,
  'DISCOUNT' => 2,
);

final class SaleOff {
  const NONE = 0;
  const FREE = 1;
  const DISCOUNT = 2;
  static public $__names = array(
    0 => 'NONE',
    1 => 'FREE',
    2 => 'DISCOUNT',
  );
}

$GLOBALS['gnt_mobion_storage_mobionchatiteminfo_E_EnumItemType'] = array(
  'Invalid' => 0,
  'Sticker' => 1,
  'Background' => 2,
  'ImageFilter' => 3,
  'SoundFilter' => 4,
  'Avatar' => 5,
  'PhotoSkin' => 6,
  'Achievement' => 7,
  'EndType' => 8,
);

final class EnumItemType {
  const Invalid = 0;
  const Sticker = 1;
  const Background = 2;
  const ImageFilter = 3;
  const SoundFilter = 4;
  const Avatar = 5;
  const PhotoSkin = 6;
  const Achievement = 7;
  const EndType = 8;
  static public $__names = array(
    0 => 'Invalid',
    1 => 'Sticker',
    2 => 'Background',
    3 => 'ImageFilter',
    4 => 'SoundFilter',
    5 => 'Avatar',
    6 => 'PhotoSkin',
    7 => 'Achievement',
    8 => 'EndType',
  );
}

$GLOBALS['gnt_mobion_storage_mobionchatiteminfo_E_EnumItemSubType'] = array(
  'Invalid' => 0,
  'Sticker' => 100,
  'Avatar_Hair' => 200,
  'Avatar_Face' => 201,
  'Avatar_Body' => 202,
  'Avatar_Cloths' => 203,
  'PhotoSkin_Text' => 300,
  'PhotoSkin_Frame' => 301,
  'PhotoSkin_Effect' => 302,
  'PhotoSkin_Sticker' => 303,
  'Background_Landscape' => 400,
  'Background_Portrait' => 401,
);

final class EnumItemSubType {
  const Invalid = 0;
  const Sticker = 100;
  const Avatar_Hair = 200;
  const Avatar_Face = 201;
  const Avatar_Body = 202;
  const Avatar_Cloths = 203;
  const PhotoSkin_Text = 300;
  const PhotoSkin_Frame = 301;
  const PhotoSkin_Effect = 302;
  const PhotoSkin_Sticker = 303;
  const Background_Landscape = 400;
  const Background_Portrait = 401;
  static public $__names = array(
    0 => 'Invalid',
    100 => 'Sticker',
    200 => 'Avatar_Hair',
    201 => 'Avatar_Face',
    202 => 'Avatar_Body',
    203 => 'Avatar_Cloths',
    300 => 'PhotoSkin_Text',
    301 => 'PhotoSkin_Frame',
    302 => 'PhotoSkin_Effect',
    303 => 'PhotoSkin_Sticker',
    400 => 'Background_Landscape',
    401 => 'Background_Portrait',
  );
}

$GLOBALS['gnt_mobion_storage_mobionchatiteminfo_E_EnumSortType'] = array(
  'Newest' => 0,
  'Hottest' => 1,
);

final class EnumSortType {
  const Newest = 0;
  const Hottest = 1;
  static public $__names = array(
    0 => 'Newest',
    1 => 'Hottest',
  );
}

$GLOBALS['gnt_mobion_storage_mobionchatiteminfo_E_EnumFilterGender'] = array(
  'Male' => 0,
  'Female' => 1,
  'All' => 2,
);

final class EnumFilterGender {
  const Male = 0;
  const Female = 1;
  const All = 2;
  static public $__names = array(
    0 => 'Male',
    1 => 'Female',
    2 => 'All',
  );
}

class gnt_mobion_storage_mobionchatiteminfo_ChatItemMySql {
  static $_TSPEC;

  public $itemIntID = null;
  public $itemID = null;
  public $type = null;
  public $name = null;
  public $packageID = null;
  public $createTime = null;
  public $firstUseTime = null;
  public $expireTime = null;
  public $itemVersion = null;
  public $totalUse = null;
  public $imageUrl = null;
  public $serialNumber = null;
  public $gender = null;
  public $itemCharacter = null;
  public $active = null;
  public $free = null;
  public $itemType = null;
  public $mAttrs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemIntID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'firstUseTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'expireTime',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'itemVersion',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'totalUse',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'serialNumber',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        14 => array(
          'var' => 'itemCharacter',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'active',
          'type' => TType::BYTE,
          ),
        16 => array(
          'var' => 'free',
          'type' => TType::BYTE,
          ),
        17 => array(
          'var' => 'itemType',
          'type' => TType::I32,
          ),
        50 => array(
          'var' => 'mAttrs',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemIntID'])) {
        $this->itemIntID = $vals['itemIntID'];
      }
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['firstUseTime'])) {
        $this->firstUseTime = $vals['firstUseTime'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['itemVersion'])) {
        $this->itemVersion = $vals['itemVersion'];
      }
      if (isset($vals['totalUse'])) {
        $this->totalUse = $vals['totalUse'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['serialNumber'])) {
        $this->serialNumber = $vals['serialNumber'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['itemCharacter'])) {
        $this->itemCharacter = $vals['itemCharacter'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['free'])) {
        $this->free = $vals['free'];
      }
      if (isset($vals['itemType'])) {
        $this->itemType = $vals['itemType'];
      }
      if (isset($vals['mAttrs'])) {
        $this->mAttrs = $vals['mAttrs'];
      }
    }
  }

  public function getName() {
    return 'ChatItemMySql';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemIntID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->firstUseTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalUse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serialNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemCharacter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->free);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::MAP) {
            $this->mAttrs = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->mAttrs[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatItemMySql');
    if ($this->itemIntID !== null) {
      $xfer += $output->writeFieldBegin('itemIntID', TType::I64, 1);
      $xfer += $output->writeI64($this->itemIntID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 2);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 5);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 6);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstUseTime !== null) {
      $xfer += $output->writeFieldBegin('firstUseTime', TType::I64, 7);
      $xfer += $output->writeI64($this->firstUseTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I32, 8);
      $xfer += $output->writeI32($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemVersion !== null) {
      $xfer += $output->writeFieldBegin('itemVersion', TType::I32, 9);
      $xfer += $output->writeI32($this->itemVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalUse !== null) {
      $xfer += $output->writeFieldBegin('totalUse', TType::I32, 10);
      $xfer += $output->writeI32($this->totalUse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 11);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serialNumber !== null) {
      $xfer += $output->writeFieldBegin('serialNumber', TType::I32, 12);
      $xfer += $output->writeI32($this->serialNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 13);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemCharacter !== null) {
      $xfer += $output->writeFieldBegin('itemCharacter', TType::STRING, 14);
      $xfer += $output->writeString($this->itemCharacter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BYTE, 15);
      $xfer += $output->writeByte($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->free !== null) {
      $xfer += $output->writeFieldBegin('free', TType::BYTE, 16);
      $xfer += $output->writeByte($this->free);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemType !== null) {
      $xfer += $output->writeFieldBegin('itemType', TType::I32, 17);
      $xfer += $output->writeI32($this->itemType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mAttrs !== null) {
      if (!is_array($this->mAttrs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mAttrs', TType::MAP, 50);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->mAttrs));
        {
          foreach ($this->mAttrs as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_PackageMySql {
  static $_TSPEC;

  public $id = null;
  public $title = null;
  public $price = null;
  public $discount = null;
  public $description = null;
  public $imageUrl = null;
  public $priceForever = null;
  public $discountForever = null;
  public $expireTime = null;
  public $sortOrder = null;
  public $totalUse = null;
  public $createDate = null;
  public $active = null;
  public $gender = null;
  public $type = null;
  public $free = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'discount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'priceForever',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'discountForever',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'expireTime',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'sortOrder',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'totalUse',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'active',
          'type' => TType::BYTE,
          ),
        14 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        15 => array(
          'var' => 'type',
          'type' => TType::BYTE,
          ),
        16 => array(
          'var' => 'free',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['discount'])) {
        $this->discount = $vals['discount'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['priceForever'])) {
        $this->priceForever = $vals['priceForever'];
      }
      if (isset($vals['discountForever'])) {
        $this->discountForever = $vals['discountForever'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['sortOrder'])) {
        $this->sortOrder = $vals['sortOrder'];
      }
      if (isset($vals['totalUse'])) {
        $this->totalUse = $vals['totalUse'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['free'])) {
        $this->free = $vals['free'];
      }
    }
  }

  public function getName() {
    return 'PackageMySql';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceForever);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discountForever);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sortOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalUse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->free);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageMySql');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 3);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discount !== null) {
      $xfer += $output->writeFieldBegin('discount', TType::I32, 4);
      $xfer += $output->writeI32($this->discount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceForever !== null) {
      $xfer += $output->writeFieldBegin('priceForever', TType::I32, 7);
      $xfer += $output->writeI32($this->priceForever);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discountForever !== null) {
      $xfer += $output->writeFieldBegin('discountForever', TType::I32, 8);
      $xfer += $output->writeI32($this->discountForever);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I32, 9);
      $xfer += $output->writeI32($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sortOrder !== null) {
      $xfer += $output->writeFieldBegin('sortOrder', TType::I32, 10);
      $xfer += $output->writeI32($this->sortOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalUse !== null) {
      $xfer += $output->writeFieldBegin('totalUse', TType::I32, 11);
      $xfer += $output->writeI32($this->totalUse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 12);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BYTE, 13);
      $xfer += $output->writeByte($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 14);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::BYTE, 15);
      $xfer += $output->writeByte($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->free !== null) {
      $xfer += $output->writeFieldBegin('free', TType::BYTE, 16);
      $xfer += $output->writeByte($this->free);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ServerError extends TException {
  static $_TSPEC;

  public $statusCode = null;
  public $msg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statusCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statusCode'])) {
        $this->statusCode = $vals['statusCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
    }
  }

  public function getName() {
    return 'ServerError';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->statusCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServerError');
    if ($this->statusCode !== null) {
      $xfer += $output->writeFieldBegin('statusCode', TType::I32, 1);
      $xfer += $output->writeI32($this->statusCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UserItem {
  static $_TSPEC;

  public $itemUuid = null;
  public $name = null;
  public $expireTimePoint = null;
  public $imageUrl = null;
  public $itemCharacter = null;
  public $itemType = null;
  public $imgThumbUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemUuid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'expireTimePoint',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'itemCharacter',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'itemType',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'imgThumbUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemUuid'])) {
        $this->itemUuid = $vals['itemUuid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['expireTimePoint'])) {
        $this->expireTimePoint = $vals['expireTimePoint'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['itemCharacter'])) {
        $this->itemCharacter = $vals['itemCharacter'];
      }
      if (isset($vals['itemType'])) {
        $this->itemType = $vals['itemType'];
      }
      if (isset($vals['imgThumbUrl'])) {
        $this->imgThumbUrl = $vals['imgThumbUrl'];
      }
    }
  }

  public function getName() {
    return 'UserItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemUuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTimePoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemCharacter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgThumbUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserItem');
    if ($this->itemUuid !== null) {
      $xfer += $output->writeFieldBegin('itemUuid', TType::STRING, 1);
      $xfer += $output->writeString($this->itemUuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTimePoint !== null) {
      $xfer += $output->writeFieldBegin('expireTimePoint', TType::I32, 3);
      $xfer += $output->writeI32($this->expireTimePoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemCharacter !== null) {
      $xfer += $output->writeFieldBegin('itemCharacter', TType::STRING, 5);
      $xfer += $output->writeString($this->itemCharacter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemType !== null) {
      $xfer += $output->writeFieldBegin('itemType', TType::I32, 6);
      $xfer += $output->writeI32($this->itemType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgThumbUrl !== null) {
      $xfer += $output->writeFieldBegin('imgThumbUrl', TType::STRING, 7);
      $xfer += $output->writeString($this->imgThumbUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UserPackage {
  static $_TSPEC;

  public $packageID = null;
  public $packageTitle = null;
  public $packageDesc = null;
  public $imageUrl = null;
  public $expireTimePoint = null;
  public $items = null;
  public $type = null;
  public $createDate = null;
  public $expired = null;
  public $selected = null;
  public $imgThumbUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageTitle',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'expireTimePoint',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserItem',
            ),
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::BYTE,
          ),
        8 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'expired',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'selected',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'imgThumbUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['packageTitle'])) {
        $this->packageTitle = $vals['packageTitle'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['expireTimePoint'])) {
        $this->expireTimePoint = $vals['expireTimePoint'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['expired'])) {
        $this->expired = $vals['expired'];
      }
      if (isset($vals['selected'])) {
        $this->selected = $vals['selected'];
      }
      if (isset($vals['imgThumbUrl'])) {
        $this->imgThumbUrl = $vals['imgThumbUrl'];
      }
    }
  }

  public function getName() {
    return 'UserPackage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTimePoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = new gnt_mobion_storage_mobionchatiteminfo_UserItem();
              $xfer += $elem14->read($input);
              $this->items []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->expired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->selected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgThumbUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPackage');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageTitle !== null) {
      $xfer += $output->writeFieldBegin('packageTitle', TType::STRING, 2);
      $xfer += $output->writeString($this->packageTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTimePoint !== null) {
      $xfer += $output->writeFieldBegin('expireTimePoint', TType::I32, 5);
      $xfer += $output->writeI32($this->expireTimePoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::BYTE, 7);
      $xfer += $output->writeByte($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 8);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expired !== null) {
      $xfer += $output->writeFieldBegin('expired', TType::BOOL, 9);
      $xfer += $output->writeBool($this->expired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected !== null) {
      $xfer += $output->writeFieldBegin('selected', TType::BOOL, 10);
      $xfer += $output->writeBool($this->selected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgThumbUrl !== null) {
      $xfer += $output->writeFieldBegin('imgThumbUrl', TType::STRING, 11);
      $xfer += $output->writeString($this->imgThumbUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UserInventory {
  static $_TSPEC;

  public $packages = null;
  public $usingAvatarPkg = null;
  public $usingBackgroundPkg = null;
  public $usingPhotoSkinPkg = null;
  public $usingAvatarItems = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackage',
            ),
          ),
        3 => array(
          'var' => 'usingAvatarPkg',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'usingBackgroundPkg',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'usingPhotoSkinPkg',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'usingAvatarItems',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packages'])) {
        $this->packages = $vals['packages'];
      }
      if (isset($vals['usingAvatarPkg'])) {
        $this->usingAvatarPkg = $vals['usingAvatarPkg'];
      }
      if (isset($vals['usingBackgroundPkg'])) {
        $this->usingBackgroundPkg = $vals['usingBackgroundPkg'];
      }
      if (isset($vals['usingPhotoSkinPkg'])) {
        $this->usingPhotoSkinPkg = $vals['usingPhotoSkinPkg'];
      }
      if (isset($vals['usingAvatarItems'])) {
        $this->usingAvatarItems = $vals['usingAvatarItems'];
      }
    }
  }

  public function getName() {
    return 'UserInventory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packages = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new gnt_mobion_storage_mobionchatiteminfo_UserPackage();
              $xfer += $elem21->read($input);
              $this->packages []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->usingAvatarPkg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->usingBackgroundPkg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->usingPhotoSkinPkg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->usingAvatarItems = array();
            $_size22 = 0;
            $_etype25 = 0;
            $xfer += $input->readListBegin($_etype25, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $elem27 = null;
              $xfer += $input->readString($elem27);
              $this->usingAvatarItems []= $elem27;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInventory');
    if ($this->packages !== null) {
      if (!is_array($this->packages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packages', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packages));
        {
          foreach ($this->packages as $iter28)
          {
            $xfer += $iter28->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usingAvatarPkg !== null) {
      $xfer += $output->writeFieldBegin('usingAvatarPkg', TType::I64, 3);
      $xfer += $output->writeI64($this->usingAvatarPkg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usingBackgroundPkg !== null) {
      $xfer += $output->writeFieldBegin('usingBackgroundPkg', TType::I64, 4);
      $xfer += $output->writeI64($this->usingBackgroundPkg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usingPhotoSkinPkg !== null) {
      $xfer += $output->writeFieldBegin('usingPhotoSkinPkg', TType::I64, 5);
      $xfer += $output->writeI64($this->usingPhotoSkinPkg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->usingAvatarItems !== null) {
      if (!is_array($this->usingAvatarItems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('usingAvatarItems', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->usingAvatarItems));
        {
          foreach ($this->usingAvatarItems as $iter29)
          {
            $xfer += $output->writeString($iter29);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UserItemRet {
  static $_TSPEC;

  public $itemUuid = null;
  public $name = null;
  public $imageUrl = null;
  public $itemCharacter = null;
  public $itemType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemUuid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'itemCharacter',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'itemType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemUuid'])) {
        $this->itemUuid = $vals['itemUuid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['itemCharacter'])) {
        $this->itemCharacter = $vals['itemCharacter'];
      }
      if (isset($vals['itemType'])) {
        $this->itemType = $vals['itemType'];
      }
    }
  }

  public function getName() {
    return 'UserItemRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemUuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemCharacter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserItemRet');
    if ($this->itemUuid !== null) {
      $xfer += $output->writeFieldBegin('itemUuid', TType::STRING, 1);
      $xfer += $output->writeString($this->itemUuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemCharacter !== null) {
      $xfer += $output->writeFieldBegin('itemCharacter', TType::STRING, 5);
      $xfer += $output->writeString($this->itemCharacter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemType !== null) {
      $xfer += $output->writeFieldBegin('itemType', TType::I32, 9);
      $xfer += $output->writeI32($this->itemType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UserPackageRet {
  static $_TSPEC;

  public $packageID = null;
  public $packageTitle = null;
  public $packageDesc = null;
  public $imageUrl = null;
  public $expireTimePoint = null;
  public $expired = null;
  public $items = null;
  public $selected = null;
  public $createDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'packageTitle',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'expireTimePoint',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'expired',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserItemRet',
            ),
          ),
        8 => array(
          'var' => 'selected',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['packageTitle'])) {
        $this->packageTitle = $vals['packageTitle'];
      }
      if (isset($vals['packageDesc'])) {
        $this->packageDesc = $vals['packageDesc'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['expireTimePoint'])) {
        $this->expireTimePoint = $vals['expireTimePoint'];
      }
      if (isset($vals['expired'])) {
        $this->expired = $vals['expired'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['selected'])) {
        $this->selected = $vals['selected'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
    }
  }

  public function getName() {
    return 'UserPackageRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->packageDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTimePoint);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->expired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $elem35 = new gnt_mobion_storage_mobionchatiteminfo_UserItemRet();
              $xfer += $elem35->read($input);
              $this->items []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->selected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserPackageRet');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageTitle !== null) {
      $xfer += $output->writeFieldBegin('packageTitle', TType::STRING, 2);
      $xfer += $output->writeString($this->packageTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageDesc !== null) {
      $xfer += $output->writeFieldBegin('packageDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->packageDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTimePoint !== null) {
      $xfer += $output->writeFieldBegin('expireTimePoint', TType::I32, 5);
      $xfer += $output->writeI32($this->expireTimePoint);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expired !== null) {
      $xfer += $output->writeFieldBegin('expired', TType::BOOL, 6);
      $xfer += $output->writeBool($this->expired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter36)
          {
            $xfer += $iter36->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->selected !== null) {
      $xfer += $output->writeFieldBegin('selected', TType::BOOL, 8);
      $xfer += $output->writeBool($this->selected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 10);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UsingRet {
  static $_TSPEC;

  public $avatar = null;
  public $background = null;
  public $photoSkin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'avatar',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        2 => array(
          'var' => 'background',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        3 => array(
          'var' => 'photoSkin',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['avatar'])) {
        $this->avatar = $vals['avatar'];
      }
      if (isset($vals['background'])) {
        $this->background = $vals['background'];
      }
      if (isset($vals['photoSkin'])) {
        $this->photoSkin = $vals['photoSkin'];
      }
    }
  }

  public function getName() {
    return 'UsingRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->avatar = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->avatar->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->background = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->background->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->photoSkin = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->photoSkin->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UsingRet');
    if ($this->avatar !== null) {
      if (!is_object($this->avatar)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('avatar', TType::STRUCT, 1);
      $xfer += $this->avatar->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->background !== null) {
      if (!is_object($this->background)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('background', TType::STRUCT, 2);
      $xfer += $this->background->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoSkin !== null) {
      if (!is_object($this->photoSkin)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('photoSkin', TType::STRUCT, 3);
      $xfer += $this->photoSkin->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListUserItemRet {
  static $_TSPEC;

  public $items = null;
  public $offset = null;
  public $rows = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserItemRet',
            ),
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListUserItemRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $elem42 = new gnt_mobion_storage_mobionchatiteminfo_UserItemRet();
              $xfer += $elem42->read($input);
              $this->items []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListUserItemRet');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter43)
          {
            $xfer += $iter43->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 3);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet {
  static $_TSPEC;

  public $packages = null;
  public $offset = null;
  public $rows = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
            ),
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packages'])) {
        $this->packages = $vals['packages'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListUserPackageRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packages = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readListBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
              $xfer += $elem49->read($input);
              $this->packages []= $elem49;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListUserPackageRet');
    if ($this->packages !== null) {
      if (!is_array($this->packages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packages', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packages));
        {
          foreach ($this->packages as $iter50)
          {
            $xfer += $iter50->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 3);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ItemRet {
  static $_TSPEC;

  public $itemID = null;
  public $type = null;
  public $name = null;
  public $packageID = null;
  public $expireTime = null;
  public $imageUrl = null;
  public $itemCharacter = null;
  public $itemType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'expireTime',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'itemCharacter',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'itemType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['itemCharacter'])) {
        $this->itemCharacter = $vals['itemCharacter'];
      }
      if (isset($vals['itemType'])) {
        $this->itemType = $vals['itemType'];
      }
    }
  }

  public function getName() {
    return 'ItemRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemCharacter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->itemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ItemRet');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 4);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I32, 5);
      $xfer += $output->writeI32($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 10);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemCharacter !== null) {
      $xfer += $output->writeFieldBegin('itemCharacter', TType::STRING, 11);
      $xfer += $output->writeString($this->itemCharacter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemType !== null) {
      $xfer += $output->writeFieldBegin('itemType', TType::I32, 12);
      $xfer += $output->writeI32($this->itemType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_PackageRet {
  static $_TSPEC;

  public $id = null;
  public $title = null;
  public $price = null;
  public $discount = null;
  public $description = null;
  public $imageUrl = null;
  public $priceForever = null;
  public $discountForever = null;
  public $expireTime = null;
  public $items = null;
  public $gender = null;
  public $createDate = null;
  public $status = null;
  public $active = null;
  public $free = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'discount',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'priceForever',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'discountForever',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'expireTime',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_ItemRet',
            ),
          ),
        11 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        12 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'active',
          'type' => TType::BYTE,
          ),
        16 => array(
          'var' => 'free',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['discount'])) {
        $this->discount = $vals['discount'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['priceForever'])) {
        $this->priceForever = $vals['priceForever'];
      }
      if (isset($vals['discountForever'])) {
        $this->discountForever = $vals['discountForever'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
      if (isset($vals['free'])) {
        $this->free = $vals['free'];
      }
    }
  }

  public function getName() {
    return 'PackageRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceForever);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->discountForever);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size51 = 0;
            $_etype54 = 0;
            $xfer += $input->readListBegin($_etype54, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $elem56 = new gnt_mobion_storage_mobionchatiteminfo_ItemRet();
              $xfer += $elem56->read($input);
              $this->items []= $elem56;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->free);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageRet');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 3);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discount !== null) {
      $xfer += $output->writeFieldBegin('discount', TType::I32, 4);
      $xfer += $output->writeI32($this->discount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceForever !== null) {
      $xfer += $output->writeFieldBegin('priceForever', TType::I32, 7);
      $xfer += $output->writeI32($this->priceForever);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discountForever !== null) {
      $xfer += $output->writeFieldBegin('discountForever', TType::I32, 8);
      $xfer += $output->writeI32($this->discountForever);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I32, 9);
      $xfer += $output->writeI32($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter57)
          {
            $xfer += $iter57->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 11);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 12);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 13);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BYTE, 14);
      $xfer += $output->writeByte($this->active);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->free !== null) {
      $xfer += $output->writeFieldBegin('free', TType::BYTE, 16);
      $xfer += $output->writeByte($this->free);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ItemInfo {
  static $_TSPEC;

  public $itemIntID = null;
  public $itemID = null;
  public $productType = null;
  public $itemName = null;
  public $pkgID = null;
  public $createdDate = null;
  public $updatedDate = null;
  public $totalUse = null;
  public $imgUrl = null;
  public $imgThumbUrl = null;
  public $gender = null;
  public $itemCharacter = null;
  public $itemType = null;
  public $activeFlag = null;
  public $sortOrder = null;
  public $emotionType = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemIntID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'productType',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'itemName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pkgID',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'createdDate',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'updatedDate',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'totalUse',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'imgUrl',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'imgThumbUrl',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        12 => array(
          'var' => 'itemCharacter',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'itemType',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'activeFlag',
          'type' => TType::BYTE,
          ),
        15 => array(
          'var' => 'sortOrder',
          'type' => TType::I16,
          ),
        16 => array(
          'var' => 'emotionType',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemIntID'])) {
        $this->itemIntID = $vals['itemIntID'];
      }
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['itemName'])) {
        $this->itemName = $vals['itemName'];
      }
      if (isset($vals['pkgID'])) {
        $this->pkgID = $vals['pkgID'];
      }
      if (isset($vals['createdDate'])) {
        $this->createdDate = $vals['createdDate'];
      }
      if (isset($vals['updatedDate'])) {
        $this->updatedDate = $vals['updatedDate'];
      }
      if (isset($vals['totalUse'])) {
        $this->totalUse = $vals['totalUse'];
      }
      if (isset($vals['imgUrl'])) {
        $this->imgUrl = $vals['imgUrl'];
      }
      if (isset($vals['imgThumbUrl'])) {
        $this->imgThumbUrl = $vals['imgThumbUrl'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['itemCharacter'])) {
        $this->itemCharacter = $vals['itemCharacter'];
      }
      if (isset($vals['itemType'])) {
        $this->itemType = $vals['itemType'];
      }
      if (isset($vals['activeFlag'])) {
        $this->activeFlag = $vals['activeFlag'];
      }
      if (isset($vals['sortOrder'])) {
        $this->sortOrder = $vals['sortOrder'];
      }
      if (isset($vals['emotionType'])) {
        $this->emotionType = $vals['emotionType'];
      }
    }
  }

  public function getName() {
    return 'ItemInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->itemIntID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pkgID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updatedDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalUse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgThumbUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemCharacter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->itemType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->activeFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->sortOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->emotionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ItemInfo');
    if ($this->itemIntID !== null) {
      $xfer += $output->writeFieldBegin('itemIntID', TType::I64, 1);
      $xfer += $output->writeI64($this->itemIntID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 2);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::BYTE, 3);
      $xfer += $output->writeByte($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemName !== null) {
      $xfer += $output->writeFieldBegin('itemName', TType::STRING, 4);
      $xfer += $output->writeString($this->itemName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgID !== null) {
      $xfer += $output->writeFieldBegin('pkgID', TType::I32, 5);
      $xfer += $output->writeI32($this->pkgID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdDate !== null) {
      $xfer += $output->writeFieldBegin('createdDate', TType::I64, 6);
      $xfer += $output->writeI64($this->createdDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedDate !== null) {
      $xfer += $output->writeFieldBegin('updatedDate', TType::I32, 7);
      $xfer += $output->writeI32($this->updatedDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalUse !== null) {
      $xfer += $output->writeFieldBegin('totalUse', TType::I32, 8);
      $xfer += $output->writeI32($this->totalUse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgUrl !== null) {
      $xfer += $output->writeFieldBegin('imgUrl', TType::STRING, 9);
      $xfer += $output->writeString($this->imgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgThumbUrl !== null) {
      $xfer += $output->writeFieldBegin('imgThumbUrl', TType::STRING, 10);
      $xfer += $output->writeString($this->imgThumbUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 11);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemCharacter !== null) {
      $xfer += $output->writeFieldBegin('itemCharacter', TType::STRING, 12);
      $xfer += $output->writeString($this->itemCharacter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemType !== null) {
      $xfer += $output->writeFieldBegin('itemType', TType::I16, 13);
      $xfer += $output->writeI16($this->itemType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeFlag !== null) {
      $xfer += $output->writeFieldBegin('activeFlag', TType::BYTE, 14);
      $xfer += $output->writeByte($this->activeFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sortOrder !== null) {
      $xfer += $output->writeFieldBegin('sortOrder', TType::I16, 15);
      $xfer += $output->writeI16($this->sortOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->emotionType !== null) {
      $xfer += $output->writeFieldBegin('emotionType', TType::BYTE, 16);
      $xfer += $output->writeByte($this->emotionType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_PackageInfo {
  static $_TSPEC;

  public $pkgID = null;
  public $pkgTitle = null;
  public $pkgDesc = null;
  public $imgUrl = null;
  public $items = null;
  public $sortOrder = null;
  public $totalUse = null;
  public $createdDate = null;
  public $updatedDate = null;
  public $activeFlag = null;
  public $status = null;
  public $gender = null;
  public $productType = null;
  public $saleOff = null;
  public $price = null;
  public $priceDiscount = null;
  public $endDiscountDate = null;
  public $intervalFree = null;
  public $priceForLimit = null;
  public $intervalLimit = null;
  public $isHot = null;
  public $isShow = null;
  public $imgThumbUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pkgID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pkgTitle',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pkgDesc',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imgUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_ItemInfo',
            ),
          ),
        6 => array(
          'var' => 'sortOrder',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'totalUse',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'createdDate',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'updatedDate',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'activeFlag',
          'type' => TType::BYTE,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::BYTE,
          ),
        12 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        13 => array(
          'var' => 'productType',
          'type' => TType::BYTE,
          ),
        14 => array(
          'var' => 'saleOff',
          'type' => TType::BYTE,
          ),
        15 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'priceDiscount',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'endDiscountDate',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'intervalFree',
          'type' => TType::I32,
          ),
        19 => array(
          'var' => 'priceForLimit',
          'type' => TType::I32,
          ),
        20 => array(
          'var' => 'intervalLimit',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'isHot',
          'type' => TType::BYTE,
          ),
        22 => array(
          'var' => 'isShow',
          'type' => TType::BYTE,
          ),
        23 => array(
          'var' => 'imgThumbUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pkgID'])) {
        $this->pkgID = $vals['pkgID'];
      }
      if (isset($vals['pkgTitle'])) {
        $this->pkgTitle = $vals['pkgTitle'];
      }
      if (isset($vals['pkgDesc'])) {
        $this->pkgDesc = $vals['pkgDesc'];
      }
      if (isset($vals['imgUrl'])) {
        $this->imgUrl = $vals['imgUrl'];
      }
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['sortOrder'])) {
        $this->sortOrder = $vals['sortOrder'];
      }
      if (isset($vals['totalUse'])) {
        $this->totalUse = $vals['totalUse'];
      }
      if (isset($vals['createdDate'])) {
        $this->createdDate = $vals['createdDate'];
      }
      if (isset($vals['updatedDate'])) {
        $this->updatedDate = $vals['updatedDate'];
      }
      if (isset($vals['activeFlag'])) {
        $this->activeFlag = $vals['activeFlag'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['saleOff'])) {
        $this->saleOff = $vals['saleOff'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['priceDiscount'])) {
        $this->priceDiscount = $vals['priceDiscount'];
      }
      if (isset($vals['endDiscountDate'])) {
        $this->endDiscountDate = $vals['endDiscountDate'];
      }
      if (isset($vals['intervalFree'])) {
        $this->intervalFree = $vals['intervalFree'];
      }
      if (isset($vals['priceForLimit'])) {
        $this->priceForLimit = $vals['priceForLimit'];
      }
      if (isset($vals['intervalLimit'])) {
        $this->intervalLimit = $vals['intervalLimit'];
      }
      if (isset($vals['isHot'])) {
        $this->isHot = $vals['isHot'];
      }
      if (isset($vals['isShow'])) {
        $this->isShow = $vals['isShow'];
      }
      if (isset($vals['imgThumbUrl'])) {
        $this->imgThumbUrl = $vals['imgThumbUrl'];
      }
    }
  }

  public function getName() {
    return 'PackageInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pkgID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pkgTitle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pkgDesc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size58 = 0;
            $_etype61 = 0;
            $xfer += $input->readListBegin($_etype61, $_size58);
            for ($_i62 = 0; $_i62 < $_size58; ++$_i62)
            {
              $elem63 = null;
              $elem63 = new gnt_mobion_storage_mobionchatiteminfo_ItemInfo();
              $xfer += $elem63->read($input);
              $this->items []= $elem63;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->sortOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalUse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createdDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updatedDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->activeFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->saleOff);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->endDiscountDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->intervalFree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->priceForLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->intervalLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isHot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgThumbUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PackageInfo');
    if ($this->pkgID !== null) {
      $xfer += $output->writeFieldBegin('pkgID', TType::I32, 1);
      $xfer += $output->writeI32($this->pkgID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgTitle !== null) {
      $xfer += $output->writeFieldBegin('pkgTitle', TType::STRING, 2);
      $xfer += $output->writeString($this->pkgTitle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgDesc !== null) {
      $xfer += $output->writeFieldBegin('pkgDesc', TType::STRING, 3);
      $xfer += $output->writeString($this->pkgDesc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgUrl !== null) {
      $xfer += $output->writeFieldBegin('imgUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter64)
          {
            $xfer += $iter64->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sortOrder !== null) {
      $xfer += $output->writeFieldBegin('sortOrder', TType::I16, 6);
      $xfer += $output->writeI16($this->sortOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalUse !== null) {
      $xfer += $output->writeFieldBegin('totalUse', TType::I32, 7);
      $xfer += $output->writeI32($this->totalUse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdDate !== null) {
      $xfer += $output->writeFieldBegin('createdDate', TType::I32, 8);
      $xfer += $output->writeI32($this->createdDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedDate !== null) {
      $xfer += $output->writeFieldBegin('updatedDate', TType::I32, 9);
      $xfer += $output->writeI32($this->updatedDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeFlag !== null) {
      $xfer += $output->writeFieldBegin('activeFlag', TType::BYTE, 10);
      $xfer += $output->writeByte($this->activeFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::BYTE, 11);
      $xfer += $output->writeByte($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 12);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::BYTE, 13);
      $xfer += $output->writeByte($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleOff !== null) {
      $xfer += $output->writeFieldBegin('saleOff', TType::BYTE, 14);
      $xfer += $output->writeByte($this->saleOff);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::I32, 15);
      $xfer += $output->writeI32($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceDiscount !== null) {
      $xfer += $output->writeFieldBegin('priceDiscount', TType::I32, 16);
      $xfer += $output->writeI32($this->priceDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endDiscountDate !== null) {
      $xfer += $output->writeFieldBegin('endDiscountDate', TType::I32, 17);
      $xfer += $output->writeI32($this->endDiscountDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->intervalFree !== null) {
      $xfer += $output->writeFieldBegin('intervalFree', TType::I32, 18);
      $xfer += $output->writeI32($this->intervalFree);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->priceForLimit !== null) {
      $xfer += $output->writeFieldBegin('priceForLimit', TType::I32, 19);
      $xfer += $output->writeI32($this->priceForLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->intervalLimit !== null) {
      $xfer += $output->writeFieldBegin('intervalLimit', TType::I32, 20);
      $xfer += $output->writeI32($this->intervalLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isHot !== null) {
      $xfer += $output->writeFieldBegin('isHot', TType::BYTE, 21);
      $xfer += $output->writeByte($this->isHot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isShow !== null) {
      $xfer += $output->writeFieldBegin('isShow', TType::BYTE, 22);
      $xfer += $output->writeByte($this->isShow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgThumbUrl !== null) {
      $xfer += $output->writeFieldBegin('imgThumbUrl', TType::STRING, 23);
      $xfer += $output->writeString($this->imgThumbUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_TopicTheme {
  static $_TSPEC;

  public $themeId = null;
  public $name = null;
  public $imgUrl = null;
  public $createdDate = null;
  public $updatedDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'themeId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'imgUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'createdDate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'updatedDate',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['themeId'])) {
        $this->themeId = $vals['themeId'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['imgUrl'])) {
        $this->imgUrl = $vals['imgUrl'];
      }
      if (isset($vals['createdDate'])) {
        $this->createdDate = $vals['createdDate'];
      }
      if (isset($vals['updatedDate'])) {
        $this->updatedDate = $vals['updatedDate'];
      }
    }
  }

  public function getName() {
    return 'TopicTheme';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->themeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imgUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createdDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->updatedDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopicTheme');
    if ($this->themeId !== null) {
      $xfer += $output->writeFieldBegin('themeId', TType::I32, 1);
      $xfer += $output->writeI32($this->themeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imgUrl !== null) {
      $xfer += $output->writeFieldBegin('imgUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->imgUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdDate !== null) {
      $xfer += $output->writeFieldBegin('createdDate', TType::I32, 4);
      $xfer += $output->writeI32($this->createdDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedDate !== null) {
      $xfer += $output->writeFieldBegin('updatedDate', TType::I32, 5);
      $xfer += $output->writeI32($this->updatedDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListItemRet {
  static $_TSPEC;

  public $items = null;
  public $offset = null;
  public $rows = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'items',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_ItemRet',
            ),
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['items'])) {
        $this->items = $vals['items'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListItemRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->items = array();
            $_size65 = 0;
            $_etype68 = 0;
            $xfer += $input->readListBegin($_etype68, $_size65);
            for ($_i69 = 0; $_i69 < $_size65; ++$_i69)
            {
              $elem70 = null;
              $elem70 = new gnt_mobion_storage_mobionchatiteminfo_ItemRet();
              $xfer += $elem70->read($input);
              $this->items []= $elem70;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListItemRet');
    if ($this->items !== null) {
      if (!is_array($this->items)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('items', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->items));
        {
          foreach ($this->items as $iter71)
          {
            $xfer += $iter71->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 3);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListPackageRet {
  static $_TSPEC;

  public $packages = null;
  public $offset = null;
  public $rows = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_PackageRet',
            ),
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packages'])) {
        $this->packages = $vals['packages'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListPackageRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->packages = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $elem77 = new gnt_mobion_storage_mobionchatiteminfo_PackageRet();
              $xfer += $elem77->read($input);
              $this->packages []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListPackageRet');
    if ($this->packages !== null) {
      if (!is_array($this->packages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('packages', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->packages));
        {
          foreach ($this->packages as $iter78)
          {
            $xfer += $iter78->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 3);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_PromotionRet {
  static $_TSPEC;

  public $promotionName = null;
  public $imageUrl = null;
  public $packageType = null;
  public $packageID = null;
  public $expireTime = null;
  public $createDate = null;
  public $active = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'promotionName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'packageType',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'expireTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'active',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['promotionName'])) {
        $this->promotionName = $vals['promotionName'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['packageType'])) {
        $this->packageType = $vals['packageType'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['expireTime'])) {
        $this->expireTime = $vals['expireTime'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
    }
  }

  public function getName() {
    return 'PromotionRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->promotionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->packageType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->expireTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PromotionRet');
    if ($this->promotionName !== null) {
      $xfer += $output->writeFieldBegin('promotionName', TType::STRING, 1);
      $xfer += $output->writeString($this->promotionName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 2);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageType !== null) {
      $xfer += $output->writeFieldBegin('packageType', TType::BYTE, 3);
      $xfer += $output->writeByte($this->packageType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 4);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->expireTime !== null) {
      $xfer += $output->writeFieldBegin('expireTime', TType::I64, 5);
      $xfer += $output->writeI64($this->expireTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 12);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BYTE, 14);
      $xfer += $output->writeByte($this->active);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListPromotionRet {
  static $_TSPEC;

  public $promotions = null;
  public $offset = null;
  public $rows = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'promotions',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_PromotionRet',
            ),
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rows',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['promotions'])) {
        $this->promotions = $vals['promotions'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['rows'])) {
        $this->rows = $vals['rows'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListPromotionRet';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->promotions = array();
            $_size79 = 0;
            $_etype82 = 0;
            $xfer += $input->readListBegin($_etype82, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $elem84 = null;
              $elem84 = new gnt_mobion_storage_mobionchatiteminfo_PromotionRet();
              $xfer += $elem84->read($input);
              $this->promotions []= $elem84;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rows);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListPromotionRet');
    if ($this->promotions !== null) {
      if (!is_array($this->promotions)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('promotions', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->promotions));
        {
          foreach ($this->promotions as $iter85)
          {
            $xfer += $iter85->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rows !== null) {
      $xfer += $output->writeFieldBegin('rows', TType::I32, 3);
      $xfer += $output->writeI32($this->rows);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ProductDetailResult {
  static $_TSPEC;

  public $status = null;
  public $pkgInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'pkgInfo',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_PackageInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['pkgInfo'])) {
        $this->pkgInfo = $vals['pkgInfo'];
      }
    }
  }

  public function getName() {
    return 'ProductDetailResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->pkgInfo = new gnt_mobion_storage_mobionchatiteminfo_PackageInfo();
            $xfer += $this->pkgInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductDetailResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgInfo !== null) {
      if (!is_object($this->pkgInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pkgInfo', TType::STRUCT, 2);
      $xfer += $this->pkgInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_UserProductDetailResult {
  static $_TSPEC;

  public $status = null;
  public $pkgInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'pkgInfo',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['pkgInfo'])) {
        $this->pkgInfo = $vals['pkgInfo'];
      }
    }
  }

  public function getName() {
    return 'UserProductDetailResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->pkgInfo = new gnt_mobion_storage_mobionchatiteminfo_UserPackage();
            $xfer += $this->pkgInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserProductDetailResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgInfo !== null) {
      if (!is_object($this->pkgInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pkgInfo', TType::STRUCT, 2);
      $xfer += $this->pkgInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListProductResult {
  static $_TSPEC;

  public $status = null;
  public $pkgInfos = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'pkgInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_PackageInfo',
            ),
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['pkgInfos'])) {
        $this->pkgInfos = $vals['pkgInfos'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListProductResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->pkgInfos = array();
            $_size86 = 0;
            $_etype89 = 0;
            $xfer += $input->readListBegin($_etype89, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $elem91 = null;
              $elem91 = new gnt_mobion_storage_mobionchatiteminfo_PackageInfo();
              $xfer += $elem91->read($input);
              $this->pkgInfos []= $elem91;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListProductResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgInfos !== null) {
      if (!is_array($this->pkgInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pkgInfos', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pkgInfos));
        {
          foreach ($this->pkgInfos as $iter92)
          {
            $xfer += $iter92->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListUserProductResult {
  static $_TSPEC;

  public $status = null;
  public $pkgInfos = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'pkgInfos',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackage',
            ),
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['pkgInfos'])) {
        $this->pkgInfos = $vals['pkgInfos'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListUserProductResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->pkgInfos = array();
            $_size93 = 0;
            $_etype96 = 0;
            $xfer += $input->readListBegin($_etype96, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $elem98 = null;
              $elem98 = new gnt_mobion_storage_mobionchatiteminfo_UserPackage();
              $xfer += $elem98->read($input);
              $this->pkgInfos []= $elem98;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListUserProductResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgInfos !== null) {
      if (!is_array($this->pkgInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pkgInfos', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->pkgInfos));
        {
          foreach ($this->pkgInfos as $iter99)
          {
            $xfer += $iter99->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_ListTopicThemeResult {
  static $_TSPEC;

  public $status = null;
  public $topicThemes = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'topicThemes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatiteminfo_TopicTheme',
            ),
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['topicThemes'])) {
        $this->topicThemes = $vals['topicThemes'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'ListTopicThemeResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->topicThemes = array();
            $_size100 = 0;
            $_etype103 = 0;
            $xfer += $input->readListBegin($_etype103, $_size100);
            for ($_i104 = 0; $_i104 < $_size100; ++$_i104)
            {
              $elem105 = null;
              $elem105 = new gnt_mobion_storage_mobionchatiteminfo_TopicTheme();
              $xfer += $elem105->read($input);
              $this->topicThemes []= $elem105;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListTopicThemeResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topicThemes !== null) {
      if (!is_array($this->topicThemes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('topicThemes', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->topicThemes));
        {
          foreach ($this->topicThemes as $iter106)
          {
            $xfer += $iter106->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
