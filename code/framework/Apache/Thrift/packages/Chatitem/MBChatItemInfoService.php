<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Chatitem/mobion_chatiteminfo_types.php';

interface gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoServiceIf {
  public function getListPackageSticker($offset, $limit, $sort, $accessCode);
  public function getListPackageTheme($offset, $limit, $sort, $accessCode);
  public function getListPackageAvatar($offset, $limit, $sort, $filterGender, $accessCode);
  public function getListPackagePhotoSkin($offset, $limit, $sort, $accessCode);
  public function getPackageDetail($packageID, $accessCode);
  public function getListItemInPackage($packageID, $offset, $limit, $sort, $accessCode);
  public function getItemDetail($itemID, $accessCode);
  public function getListPackageSaleOff($offset, $limit, $accessCode);
  public function getListPromotion($offset, $limit, $accessCode);
  public function createPackage($params, $accessCode);
  public function updatePackage($params, $accessCode);
  public function deletePackage($packageID, $accessCode);
  public function addItem($itemID, $chatItem, $accessCode);
  public function updateItem($itemID, $mItemAttribute, $accessCode);
  public function removeItem($itemID, $accessCode);
  public function getListPackageStickerAsJson($offset, $limit, $sort, $accessCode);
  public function getListPackageThemeAsJson($offset, $limit, $sort, $accessCode);
  public function getListPackageAvatarAsJson($offset, $limit, $sort, $filterGender, $accessCode);
  public function getListPackagePhotoSkinAsJson($offset, $limit, $sort, $accessCode);
  public function getPackageDetailAsJson($packageID, $accountID, $accessCode);
  public function getListItemInPackageAsJson($packageID, $offset, $limit, $sort, $accessCode);
  public function getItemDetailAsJson($itemID, $accessCode);
  public function getListPackageSaleOffAsJson($offset, $limit, $accessCode);
  public function getMyStickerPackagesAsJson($accountID, $offset, $limit, $accessCode);
  public function getMyAvatarPackagesAsJson($accountID, $offset, $limit, $accessCode);
  public function getMyPhotoSkinPackagesAsJson($accountID, $offset, $limit, $accessCode);
  public function getMyBackgroundPackagesAsJson($accountID, $offset, $limit, $accessCode);
  public function getMyStickerPackageDetailAsJson($accountID, $packageID, $accessCode);
  public function getMyAvatarPackageDetailAsJson($accountID, $packageID, $accessCode);
  public function getMyPhotoSkinPackageDetailAsJson($accountID, $packageID, $accessCode);
  public function getMyBackgroundPackageDetailAsJson($accountID, $packageID, $accessCode);
  public function getUsingAsJson($accountID, $accessCode);
  public function getListPromotionAsJson($offset, $limit, $accessCode);
  public function addUserPackage($accountID, $packageID, $forever, $accessCode);
  public function deleteUserPackage($accountID, $packageID, $accessCode);
  public function getMyStickerPackages($accountID, $offset, $limit, $accessCode);
  public function getMyAvatarPackages($accountID, $offset, $limit, $accessCode);
  public function getMyPhotoSkinPackages($accountID, $offset, $limit, $accessCode);
  public function getMyBackgroundPackages($accountID, $offset, $limit, $accessCode);
  public function getMyStickerPackageDetail($accountID, $packageID, $accessCode);
  public function getMyAvatarPackageDetail($accountID, $packageID, $accessCode);
  public function getMyPhotoSkinPackageDetail($accountID, $packageID, $accessCode);
  public function getMyBackgroundPackageDetail($accountID, $packageID, $accessCode);
  public function setUsingAvatar($accountID, $packageID, $ids, $accessCode);
  public function setUsingPhotoSkin($accountID, $packageID, $accessCode);
  public function setUsingBackground($accountID, $packageID, $accessCode);
  public function getUsing($accountID, $accessCode);
  public function addProduct($params, $accessCode);
  public function updateProduct($params, $accessCode);
  public function removeProduct($packageID, $accessCode);
  public function getProductDetail($accountID, $pkgID, $accessCode);
  public function getListProductInfo($productType, $offset, $limit, $sort, $accessCode);
  public function getListProductSaleOff($offset, $limit, $accessCode);
  public function getListProductEx($gender, $productType, $saleOff, $isHot, $isPaid, $offset, $limit, $accessCode);
  public function getListTopicTheme($offset, $limit, $accessCode);
  public function addProductItem($itemID, $params, $accessCode);
  public function updateProductItem($itemID, $params, $accessCode);
  public function removeProductItem($itemID, $accessCode);
  public function addProductForUser($accountID, $packageID, $flag, $accessCode);
  public function removeProductOfUser($accountID, $packageID, $accessCode);
  public function getListUserProductInfo($accountID, $productType, $offset, $limit, $accessCode);
  public function getUserProductDetail($accountID, $pkgID, $accessCode);
}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoServiceClient implements gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getListPackageSticker($offset, $limit, $sort, $accessCode)
  {
    $this->send_getListPackageSticker($offset, $limit, $sort, $accessCode);
    return $this->recv_getListPackageSticker();
  }

  public function send_getListPackageSticker($offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSticker_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageSticker', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageSticker', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageSticker()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSticker_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSticker_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListPackageSticker failed: unknown result");
  }

  public function getListPackageTheme($offset, $limit, $sort, $accessCode)
  {
    $this->send_getListPackageTheme($offset, $limit, $sort, $accessCode);
    return $this->recv_getListPackageTheme();
  }

  public function send_getListPackageTheme($offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageTheme_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageTheme', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageTheme', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageTheme()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageTheme_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageTheme_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListPackageTheme failed: unknown result");
  }

  public function getListPackageAvatar($offset, $limit, $sort, $filterGender, $accessCode)
  {
    $this->send_getListPackageAvatar($offset, $limit, $sort, $filterGender, $accessCode);
    return $this->recv_getListPackageAvatar();
  }

  public function send_getListPackageAvatar($offset, $limit, $sort, $filterGender, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatar_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->filterGender = $filterGender;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageAvatar', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageAvatar', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageAvatar()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatar_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatar_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListPackageAvatar failed: unknown result");
  }

  public function getListPackagePhotoSkin($offset, $limit, $sort, $accessCode)
  {
    $this->send_getListPackagePhotoSkin($offset, $limit, $sort, $accessCode);
    return $this->recv_getListPackagePhotoSkin();
  }

  public function send_getListPackagePhotoSkin($offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkin_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackagePhotoSkin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackagePhotoSkin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackagePhotoSkin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListPackagePhotoSkin failed: unknown result");
  }

  public function getPackageDetail($packageID, $accessCode)
  {
    $this->send_getPackageDetail($packageID, $accessCode);
    return $this->recv_getPackageDetail();
  }

  public function send_getPackageDetail($packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetail_args();
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPackageDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPackageDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPackageDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getPackageDetail failed: unknown result");
  }

  public function getListItemInPackage($packageID, $offset, $limit, $sort, $accessCode)
  {
    $this->send_getListItemInPackage($packageID, $offset, $limit, $sort, $accessCode);
    return $this->recv_getListItemInPackage();
  }

  public function send_getListItemInPackage($packageID, $offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackage_args();
    $args->packageID = $packageID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListItemInPackage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListItemInPackage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListItemInPackage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListItemInPackage failed: unknown result");
  }

  public function getItemDetail($itemID, $accessCode)
  {
    $this->send_getItemDetail($itemID, $accessCode);
    return $this->recv_getItemDetail();
  }

  public function send_getItemDetail($itemID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetail_args();
    $args->itemID = $itemID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getItemDetail failed: unknown result");
  }

  public function getListPackageSaleOff($offset, $limit, $accessCode)
  {
    $this->send_getListPackageSaleOff($offset, $limit, $accessCode);
    return $this->recv_getListPackageSaleOff();
  }

  public function send_getListPackageSaleOff($offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOff_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageSaleOff', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageSaleOff', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageSaleOff()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOff_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOff_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListPackageSaleOff failed: unknown result");
  }

  public function getListPromotion($offset, $limit, $accessCode)
  {
    $this->send_getListPromotion($offset, $limit, $accessCode);
    return $this->recv_getListPromotion();
  }

  public function send_getListPromotion($offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotion_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPromotion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPromotion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPromotion()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getListPromotion failed: unknown result");
  }

  public function createPackage($params, $accessCode)
  {
    $this->send_createPackage($params, $accessCode);
    return $this->recv_createPackage();
  }

  public function send_createPackage($params, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_createPackage_args();
    $args->params = $params;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createPackage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createPackage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createPackage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_createPackage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_createPackage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("createPackage failed: unknown result");
  }

  public function updatePackage($params, $accessCode)
  {
    $this->send_updatePackage($params, $accessCode);
    return $this->recv_updatePackage();
  }

  public function send_updatePackage($params, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updatePackage_args();
    $args->params = $params;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePackage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePackage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePackage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updatePackage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updatePackage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updatePackage failed: unknown result");
  }

  public function deletePackage($packageID, $accessCode)
  {
    $this->send_deletePackage($packageID, $accessCode);
    $this->recv_deletePackage();
  }

  public function send_deletePackage($packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deletePackage_args();
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePackage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePackage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePackage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deletePackage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deletePackage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function addItem($itemID, $chatItem, $accessCode)
  {
    $this->send_addItem($itemID, $chatItem, $accessCode);
    $this->recv_addItem();
  }

  public function send_addItem($itemID, $chatItem, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addItem_args();
    $args->itemID = $itemID;
    $args->chatItem = $chatItem;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addItem()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function updateItem($itemID, $mItemAttribute, $accessCode)
  {
    $this->send_updateItem($itemID, $mItemAttribute, $accessCode);
    $this->recv_updateItem();
  }

  public function send_updateItem($itemID, $mItemAttribute, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateItem_args();
    $args->itemID = $itemID;
    $args->mItemAttribute = $mItemAttribute;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateItem()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function removeItem($itemID, $accessCode)
  {
    $this->send_removeItem($itemID, $accessCode);
    $this->recv_removeItem();
  }

  public function send_removeItem($itemID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeItem_args();
    $args->itemID = $itemID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeItem()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function getListPackageStickerAsJson($offset, $limit, $sort, $accessCode)
  {
    $this->send_getListPackageStickerAsJson($offset, $limit, $sort, $accessCode);
    return $this->recv_getListPackageStickerAsJson();
  }

  public function send_getListPackageStickerAsJson($offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageStickerAsJson_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageStickerAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageStickerAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageStickerAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageStickerAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageStickerAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListPackageStickerAsJson failed: unknown result");
  }

  public function getListPackageThemeAsJson($offset, $limit, $sort, $accessCode)
  {
    $this->send_getListPackageThemeAsJson($offset, $limit, $sort, $accessCode);
    return $this->recv_getListPackageThemeAsJson();
  }

  public function send_getListPackageThemeAsJson($offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageThemeAsJson_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageThemeAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageThemeAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageThemeAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageThemeAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageThemeAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListPackageThemeAsJson failed: unknown result");
  }

  public function getListPackageAvatarAsJson($offset, $limit, $sort, $filterGender, $accessCode)
  {
    $this->send_getListPackageAvatarAsJson($offset, $limit, $sort, $filterGender, $accessCode);
    return $this->recv_getListPackageAvatarAsJson();
  }

  public function send_getListPackageAvatarAsJson($offset, $limit, $sort, $filterGender, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatarAsJson_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->filterGender = $filterGender;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageAvatarAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageAvatarAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageAvatarAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatarAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatarAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListPackageAvatarAsJson failed: unknown result");
  }

  public function getListPackagePhotoSkinAsJson($offset, $limit, $sort, $accessCode)
  {
    $this->send_getListPackagePhotoSkinAsJson($offset, $limit, $sort, $accessCode);
    return $this->recv_getListPackagePhotoSkinAsJson();
  }

  public function send_getListPackagePhotoSkinAsJson($offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkinAsJson_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackagePhotoSkinAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackagePhotoSkinAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackagePhotoSkinAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkinAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkinAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListPackagePhotoSkinAsJson failed: unknown result");
  }

  public function getPackageDetailAsJson($packageID, $accountID, $accessCode)
  {
    $this->send_getPackageDetailAsJson($packageID, $accountID, $accessCode);
    return $this->recv_getPackageDetailAsJson();
  }

  public function send_getPackageDetailAsJson($packageID, $accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetailAsJson_args();
    $args->packageID = $packageID;
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPackageDetailAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPackageDetailAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPackageDetailAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetailAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetailAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getPackageDetailAsJson failed: unknown result");
  }

  public function getListItemInPackageAsJson($packageID, $offset, $limit, $sort, $accessCode)
  {
    $this->send_getListItemInPackageAsJson($packageID, $offset, $limit, $sort, $accessCode);
    return $this->recv_getListItemInPackageAsJson();
  }

  public function send_getListItemInPackageAsJson($packageID, $offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackageAsJson_args();
    $args->packageID = $packageID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListItemInPackageAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListItemInPackageAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListItemInPackageAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackageAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackageAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListItemInPackageAsJson failed: unknown result");
  }

  public function getItemDetailAsJson($itemID, $accessCode)
  {
    $this->send_getItemDetailAsJson($itemID, $accessCode);
    return $this->recv_getItemDetailAsJson();
  }

  public function send_getItemDetailAsJson($itemID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetailAsJson_args();
    $args->itemID = $itemID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemDetailAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemDetailAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemDetailAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetailAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetailAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getItemDetailAsJson failed: unknown result");
  }

  public function getListPackageSaleOffAsJson($offset, $limit, $accessCode)
  {
    $this->send_getListPackageSaleOffAsJson($offset, $limit, $accessCode);
    return $this->recv_getListPackageSaleOffAsJson();
  }

  public function send_getListPackageSaleOffAsJson($offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOffAsJson_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPackageSaleOffAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPackageSaleOffAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPackageSaleOffAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOffAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOffAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListPackageSaleOffAsJson failed: unknown result");
  }

  public function getMyStickerPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyStickerPackagesAsJson($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyStickerPackagesAsJson();
  }

  public function send_getMyStickerPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackagesAsJson_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyStickerPackagesAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyStickerPackagesAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyStickerPackagesAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackagesAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackagesAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyStickerPackagesAsJson failed: unknown result");
  }

  public function getMyAvatarPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyAvatarPackagesAsJson($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyAvatarPackagesAsJson();
  }

  public function send_getMyAvatarPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackagesAsJson_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyAvatarPackagesAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyAvatarPackagesAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyAvatarPackagesAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackagesAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackagesAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyAvatarPackagesAsJson failed: unknown result");
  }

  public function getMyPhotoSkinPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyPhotoSkinPackagesAsJson($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyPhotoSkinPackagesAsJson();
  }

  public function send_getMyPhotoSkinPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyPhotoSkinPackagesAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyPhotoSkinPackagesAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyPhotoSkinPackagesAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyPhotoSkinPackagesAsJson failed: unknown result");
  }

  public function getMyBackgroundPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyBackgroundPackagesAsJson($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyBackgroundPackagesAsJson();
  }

  public function send_getMyBackgroundPackagesAsJson($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackagesAsJson_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyBackgroundPackagesAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyBackgroundPackagesAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyBackgroundPackagesAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackagesAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackagesAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyBackgroundPackagesAsJson failed: unknown result");
  }

  public function getMyStickerPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $this->send_getMyStickerPackageDetailAsJson($accountID, $packageID, $accessCode);
    return $this->recv_getMyStickerPackageDetailAsJson();
  }

  public function send_getMyStickerPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetailAsJson_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyStickerPackageDetailAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyStickerPackageDetailAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyStickerPackageDetailAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetailAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetailAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyStickerPackageDetailAsJson failed: unknown result");
  }

  public function getMyAvatarPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $this->send_getMyAvatarPackageDetailAsJson($accountID, $packageID, $accessCode);
    return $this->recv_getMyAvatarPackageDetailAsJson();
  }

  public function send_getMyAvatarPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetailAsJson_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyAvatarPackageDetailAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyAvatarPackageDetailAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyAvatarPackageDetailAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetailAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetailAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyAvatarPackageDetailAsJson failed: unknown result");
  }

  public function getMyPhotoSkinPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $this->send_getMyPhotoSkinPackageDetailAsJson($accountID, $packageID, $accessCode);
    return $this->recv_getMyPhotoSkinPackageDetailAsJson();
  }

  public function send_getMyPhotoSkinPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyPhotoSkinPackageDetailAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyPhotoSkinPackageDetailAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyPhotoSkinPackageDetailAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyPhotoSkinPackageDetailAsJson failed: unknown result");
  }

  public function getMyBackgroundPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $this->send_getMyBackgroundPackageDetailAsJson($accountID, $packageID, $accessCode);
    return $this->recv_getMyBackgroundPackageDetailAsJson();
  }

  public function send_getMyBackgroundPackageDetailAsJson($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyBackgroundPackageDetailAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyBackgroundPackageDetailAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyBackgroundPackageDetailAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMyBackgroundPackageDetailAsJson failed: unknown result");
  }

  public function getUsingAsJson($accountID, $accessCode)
  {
    $this->send_getUsingAsJson($accountID, $accessCode);
    return $this->recv_getUsingAsJson();
  }

  public function send_getUsingAsJson($accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsingAsJson_args();
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsingAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsingAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsingAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsingAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsingAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUsingAsJson failed: unknown result");
  }

  public function getListPromotionAsJson($offset, $limit, $accessCode)
  {
    $this->send_getListPromotionAsJson($offset, $limit, $accessCode);
    return $this->recv_getListPromotionAsJson();
  }

  public function send_getListPromotionAsJson($offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotionAsJson_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListPromotionAsJson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListPromotionAsJson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListPromotionAsJson()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotionAsJson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotionAsJson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListPromotionAsJson failed: unknown result");
  }

  public function addUserPackage($accountID, $packageID, $forever, $accessCode)
  {
    $this->send_addUserPackage($accountID, $packageID, $forever, $accessCode);
    return $this->recv_addUserPackage();
  }

  public function send_addUserPackage($accountID, $packageID, $forever, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addUserPackage_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->forever = $forever;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addUserPackage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addUserPackage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addUserPackage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addUserPackage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addUserPackage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addUserPackage failed: unknown result");
  }

  public function deleteUserPackage($accountID, $packageID, $accessCode)
  {
    $this->send_deleteUserPackage($accountID, $packageID, $accessCode);
    return $this->recv_deleteUserPackage();
  }

  public function send_deleteUserPackage($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deleteUserPackage_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteUserPackage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteUserPackage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteUserPackage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deleteUserPackage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deleteUserPackage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("deleteUserPackage failed: unknown result");
  }

  public function getMyStickerPackages($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyStickerPackages($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyStickerPackages();
  }

  public function send_getMyStickerPackages($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackages_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyStickerPackages', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyStickerPackages', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyStickerPackages()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackages_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackages_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyStickerPackages failed: unknown result");
  }

  public function getMyAvatarPackages($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyAvatarPackages($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyAvatarPackages();
  }

  public function send_getMyAvatarPackages($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackages_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyAvatarPackages', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyAvatarPackages', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyAvatarPackages()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackages_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackages_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyAvatarPackages failed: unknown result");
  }

  public function getMyPhotoSkinPackages($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyPhotoSkinPackages($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyPhotoSkinPackages();
  }

  public function send_getMyPhotoSkinPackages($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackages_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyPhotoSkinPackages', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyPhotoSkinPackages', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyPhotoSkinPackages()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackages_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackages_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyPhotoSkinPackages failed: unknown result");
  }

  public function getMyBackgroundPackages($accountID, $offset, $limit, $accessCode)
  {
    $this->send_getMyBackgroundPackages($accountID, $offset, $limit, $accessCode);
    return $this->recv_getMyBackgroundPackages();
  }

  public function send_getMyBackgroundPackages($accountID, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackages_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyBackgroundPackages', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyBackgroundPackages', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyBackgroundPackages()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackages_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackages_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyBackgroundPackages failed: unknown result");
  }

  public function getMyStickerPackageDetail($accountID, $packageID, $accessCode)
  {
    $this->send_getMyStickerPackageDetail($accountID, $packageID, $accessCode);
    return $this->recv_getMyStickerPackageDetail();
  }

  public function send_getMyStickerPackageDetail($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetail_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyStickerPackageDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyStickerPackageDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyStickerPackageDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyStickerPackageDetail failed: unknown result");
  }

  public function getMyAvatarPackageDetail($accountID, $packageID, $accessCode)
  {
    $this->send_getMyAvatarPackageDetail($accountID, $packageID, $accessCode);
    return $this->recv_getMyAvatarPackageDetail();
  }

  public function send_getMyAvatarPackageDetail($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetail_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyAvatarPackageDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyAvatarPackageDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyAvatarPackageDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyAvatarPackageDetail failed: unknown result");
  }

  public function getMyPhotoSkinPackageDetail($accountID, $packageID, $accessCode)
  {
    $this->send_getMyPhotoSkinPackageDetail($accountID, $packageID, $accessCode);
    return $this->recv_getMyPhotoSkinPackageDetail();
  }

  public function send_getMyPhotoSkinPackageDetail($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetail_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyPhotoSkinPackageDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyPhotoSkinPackageDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyPhotoSkinPackageDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyPhotoSkinPackageDetail failed: unknown result");
  }

  public function getMyBackgroundPackageDetail($accountID, $packageID, $accessCode)
  {
    $this->send_getMyBackgroundPackageDetail($accountID, $packageID, $accessCode);
    return $this->recv_getMyBackgroundPackageDetail();
  }

  public function send_getMyBackgroundPackageDetail($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetail_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMyBackgroundPackageDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMyBackgroundPackageDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMyBackgroundPackageDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getMyBackgroundPackageDetail failed: unknown result");
  }

  public function setUsingAvatar($accountID, $packageID, $ids, $accessCode)
  {
    $this->send_setUsingAvatar($accountID, $packageID, $ids, $accessCode);
    $this->recv_setUsingAvatar();
  }

  public function send_setUsingAvatar($accountID, $packageID, $ids, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingAvatar_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->ids = $ids;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setUsingAvatar', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setUsingAvatar', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setUsingAvatar()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingAvatar_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingAvatar_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function setUsingPhotoSkin($accountID, $packageID, $accessCode)
  {
    $this->send_setUsingPhotoSkin($accountID, $packageID, $accessCode);
    $this->recv_setUsingPhotoSkin();
  }

  public function send_setUsingPhotoSkin($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingPhotoSkin_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setUsingPhotoSkin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setUsingPhotoSkin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setUsingPhotoSkin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingPhotoSkin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingPhotoSkin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function setUsingBackground($accountID, $packageID, $accessCode)
  {
    $this->send_setUsingBackground($accountID, $packageID, $accessCode);
    $this->recv_setUsingBackground();
  }

  public function send_setUsingBackground($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingBackground_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setUsingBackground', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setUsingBackground', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setUsingBackground()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingBackground_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingBackground_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    return;
  }

  public function getUsing($accountID, $accessCode)
  {
    $this->send_getUsing($accountID, $accessCode);
    return $this->recv_getUsing();
  }

  public function send_getUsing($accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsing_args();
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsing', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsing', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsing()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->se !== null) {
      throw $result->se;
    }
    throw new Exception("getUsing failed: unknown result");
  }

  public function addProduct($params, $accessCode)
  {
    $this->send_addProduct($params, $accessCode);
    return $this->recv_addProduct();
  }

  public function send_addProduct($params, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProduct_args();
    $args->params = $params;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addProduct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addProduct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addProduct()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProduct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProduct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addProduct failed: unknown result");
  }

  public function updateProduct($params, $accessCode)
  {
    $this->send_updateProduct($params, $accessCode);
    return $this->recv_updateProduct();
  }

  public function send_updateProduct($params, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProduct_args();
    $args->params = $params;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProduct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProduct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProduct()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProduct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProduct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updateProduct failed: unknown result");
  }

  public function removeProduct($packageID, $accessCode)
  {
    $this->send_removeProduct($packageID, $accessCode);
    return $this->recv_removeProduct();
  }

  public function send_removeProduct($packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProduct_args();
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeProduct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeProduct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeProduct()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProduct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProduct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("removeProduct failed: unknown result");
  }

  public function getProductDetail($accountID, $pkgID, $accessCode)
  {
    $this->send_getProductDetail($accountID, $pkgID, $accessCode);
    return $this->recv_getProductDetail();
  }

  public function send_getProductDetail($accountID, $pkgID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getProductDetail_args();
    $args->accountID = $accountID;
    $args->pkgID = $pkgID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getProductDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getProductDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getProductDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getProductDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getProductDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getProductDetail failed: unknown result");
  }

  public function getListProductInfo($productType, $offset, $limit, $sort, $accessCode)
  {
    $this->send_getListProductInfo($productType, $offset, $limit, $sort, $accessCode);
    return $this->recv_getListProductInfo();
  }

  public function send_getListProductInfo($productType, $offset, $limit, $sort, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductInfo_args();
    $args->productType = $productType;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->sort = $sort;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListProductInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListProductInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListProductInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListProductInfo failed: unknown result");
  }

  public function getListProductSaleOff($offset, $limit, $accessCode)
  {
    $this->send_getListProductSaleOff($offset, $limit, $accessCode);
    return $this->recv_getListProductSaleOff();
  }

  public function send_getListProductSaleOff($offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductSaleOff_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListProductSaleOff', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListProductSaleOff', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListProductSaleOff()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductSaleOff_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductSaleOff_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListProductSaleOff failed: unknown result");
  }

  public function getListProductEx($gender, $productType, $saleOff, $isHot, $isPaid, $offset, $limit, $accessCode)
  {
    $this->send_getListProductEx($gender, $productType, $saleOff, $isHot, $isPaid, $offset, $limit, $accessCode);
    return $this->recv_getListProductEx();
  }

  public function send_getListProductEx($gender, $productType, $saleOff, $isHot, $isPaid, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductEx_args();
    $args->gender = $gender;
    $args->productType = $productType;
    $args->saleOff = $saleOff;
    $args->isHot = $isHot;
    $args->isPaid = $isPaid;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListProductEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListProductEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListProductEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListProductEx failed: unknown result");
  }

  public function getListTopicTheme($offset, $limit, $accessCode)
  {
    $this->send_getListTopicTheme($offset, $limit, $accessCode);
    return $this->recv_getListTopicTheme();
  }

  public function send_getListTopicTheme($offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListTopicTheme_args();
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListTopicTheme', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListTopicTheme', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListTopicTheme()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListTopicTheme_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListTopicTheme_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListTopicTheme failed: unknown result");
  }

  public function addProductItem($itemID, $params, $accessCode)
  {
    $this->send_addProductItem($itemID, $params, $accessCode);
    return $this->recv_addProductItem();
  }

  public function send_addProductItem($itemID, $params, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductItem_args();
    $args->itemID = $itemID;
    $args->params = $params;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addProductItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addProductItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addProductItem()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addProductItem failed: unknown result");
  }

  public function updateProductItem($itemID, $params, $accessCode)
  {
    $this->send_updateProductItem($itemID, $params, $accessCode);
    return $this->recv_updateProductItem();
  }

  public function send_updateProductItem($itemID, $params, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProductItem_args();
    $args->itemID = $itemID;
    $args->params = $params;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateProductItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateProductItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateProductItem()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProductItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProductItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updateProductItem failed: unknown result");
  }

  public function removeProductItem($itemID, $accessCode)
  {
    $this->send_removeProductItem($itemID, $accessCode);
    return $this->recv_removeProductItem();
  }

  public function send_removeProductItem($itemID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductItem_args();
    $args->itemID = $itemID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeProductItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeProductItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeProductItem()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("removeProductItem failed: unknown result");
  }

  public function addProductForUser($accountID, $packageID, $flag, $accessCode)
  {
    $this->send_addProductForUser($accountID, $packageID, $flag, $accessCode);
    return $this->recv_addProductForUser();
  }

  public function send_addProductForUser($accountID, $packageID, $flag, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductForUser_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->flag = $flag;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addProductForUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addProductForUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addProductForUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductForUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductForUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addProductForUser failed: unknown result");
  }

  public function removeProductOfUser($accountID, $packageID, $accessCode)
  {
    $this->send_removeProductOfUser($accountID, $packageID, $accessCode);
    return $this->recv_removeProductOfUser();
  }

  public function send_removeProductOfUser($accountID, $packageID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductOfUser_args();
    $args->accountID = $accountID;
    $args->packageID = $packageID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeProductOfUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeProductOfUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeProductOfUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductOfUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductOfUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("removeProductOfUser failed: unknown result");
  }

  public function getListUserProductInfo($accountID, $productType, $offset, $limit, $accessCode)
  {
    $this->send_getListUserProductInfo($accountID, $productType, $offset, $limit, $accessCode);
    return $this->recv_getListUserProductInfo();
  }

  public function send_getListUserProductInfo($accountID, $productType, $offset, $limit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListUserProductInfo_args();
    $args->accountID = $accountID;
    $args->productType = $productType;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListUserProductInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListUserProductInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListUserProductInfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListUserProductInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListUserProductInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListUserProductInfo failed: unknown result");
  }

  public function getUserProductDetail($accountID, $pkgID, $accessCode)
  {
    $this->send_getUserProductDetail($accountID, $pkgID, $accessCode);
    return $this->recv_getUserProductDetail();
  }

  public function send_getUserProductDetail($accountID, $pkgID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUserProductDetail_args();
    $args->accountID = $accountID;
    $args->pkgID = $pkgID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserProductDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserProductDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserProductDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUserProductDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUserProductDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUserProductDetail failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSticker_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageSticker_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageSticker_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSticker_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageSticker_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageSticker_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageTheme_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageTheme_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageTheme_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageTheme_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageTheme_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageTheme_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatar_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $filterGender = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'filterGender',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['filterGender'])) {
        $this->filterGender = $vals['filterGender'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageAvatar_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filterGender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageAvatar_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filterGender !== null) {
      $xfer += $output->writeFieldBegin('filterGender', TType::I32, 4);
      $xfer += $output->writeI32($this->filterGender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatar_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageAvatar_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageAvatar_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkin_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackagePhotoSkin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackagePhotoSkin_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkin_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackagePhotoSkin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackagePhotoSkin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetail_args {
  static $_TSPEC;

  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getPackageDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getPackageDetail_args');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetail_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_PackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getPackageDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_PackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getPackageDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackage_args {
  static $_TSPEC;

  public $packageID = null;
  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListItemInPackage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListItemInPackage_args');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 4);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackage_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListItemRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListItemInPackage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListItemRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListItemInPackage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetail_args {
  static $_TSPEC;

  public $itemID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getItemDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getItemDetail_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetail_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ItemRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getItemDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ItemRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getItemDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOff_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageSaleOff_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageSaleOff_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOff_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageSaleOff_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageSaleOff_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotion_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPromotion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPromotion_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotion_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListPromotionRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPromotion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListPromotionRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPromotion_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_createPackage_args {
  static $_TSPEC;

  public $params = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_createPackage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size107 = 0;
            $_ktype108 = 0;
            $_vtype109 = 0;
            $xfer += $input->readMapBegin($_ktype108, $_vtype109, $_size107);
            for ($_i111 = 0; $_i111 < $_size107; ++$_i111)
            {
              $key112 = '';
              $val113 = '';
              $xfer += $input->readString($key112);
              $xfer += $input->readString($val113);
              $this->params[$key112] = $val113;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_createPackage_args');
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter114 => $viter115)
          {
            $xfer += $output->writeString($kiter114);
            $xfer += $output->writeString($viter115);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_createPackage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_createPackage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_createPackage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updatePackage_args {
  static $_TSPEC;

  public $params = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updatePackage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size116 = 0;
            $_ktype117 = 0;
            $_vtype118 = 0;
            $xfer += $input->readMapBegin($_ktype117, $_vtype118, $_size116);
            for ($_i120 = 0; $_i120 < $_size116; ++$_i120)
            {
              $key121 = '';
              $val122 = '';
              $xfer += $input->readString($key121);
              $xfer += $input->readString($val122);
              $this->params[$key121] = $val122;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updatePackage_args');
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter123 => $viter124)
          {
            $xfer += $output->writeString($kiter123);
            $xfer += $output->writeString($viter124);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updatePackage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updatePackage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updatePackage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deletePackage_args {
  static $_TSPEC;

  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_deletePackage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_deletePackage_args');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deletePackage_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_deletePackage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_deletePackage_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addItem_args {
  static $_TSPEC;

  public $itemID = null;
  public $chatItem = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'chatItem',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['chatItem'])) {
        $this->chatItem = $vals['chatItem'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->chatItem = array();
            $_size125 = 0;
            $_ktype126 = 0;
            $_vtype127 = 0;
            $xfer += $input->readMapBegin($_ktype126, $_vtype127, $_size125);
            for ($_i129 = 0; $_i129 < $_size125; ++$_i129)
            {
              $key130 = '';
              $val131 = '';
              $xfer += $input->readString($key130);
              $xfer += $input->readString($val131);
              $this->chatItem[$key130] = $val131;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addItem_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatItem !== null) {
      if (!is_array($this->chatItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chatItem', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->chatItem));
        {
          foreach ($this->chatItem as $kiter132 => $viter133)
          {
            $xfer += $output->writeString($kiter132);
            $xfer += $output->writeString($viter133);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addItem_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addItem_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateItem_args {
  static $_TSPEC;

  public $itemID = null;
  public $mItemAttribute = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mItemAttribute',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['mItemAttribute'])) {
        $this->mItemAttribute = $vals['mItemAttribute'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updateItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->mItemAttribute = array();
            $_size134 = 0;
            $_ktype135 = 0;
            $_vtype136 = 0;
            $xfer += $input->readMapBegin($_ktype135, $_vtype136, $_size134);
            for ($_i138 = 0; $_i138 < $_size134; ++$_i138)
            {
              $key139 = '';
              $val140 = '';
              $xfer += $input->readString($key139);
              $xfer += $input->readString($val140);
              $this->mItemAttribute[$key139] = $val140;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updateItem_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mItemAttribute !== null) {
      if (!is_array($this->mItemAttribute)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mItemAttribute', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->mItemAttribute));
        {
          foreach ($this->mItemAttribute as $kiter141 => $viter142)
          {
            $xfer += $output->writeString($kiter141);
            $xfer += $output->writeString($viter142);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateItem_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updateItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updateItem_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeItem_args {
  static $_TSPEC;

  public $itemID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeItem_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeItem_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeItem_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageStickerAsJson_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageStickerAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageStickerAsJson_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageStickerAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageStickerAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageStickerAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageThemeAsJson_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageThemeAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageThemeAsJson_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageThemeAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageThemeAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageThemeAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatarAsJson_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $filterGender = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'filterGender',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['filterGender'])) {
        $this->filterGender = $vals['filterGender'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageAvatarAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->filterGender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageAvatarAsJson_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filterGender !== null) {
      $xfer += $output->writeFieldBegin('filterGender', TType::I32, 4);
      $xfer += $output->writeI32($this->filterGender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageAvatarAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageAvatarAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageAvatarAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkinAsJson_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackagePhotoSkinAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackagePhotoSkinAsJson_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 3);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackagePhotoSkinAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackagePhotoSkinAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackagePhotoSkinAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetailAsJson_args {
  static $_TSPEC;

  public $packageID = null;
  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getPackageDetailAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getPackageDetailAsJson_args');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 2);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getPackageDetailAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getPackageDetailAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getPackageDetailAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackageAsJson_args {
  static $_TSPEC;

  public $packageID = null;
  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListItemInPackageAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListItemInPackageAsJson_args');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 4);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListItemInPackageAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListItemInPackageAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListItemInPackageAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetailAsJson_args {
  static $_TSPEC;

  public $itemID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getItemDetailAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getItemDetailAsJson_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getItemDetailAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getItemDetailAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getItemDetailAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOffAsJson_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageSaleOffAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageSaleOffAsJson_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPackageSaleOffAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPackageSaleOffAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPackageSaleOffAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackagesAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackagesAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackagesAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackagesAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackagesAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackagesAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackagesAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackagesAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackagesAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackagesAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackagesAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackagesAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackagesAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackagesAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackagesAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackagesAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackagesAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackagesAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackagesAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetailAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackageDetailAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackageDetailAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetailAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackageDetailAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackageDetailAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetailAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackageDetailAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackageDetailAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetailAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackageDetailAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackageDetailAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackageDetailAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackageDetailAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsingAsJson_args {
  static $_TSPEC;

  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getUsingAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getUsingAsJson_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsingAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getUsingAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getUsingAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotionAsJson_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPromotionAsJson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPromotionAsJson_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListPromotionAsJson_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListPromotionAsJson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListPromotionAsJson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addUserPackage_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $forever = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'forever',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['forever'])) {
        $this->forever = $vals['forever'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addUserPackage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->forever);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addUserPackage_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->forever !== null) {
      $xfer += $output->writeFieldBegin('forever', TType::BOOL, 3);
      $xfer += $output->writeBool($this->forever);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addUserPackage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addUserPackage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addUserPackage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deleteUserPackage_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_deleteUserPackage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_deleteUserPackage_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_deleteUserPackage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_deleteUserPackage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_deleteUserPackage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackages_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackages_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackages_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackages_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackages_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackages_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackages_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackages_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackages_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackages_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackages_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackages_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackages_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackages_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackages_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackages_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackages_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackages_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackages_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackages_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackages_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackages_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackages_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListUserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackages_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetail_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackageDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackageDetail_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyStickerPackageDetail_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyStickerPackageDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyStickerPackageDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetail_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackageDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackageDetail_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyAvatarPackageDetail_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyAvatarPackageDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyAvatarPackageDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetail_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackageDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackageDetail_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyPhotoSkinPackageDetail_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyPhotoSkinPackageDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyPhotoSkinPackageDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetail_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackageDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackageDetail_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getMyBackgroundPackageDetail_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserPackageRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getMyBackgroundPackageDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_UserPackageRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getMyBackgroundPackageDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingAvatar_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $ids = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['ids'])) {
        $this->ids = $vals['ids'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_setUsingAvatar_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->ids = array();
            $_size143 = 0;
            $_etype146 = 0;
            $xfer += $input->readListBegin($_etype146, $_size143);
            for ($_i147 = 0; $_i147 < $_size143; ++$_i147)
            {
              $elem148 = null;
              $xfer += $input->readString($elem148);
              $this->ids []= $elem148;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_setUsingAvatar_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ids !== null) {
      if (!is_array($this->ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ids', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->ids));
        {
          foreach ($this->ids as $iter149)
          {
            $xfer += $output->writeString($iter149);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingAvatar_result {
  static $_TSPEC;

  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_setUsingAvatar_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_setUsingAvatar_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingPhotoSkin_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_setUsingPhotoSkin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_setUsingPhotoSkin_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingPhotoSkin_result {
  static $_TSPEC;

  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_setUsingPhotoSkin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_setUsingPhotoSkin_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingBackground_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_setUsingBackground_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_setUsingBackground_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_setUsingBackground_result {
  static $_TSPEC;

  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_setUsingBackground_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_setUsingBackground_result');
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsing_args {
  static $_TSPEC;

  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getUsing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getUsing_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUsing_result {
  static $_TSPEC;

  public $success = null;
  public $se = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UsingRet',
          ),
        1 => array(
          'var' => 'se',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ServerError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['se'])) {
        $this->se = $vals['se'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getUsing_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_UsingRet();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->se = new gnt_mobion_storage_mobionchatiteminfo_ServerError();
            $xfer += $this->se->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getUsing_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->se !== null) {
      $xfer += $output->writeFieldBegin('se', TType::STRUCT, 1);
      $xfer += $this->se->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProduct_args {
  static $_TSPEC;

  public $params = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addProduct_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size150 = 0;
            $_ktype151 = 0;
            $_vtype152 = 0;
            $xfer += $input->readMapBegin($_ktype151, $_vtype152, $_size150);
            for ($_i154 = 0; $_i154 < $_size150; ++$_i154)
            {
              $key155 = '';
              $val156 = '';
              $xfer += $input->readString($key155);
              $xfer += $input->readString($val156);
              $this->params[$key155] = $val156;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addProduct_args');
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter157 => $viter158)
          {
            $xfer += $output->writeString($kiter157);
            $xfer += $output->writeString($viter158);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProduct_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addProduct_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addProduct_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProduct_args {
  static $_TSPEC;

  public $params = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updateProduct_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size159 = 0;
            $_ktype160 = 0;
            $_vtype161 = 0;
            $xfer += $input->readMapBegin($_ktype160, $_vtype161, $_size159);
            for ($_i163 = 0; $_i163 < $_size159; ++$_i163)
            {
              $key164 = '';
              $val165 = '';
              $xfer += $input->readString($key164);
              $xfer += $input->readString($val165);
              $this->params[$key164] = $val165;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updateProduct_args');
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter166 => $viter167)
          {
            $xfer += $output->writeString($kiter166);
            $xfer += $output->writeString($viter167);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProduct_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updateProduct_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updateProduct_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProduct_args {
  static $_TSPEC;

  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeProduct_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeProduct_args');
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 1);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProduct_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeProduct_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeProduct_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getProductDetail_args {
  static $_TSPEC;

  public $accountID = null;
  public $pkgID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pkgID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['pkgID'])) {
        $this->pkgID = $vals['pkgID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getProductDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pkgID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getProductDetail_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgID !== null) {
      $xfer += $output->writeFieldBegin('pkgID', TType::I32, 2);
      $xfer += $output->writeI32($this->pkgID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getProductDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ProductDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getProductDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ProductDetailResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getProductDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductInfo_args {
  static $_TSPEC;

  public $productType = null;
  public $offset = null;
  public $limit = null;
  public $sort = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'productType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'sort',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['sort'])) {
        $this->sort = $vals['sort'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListProductInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListProductInfo_args');
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::I32, 1);
      $xfer += $output->writeI32($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort !== null) {
      $xfer += $output->writeFieldBegin('sort', TType::I32, 4);
      $xfer += $output->writeI32($this->sort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductInfo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListProductResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListProductInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListProductResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListProductInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductSaleOff_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListProductSaleOff_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListProductSaleOff_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductSaleOff_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListProductResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListProductSaleOff_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListProductResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListProductSaleOff_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductEx_args {
  static $_TSPEC;

  public $gender = null;
  public $productType = null;
  public $saleOff = null;
  public $isHot = null;
  public $isPaid = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gender',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'productType',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'saleOff',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'isHot',
          'type' => TType::BYTE,
          ),
        5 => array(
          'var' => 'isPaid',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['saleOff'])) {
        $this->saleOff = $vals['saleOff'];
      }
      if (isset($vals['isHot'])) {
        $this->isHot = $vals['isHot'];
      }
      if (isset($vals['isPaid'])) {
        $this->isPaid = $vals['isPaid'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListProductEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->saleOff);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isHot);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->isPaid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListProductEx_args');
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::BYTE, 1);
      $xfer += $output->writeByte($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::BYTE, 2);
      $xfer += $output->writeByte($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleOff !== null) {
      $xfer += $output->writeFieldBegin('saleOff', TType::BYTE, 3);
      $xfer += $output->writeByte($this->saleOff);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isHot !== null) {
      $xfer += $output->writeFieldBegin('isHot', TType::BYTE, 4);
      $xfer += $output->writeByte($this->isHot);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isPaid !== null) {
      $xfer += $output->writeFieldBegin('isPaid', TType::BYTE, 5);
      $xfer += $output->writeByte($this->isPaid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 6);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 7);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 8);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListProductEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListProductResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListProductEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListProductResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListProductEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListTopicTheme_args {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListTopicTheme_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListTopicTheme_args');
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 1);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 2);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListTopicTheme_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListTopicThemeResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListTopicTheme_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListTopicThemeResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListTopicTheme_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductItem_args {
  static $_TSPEC;

  public $itemID = null;
  public $params = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addProductItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size168 = 0;
            $_ktype169 = 0;
            $_vtype170 = 0;
            $xfer += $input->readMapBegin($_ktype169, $_vtype170, $_size168);
            for ($_i172 = 0; $_i172 < $_size168; ++$_i172)
            {
              $key173 = '';
              $val174 = '';
              $xfer += $input->readString($key173);
              $xfer += $input->readString($val174);
              $this->params[$key173] = $val174;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addProductItem_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter175 => $viter176)
          {
            $xfer += $output->writeString($kiter175);
            $xfer += $output->writeString($viter176);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductItem_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addProductItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addProductItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProductItem_args {
  static $_TSPEC;

  public $itemID = null;
  public $params = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updateProductItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size177 = 0;
            $_ktype178 = 0;
            $_vtype179 = 0;
            $xfer += $input->readMapBegin($_ktype178, $_vtype179, $_size177);
            for ($_i181 = 0; $_i181 < $_size177; ++$_i181)
            {
              $key182 = '';
              $val183 = '';
              $xfer += $input->readString($key182);
              $xfer += $input->readString($val183);
              $this->params[$key182] = $val183;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updateProductItem_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter184 => $viter185)
          {
            $xfer += $output->writeString($kiter184);
            $xfer += $output->writeString($viter185);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_updateProductItem_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_updateProductItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_updateProductItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductItem_args {
  static $_TSPEC;

  public $itemID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemID'])) {
        $this->itemID = $vals['itemID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeProductItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->itemID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeProductItem_args');
    if ($this->itemID !== null) {
      $xfer += $output->writeFieldBegin('itemID', TType::STRING, 1);
      $xfer += $output->writeString($this->itemID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductItem_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeProductItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeProductItem_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductForUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $flag = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'flag',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addProductForUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addProductForUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::BOOL, 3);
      $xfer += $output->writeBool($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_addProductForUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_addProductForUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_addProductForUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductOfUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $packageID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'packageID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['packageID'])) {
        $this->packageID = $vals['packageID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeProductOfUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->packageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeProductOfUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->packageID !== null) {
      $xfer += $output->writeFieldBegin('packageID', TType::I32, 2);
      $xfer += $output->writeI32($this->packageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_removeProductOfUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_removeProductOfUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_removeProductOfUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListUserProductInfo_args {
  static $_TSPEC;

  public $accountID = null;
  public $productType = null;
  public $offset = null;
  public $limit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'productType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['productType'])) {
        $this->productType = $vals['productType'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListUserProductInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListUserProductInfo_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productType !== null) {
      $xfer += $output->writeFieldBegin('productType', TType::I32, 2);
      $xfer += $output->writeI32($this->productType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 3);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 4);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getListUserProductInfo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_ListUserProductResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getListUserProductInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_ListUserProductResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getListUserProductInfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUserProductDetail_args {
  static $_TSPEC;

  public $accountID = null;
  public $pkgID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pkgID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['pkgID'])) {
        $this->pkgID = $vals['pkgID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getUserProductDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pkgID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getUserProductDetail_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pkgID !== null) {
      $xfer += $output->writeFieldBegin('pkgID', TType::I32, 2);
      $xfer += $output->writeI32($this->pkgID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatiteminfo_MBChatItemInfoService_getUserProductDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatiteminfo_UserProductDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatItemInfoService_getUserProductDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatiteminfo_UserProductDetailResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatItemInfoService_getUserProductDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
