<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Chatcoin/mobion_chatcoin_types.php';

interface gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoServiceIf {
  public function getCoinOfUser($accountID, $accessCode);
  public function addCoin($accountID, $accBeneficiaryID, $amountCoin, $accessCode);
  public function subCoin($accountID, $coin, $accessCode);
  public function topUp($accountID, $amountCoin, $accessCode);
  public function tranfer($accountID, $accBeneficiaryID, $amountCoin, $accessCode);
  public function purchase($accountID, $accBeneficiaryID, $productID, $isLimit, $accessCode);
  public function getTransOfUser($accountID, $offset, $limit, $transType, $accessCode);
  public function getCoinOfListUser($listAccountID, $accessCode);
  public function totalTransOfUser($accountID, $accessCode);
  public function countFbCsv($userID, $accessCode);
  public function getFbData($userID, $flag, $accessCode);
  public function getFbCsv($userID, $friendFbID, $accessCode);
  public function removeFbCsv($userID, $friendFbID, $accessCode);
  public function initFBChatHistory($fbToken, $userID, $accessCode);
  public function addMessage($userID, $userFbID, $friendFbID, $message, $accessCode);
  public function getFbFriendList($userID, $accessCode);
  public function setFlagFbCsv($userID, $friendFbID, $flag, $accessCode);
}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoServiceClient implements gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getCoinOfUser($accountID, $accessCode)
  {
    $this->send_getCoinOfUser($accountID, $accessCode);
    return $this->recv_getCoinOfUser();
  }

  public function send_getCoinOfUser($accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfUser_args();
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCoinOfUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCoinOfUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCoinOfUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getCoinOfUser failed: unknown result");
  }

  public function addCoin($accountID, $accBeneficiaryID, $amountCoin, $accessCode)
  {
    $this->send_addCoin($accountID, $accBeneficiaryID, $amountCoin, $accessCode);
    return $this->recv_addCoin();
  }

  public function send_addCoin($accountID, $accBeneficiaryID, $amountCoin, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addCoin_args();
    $args->accountID = $accountID;
    $args->accBeneficiaryID = $accBeneficiaryID;
    $args->amountCoin = $amountCoin;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addCoin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addCoin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addCoin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addCoin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addCoin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addCoin failed: unknown result");
  }

  public function subCoin($accountID, $coin, $accessCode)
  {
    $this->send_subCoin($accountID, $coin, $accessCode);
    return $this->recv_subCoin();
  }

  public function send_subCoin($accountID, $coin, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_subCoin_args();
    $args->accountID = $accountID;
    $args->coin = $coin;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'subCoin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('subCoin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_subCoin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_subCoin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_subCoin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("subCoin failed: unknown result");
  }

  public function topUp($accountID, $amountCoin, $accessCode)
  {
    $this->send_topUp($accountID, $amountCoin, $accessCode);
    return $this->recv_topUp();
  }

  public function send_topUp($accountID, $amountCoin, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_topUp_args();
    $args->accountID = $accountID;
    $args->amountCoin = $amountCoin;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'topUp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('topUp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_topUp()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_topUp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_topUp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("topUp failed: unknown result");
  }

  public function tranfer($accountID, $accBeneficiaryID, $amountCoin, $accessCode)
  {
    $this->send_tranfer($accountID, $accBeneficiaryID, $amountCoin, $accessCode);
    return $this->recv_tranfer();
  }

  public function send_tranfer($accountID, $accBeneficiaryID, $amountCoin, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_tranfer_args();
    $args->accountID = $accountID;
    $args->accBeneficiaryID = $accBeneficiaryID;
    $args->amountCoin = $amountCoin;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tranfer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tranfer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tranfer()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_tranfer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_tranfer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("tranfer failed: unknown result");
  }

  public function purchase($accountID, $accBeneficiaryID, $productID, $isLimit, $accessCode)
  {
    $this->send_purchase($accountID, $accBeneficiaryID, $productID, $isLimit, $accessCode);
    return $this->recv_purchase();
  }

  public function send_purchase($accountID, $accBeneficiaryID, $productID, $isLimit, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_purchase_args();
    $args->accountID = $accountID;
    $args->accBeneficiaryID = $accBeneficiaryID;
    $args->productID = $productID;
    $args->isLimit = $isLimit;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'purchase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('purchase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_purchase()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_purchase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_purchase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("purchase failed: unknown result");
  }

  public function getTransOfUser($accountID, $offset, $limit, $transType, $accessCode)
  {
    $this->send_getTransOfUser($accountID, $offset, $limit, $transType, $accessCode);
    return $this->recv_getTransOfUser();
  }

  public function send_getTransOfUser($accountID, $offset, $limit, $transType, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getTransOfUser_args();
    $args->accountID = $accountID;
    $args->offset = $offset;
    $args->limit = $limit;
    $args->transType = $transType;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTransOfUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTransOfUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTransOfUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getTransOfUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getTransOfUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTransOfUser failed: unknown result");
  }

  public function getCoinOfListUser($listAccountID, $accessCode)
  {
    $this->send_getCoinOfListUser($listAccountID, $accessCode);
    return $this->recv_getCoinOfListUser();
  }

  public function send_getCoinOfListUser($listAccountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfListUser_args();
    $args->listAccountID = $listAccountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCoinOfListUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCoinOfListUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCoinOfListUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfListUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfListUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getCoinOfListUser failed: unknown result");
  }

  public function totalTransOfUser($accountID, $accessCode)
  {
    $this->send_totalTransOfUser($accountID, $accessCode);
    return $this->recv_totalTransOfUser();
  }

  public function send_totalTransOfUser($accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_totalTransOfUser_args();
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'totalTransOfUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('totalTransOfUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_totalTransOfUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_totalTransOfUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_totalTransOfUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("totalTransOfUser failed: unknown result");
  }

  public function countFbCsv($userID, $accessCode)
  {
    $this->send_countFbCsv($userID, $accessCode);
    return $this->recv_countFbCsv();
  }

  public function send_countFbCsv($userID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_countFbCsv_args();
    $args->userID = $userID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'countFbCsv', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('countFbCsv', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_countFbCsv()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_countFbCsv_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_countFbCsv_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("countFbCsv failed: unknown result");
  }

  public function getFbData($userID, $flag, $accessCode)
  {
    $this->send_getFbData($userID, $flag, $accessCode);
    return $this->recv_getFbData();
  }

  public function send_getFbData($userID, $flag, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbData_args();
    $args->userID = $userID;
    $args->flag = $flag;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFbData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFbData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFbData()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getFbData failed: unknown result");
  }

  public function getFbCsv($userID, $friendFbID, $accessCode)
  {
    $this->send_getFbCsv($userID, $friendFbID, $accessCode);
    return $this->recv_getFbCsv();
  }

  public function send_getFbCsv($userID, $friendFbID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbCsv_args();
    $args->userID = $userID;
    $args->friendFbID = $friendFbID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFbCsv', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFbCsv', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFbCsv()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbCsv_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbCsv_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getFbCsv failed: unknown result");
  }

  public function removeFbCsv($userID, $friendFbID, $accessCode)
  {
    $this->send_removeFbCsv($userID, $friendFbID, $accessCode);
    return $this->recv_removeFbCsv();
  }

  public function send_removeFbCsv($userID, $friendFbID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_removeFbCsv_args();
    $args->userID = $userID;
    $args->friendFbID = $friendFbID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeFbCsv', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeFbCsv', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_removeFbCsv()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_removeFbCsv_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_removeFbCsv_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("removeFbCsv failed: unknown result");
  }

  public function initFBChatHistory($fbToken, $userID, $accessCode)
  {
    $this->send_initFBChatHistory($fbToken, $userID, $accessCode);
    return $this->recv_initFBChatHistory();
  }

  public function send_initFBChatHistory($fbToken, $userID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_initFBChatHistory_args();
    $args->fbToken = $fbToken;
    $args->userID = $userID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'initFBChatHistory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('initFBChatHistory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_initFBChatHistory()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_initFBChatHistory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_initFBChatHistory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("initFBChatHistory failed: unknown result");
  }

  public function addMessage($userID, $userFbID, $friendFbID, $message, $accessCode)
  {
    $this->send_addMessage($userID, $userFbID, $friendFbID, $message, $accessCode);
    return $this->recv_addMessage();
  }

  public function send_addMessage($userID, $userFbID, $friendFbID, $message, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addMessage_args();
    $args->userID = $userID;
    $args->userFbID = $userFbID;
    $args->friendFbID = $friendFbID;
    $args->message = $message;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addMessage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addMessage failed: unknown result");
  }

  public function getFbFriendList($userID, $accessCode)
  {
    $this->send_getFbFriendList($userID, $accessCode);
    return $this->recv_getFbFriendList();
  }

  public function send_getFbFriendList($userID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbFriendList_args();
    $args->userID = $userID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFbFriendList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFbFriendList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFbFriendList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbFriendList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbFriendList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getFbFriendList failed: unknown result");
  }

  public function setFlagFbCsv($userID, $friendFbID, $flag, $accessCode)
  {
    $this->send_setFlagFbCsv($userID, $friendFbID, $flag, $accessCode);
    return $this->recv_setFlagFbCsv();
  }

  public function send_setFlagFbCsv($userID, $friendFbID, $flag, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_setFlagFbCsv_args();
    $args->userID = $userID;
    $args->friendFbID = $friendFbID;
    $args->flag = $flag;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFlagFbCsv', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFlagFbCsv', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setFlagFbCsv()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_setFlagFbCsv_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_setFlagFbCsv_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setFlagFbCsv failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getCoinOfUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getCoinOfUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getCoinOfUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getCoinOfUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addCoin_args {
  static $_TSPEC;

  public $accountID = null;
  public $accBeneficiaryID = null;
  public $amountCoin = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accBeneficiaryID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'amountCoin',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accBeneficiaryID'])) {
        $this->accBeneficiaryID = $vals['accBeneficiaryID'];
      }
      if (isset($vals['amountCoin'])) {
        $this->amountCoin = $vals['amountCoin'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_addCoin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accBeneficiaryID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_addCoin_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accBeneficiaryID !== null) {
      $xfer += $output->writeFieldBegin('accBeneficiaryID', TType::I64, 2);
      $xfer += $output->writeI64($this->accBeneficiaryID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountCoin !== null) {
      $xfer += $output->writeFieldBegin('amountCoin', TType::I64, 3);
      $xfer += $output->writeI64($this->amountCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addCoin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_addCoin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_addCoin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_subCoin_args {
  static $_TSPEC;

  public $accountID = null;
  public $coin = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'coin',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['coin'])) {
        $this->coin = $vals['coin'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_subCoin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_subCoin_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coin !== null) {
      $xfer += $output->writeFieldBegin('coin', TType::I64, 2);
      $xfer += $output->writeI64($this->coin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_subCoin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_subCoin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_subCoin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_topUp_args {
  static $_TSPEC;

  public $accountID = null;
  public $amountCoin = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'amountCoin',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['amountCoin'])) {
        $this->amountCoin = $vals['amountCoin'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_topUp_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_topUp_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountCoin !== null) {
      $xfer += $output->writeFieldBegin('amountCoin', TType::I64, 2);
      $xfer += $output->writeI64($this->amountCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_topUp_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_topUp_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_topUp_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_tranfer_args {
  static $_TSPEC;

  public $accountID = null;
  public $accBeneficiaryID = null;
  public $amountCoin = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accBeneficiaryID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'amountCoin',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accBeneficiaryID'])) {
        $this->accBeneficiaryID = $vals['accBeneficiaryID'];
      }
      if (isset($vals['amountCoin'])) {
        $this->amountCoin = $vals['amountCoin'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_tranfer_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accBeneficiaryID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_tranfer_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accBeneficiaryID !== null) {
      $xfer += $output->writeFieldBegin('accBeneficiaryID', TType::I64, 2);
      $xfer += $output->writeI64($this->accBeneficiaryID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountCoin !== null) {
      $xfer += $output->writeFieldBegin('amountCoin', TType::I64, 3);
      $xfer += $output->writeI64($this->amountCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_tranfer_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_tranfer_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_tranfer_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_purchase_args {
  static $_TSPEC;

  public $accountID = null;
  public $accBeneficiaryID = null;
  public $productID = null;
  public $isLimit = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accBeneficiaryID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'productID',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'isLimit',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accBeneficiaryID'])) {
        $this->accBeneficiaryID = $vals['accBeneficiaryID'];
      }
      if (isset($vals['productID'])) {
        $this->productID = $vals['productID'];
      }
      if (isset($vals['isLimit'])) {
        $this->isLimit = $vals['isLimit'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_purchase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accBeneficiaryID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->productID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_purchase_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accBeneficiaryID !== null) {
      $xfer += $output->writeFieldBegin('accBeneficiaryID', TType::I64, 2);
      $xfer += $output->writeI64($this->accBeneficiaryID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productID !== null) {
      $xfer += $output->writeFieldBegin('productID', TType::I64, 3);
      $xfer += $output->writeI64($this->productID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLimit !== null) {
      $xfer += $output->writeFieldBegin('isLimit', TType::BOOL, 4);
      $xfer += $output->writeBool($this->isLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_purchase_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_purchase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_purchase_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getTransOfUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $offset = null;
  public $limit = null;
  public $transType = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'transType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
      if (isset($vals['transType'])) {
        $this->transType = $vals['transType'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getTransOfUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->transType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getTransOfUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I32, 2);
      $xfer += $output->writeI32($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::I32, 3);
      $xfer += $output->writeI32($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transType !== null) {
      $xfer += $output->writeFieldBegin('transType', TType::I32, 4);
      $xfer += $output->writeI32($this->transType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getTransOfUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBTransHistoryResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getTransOfUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBTransHistoryResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getTransOfUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfListUser_args {
  static $_TSPEC;

  public $listAccountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'listAccountID',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['listAccountID'])) {
        $this->listAccountID = $vals['listAccountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getCoinOfListUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->listAccountID = array();
            $_size62 = 0;
            $_etype65 = 0;
            $xfer += $input->readListBegin($_etype65, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $elem67 = null;
              $xfer += $input->readI64($elem67);
              $this->listAccountID []= $elem67;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getCoinOfListUser_args');
    if ($this->listAccountID !== null) {
      if (!is_array($this->listAccountID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listAccountID', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->listAccountID));
        {
          foreach ($this->listAccountID as $iter68)
          {
            $xfer += $output->writeI64($iter68);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getCoinOfListUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoListResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getCoinOfListUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoListResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getCoinOfListUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_totalTransOfUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_totalTransOfUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_totalTransOfUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_totalTransOfUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBTotalTransOfUserResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_totalTransOfUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBTotalTransOfUserResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_totalTransOfUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_countFbCsv_args {
  static $_TSPEC;

  public $userID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_countFbCsv_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_countFbCsv_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_countFbCsv_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBFBCsvCountResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_countFbCsv_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBFBCsvCountResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_countFbCsv_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbData_args {
  static $_TSPEC;

  public $userID = null;
  public $flag = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'flag',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getFbData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getFbData_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::BOOL, 2);
      $xfer += $output->writeBool($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbData_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBFBDataResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getFbData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBFBDataResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getFbData_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbCsv_args {
  static $_TSPEC;

  public $userID = null;
  public $friendFbID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'friendFbID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['friendFbID'])) {
        $this->friendFbID = $vals['friendFbID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getFbCsv_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getFbCsv_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendFbID !== null) {
      $xfer += $output->writeFieldBegin('friendFbID', TType::STRING, 2);
      $xfer += $output->writeString($this->friendFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbCsv_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBFBCsvResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getFbCsv_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBFBCsvResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getFbCsv_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_removeFbCsv_args {
  static $_TSPEC;

  public $userID = null;
  public $friendFbID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'friendFbID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['friendFbID'])) {
        $this->friendFbID = $vals['friendFbID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_removeFbCsv_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_removeFbCsv_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendFbID !== null) {
      $xfer += $output->writeFieldBegin('friendFbID', TType::STRING, 2);
      $xfer += $output->writeString($this->friendFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_removeFbCsv_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_removeFbCsv_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_removeFbCsv_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_initFBChatHistory_args {
  static $_TSPEC;

  public $fbToken = null;
  public $userID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fbToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fbToken'])) {
        $this->fbToken = $vals['fbToken'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_initFBChatHistory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fbToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_initFBChatHistory_args');
    if ($this->fbToken !== null) {
      $xfer += $output->writeFieldBegin('fbToken', TType::STRING, 1);
      $xfer += $output->writeString($this->fbToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 2);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_initFBChatHistory_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_initFBChatHistory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_initFBChatHistory_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addMessage_args {
  static $_TSPEC;

  public $userID = null;
  public $userFbID = null;
  public $friendFbID = null;
  public $message = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'userFbID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendFbID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['userFbID'])) {
        $this->userFbID = $vals['userFbID'];
      }
      if (isset($vals['friendFbID'])) {
        $this->friendFbID = $vals['friendFbID'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_addMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_addMessage_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userFbID !== null) {
      $xfer += $output->writeFieldBegin('userFbID', TType::STRING, 2);
      $xfer += $output->writeString($this->userFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendFbID !== null) {
      $xfer += $output->writeFieldBegin('friendFbID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_addMessage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_addMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_addMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbFriendList_args {
  static $_TSPEC;

  public $userID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getFbFriendList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getFbFriendList_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_getFbFriendList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_MBFBFriendResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_getFbFriendList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionchatcoin_MBFBFriendResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_getFbFriendList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_setFlagFbCsv_args {
  static $_TSPEC;

  public $userID = null;
  public $friendFbID = null;
  public $flag = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'friendFbID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'flag',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['friendFbID'])) {
        $this->friendFbID = $vals['friendFbID'];
      }
      if (isset($vals['flag'])) {
        $this->flag = $vals['flag'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_setFlagFbCsv_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_setFlagFbCsv_args');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendFbID !== null) {
      $xfer += $output->writeFieldBegin('friendFbID', TType::STRING, 2);
      $xfer += $output->writeString($this->friendFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flag !== null) {
      $xfer += $output->writeFieldBegin('flag', TType::BOOL, 3);
      $xfer += $output->writeBool($this->flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoService_setFlagFbCsv_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoService_setFlagFbCsv_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoService_setFlagFbCsv_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
