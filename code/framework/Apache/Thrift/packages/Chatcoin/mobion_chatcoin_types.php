<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Chatcoin/mobion_definition_types.php';

$GLOBALS['gnt_mobion_storage_mobionchatcoin_E_TransactionType'] = array(
  'UNKNOWN' => 0,
  'TOPUP' => 1,
  'TRANSFER' => 2,
  'PURCHASE' => 3,
  'GIFT' => 4,
  'BONUS' => 5,
);

final class TransactionType {
  const UNKNOWN = 0;
  const TOPUP = 1;
  const TRANSFER = 2;
  const PURCHASE = 3;
  const GIFT = 4;
  const BONUS = 5;
  static public $__names = array(
    0 => 'UNKNOWN',
    1 => 'TOPUP',
    2 => 'TRANSFER',
    3 => 'PURCHASE',
    4 => 'GIFT',
    5 => 'BONUS',
  );
}

class gnt_mobion_storage_mobionchatcoin_ChatCoinInfo {
  static $_TSPEC;

  public $coinValue = 0;
  public $createdTime = null;
  public $updatedTime = null;
  public $activeFlag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coinValue',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'updatedTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'activeFlag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['coinValue'])) {
        $this->coinValue = $vals['coinValue'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['updatedTime'])) {
        $this->updatedTime = $vals['updatedTime'];
      }
      if (isset($vals['activeFlag'])) {
        $this->activeFlag = $vals['activeFlag'];
      }
    }
  }

  public function getName() {
    return 'ChatCoinInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->coinValue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updatedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->activeFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChatCoinInfo');
    if ($this->coinValue !== null) {
      $xfer += $output->writeFieldBegin('coinValue', TType::I64, 1);
      $xfer += $output->writeI64($this->coinValue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 2);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedTime !== null) {
      $xfer += $output->writeFieldBegin('updatedTime', TType::I64, 3);
      $xfer += $output->writeI64($this->updatedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeFlag !== null) {
      $xfer += $output->writeFieldBegin('activeFlag', TType::BOOL, 4);
      $xfer += $output->writeBool($this->activeFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_ExtraInfo {
  static $_TSPEC;

  public $description = null;
  public $productID = null;
  public $productName = null;
  public $imageUrl = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'productID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'productName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['productID'])) {
        $this->productID = $vals['productID'];
      }
      if (isset($vals['productName'])) {
        $this->productName = $vals['productName'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
    }
  }

  public function getName() {
    return 'ExtraInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->productID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->productName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExtraInfo');
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 1);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productID !== null) {
      $xfer += $output->writeFieldBegin('productID', TType::I64, 2);
      $xfer += $output->writeI64($this->productID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productName !== null) {
      $xfer += $output->writeFieldBegin('productName', TType::STRING, 3);
      $xfer += $output->writeString($this->productName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_TransactionInfo {
  static $_TSPEC;

  public $transID = null;
  public $accOwnerID = null;
  public $accBeneficiaryID = null;
  public $transType = null;
  public $amountCoin = null;
  public $extraInfo = null;
  public $createdTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'transID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accOwnerID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'accBeneficiaryID',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'transType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'amountCoin',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'extraInfo',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_ExtraInfo',
          ),
        7 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['transID'])) {
        $this->transID = $vals['transID'];
      }
      if (isset($vals['accOwnerID'])) {
        $this->accOwnerID = $vals['accOwnerID'];
      }
      if (isset($vals['accBeneficiaryID'])) {
        $this->accBeneficiaryID = $vals['accBeneficiaryID'];
      }
      if (isset($vals['transType'])) {
        $this->transType = $vals['transType'];
      }
      if (isset($vals['amountCoin'])) {
        $this->amountCoin = $vals['amountCoin'];
      }
      if (isset($vals['extraInfo'])) {
        $this->extraInfo = $vals['extraInfo'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
    }
  }

  public function getName() {
    return 'TransactionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->transID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accOwnerID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accBeneficiaryID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->transType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->amountCoin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->extraInfo = new gnt_mobion_storage_mobionchatcoin_ExtraInfo();
            $xfer += $this->extraInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TransactionInfo');
    if ($this->transID !== null) {
      $xfer += $output->writeFieldBegin('transID', TType::I64, 1);
      $xfer += $output->writeI64($this->transID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accOwnerID !== null) {
      $xfer += $output->writeFieldBegin('accOwnerID', TType::I64, 2);
      $xfer += $output->writeI64($this->accOwnerID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accBeneficiaryID !== null) {
      $xfer += $output->writeFieldBegin('accBeneficiaryID', TType::I64, 3);
      $xfer += $output->writeI64($this->accBeneficiaryID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transType !== null) {
      $xfer += $output->writeFieldBegin('transType', TType::I32, 4);
      $xfer += $output->writeI32($this->transType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amountCoin !== null) {
      $xfer += $output->writeFieldBegin('amountCoin', TType::I64, 5);
      $xfer += $output->writeI64($this->amountCoin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraInfo !== null) {
      if (!is_object($this->extraInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extraInfo', TType::STRUCT, 6);
      $xfer += $this->extraInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 7);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_FBMessage {
  static $_TSPEC;

  public $fromID = null;
  public $message = null;
  public $createdTime = null;
  public $senderID = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'createdTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'senderID',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromID'])) {
        $this->fromID = $vals['fromID'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['createdTime'])) {
        $this->createdTime = $vals['createdTime'];
      }
      if (isset($vals['senderID'])) {
        $this->senderID = $vals['senderID'];
      }
    }
  }

  public function getName() {
    return 'FBMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fromID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->senderID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FBMessage');
    if ($this->fromID !== null) {
      $xfer += $output->writeFieldBegin('fromID', TType::STRING, 1);
      $xfer += $output->writeString($this->fromID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdTime !== null) {
      $xfer += $output->writeFieldBegin('createdTime', TType::I64, 3);
      $xfer += $output->writeI64($this->createdTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderID !== null) {
      $xfer += $output->writeFieldBegin('senderID', TType::I64, 4);
      $xfer += $output->writeI64($this->senderID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_FBFriendInfo {
  static $_TSPEC;

  public $fbID = null;
  public $fbName = null;
  public $fbAvatarUrl = null;
  public $userID = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fbID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fbName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fbAvatarUrl',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fbID'])) {
        $this->fbID = $vals['fbID'];
      }
      if (isset($vals['fbName'])) {
        $this->fbName = $vals['fbName'];
      }
      if (isset($vals['fbAvatarUrl'])) {
        $this->fbAvatarUrl = $vals['fbAvatarUrl'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
    }
  }

  public function getName() {
    return 'FBFriendInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fbName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fbAvatarUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FBFriendInfo');
    if ($this->fbID !== null) {
      $xfer += $output->writeFieldBegin('fbID', TType::STRING, 1);
      $xfer += $output->writeString($this->fbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fbName !== null) {
      $xfer += $output->writeFieldBegin('fbName', TType::STRING, 2);
      $xfer += $output->writeString($this->fbName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fbAvatarUrl !== null) {
      $xfer += $output->writeFieldBegin('fbAvatarUrl', TType::STRING, 3);
      $xfer += $output->writeString($this->fbAvatarUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 4);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_FBFriendData {
  static $_TSPEC;

  public $info = null;
  public $fbChatHistory = null;
  public $activeFlag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'info',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_FBFriendInfo',
          ),
        2 => array(
          'var' => 'fbChatHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_FBMessage',
            ),
          ),
        3 => array(
          'var' => 'activeFlag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
      if (isset($vals['fbChatHistory'])) {
        $this->fbChatHistory = $vals['fbChatHistory'];
      }
      if (isset($vals['activeFlag'])) {
        $this->activeFlag = $vals['activeFlag'];
      }
    }
  }

  public function getName() {
    return 'FBFriendData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->info = new gnt_mobion_storage_mobionchatcoin_FBFriendInfo();
            $xfer += $this->info->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->fbChatHistory = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new gnt_mobion_storage_mobionchatcoin_FBMessage();
              $xfer += $elem5->read($input);
              $this->fbChatHistory []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->activeFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FBFriendData');
    if ($this->info !== null) {
      if (!is_object($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::STRUCT, 1);
      $xfer += $this->info->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fbChatHistory !== null) {
      if (!is_array($this->fbChatHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fbChatHistory', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->fbChatHistory));
        {
          foreach ($this->fbChatHistory as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeFlag !== null) {
      $xfer += $output->writeFieldBegin('activeFlag', TType::BOOL, 3);
      $xfer += $output->writeBool($this->activeFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoResult {
  static $_TSPEC;

  public $status = null;
  public $accountID = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_ChatCoinInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->value = new gnt_mobion_storage_mobionchatcoin_ChatCoinInfo();
            $xfer += $this->value->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 2);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      if (!is_object($this->value)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('value', TType::STRUCT, 3);
      $xfer += $this->value->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_ListTransactionInfo {
  static $_TSPEC;

  public $listTransactionInfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'listTransactionInfo',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_TransactionInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['listTransactionInfo'])) {
        $this->listTransactionInfo = $vals['listTransactionInfo'];
      }
    }
  }

  public function getName() {
    return 'ListTransactionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->listTransactionInfo = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new gnt_mobion_storage_mobionchatcoin_TransactionInfo();
              $xfer += $elem12->read($input);
              $this->listTransactionInfo []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListTransactionInfo');
    if ($this->listTransactionInfo !== null) {
      if (!is_array($this->listTransactionInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('listTransactionInfo', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->listTransactionInfo));
        {
          foreach ($this->listTransactionInfo as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MapFBChatHistory {
  static $_TSPEC;

  public $userFbID = null;
  public $data = null;
  public $friendList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userFbID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_FBFriendData',
            ),
          ),
        3 => array(
          'var' => 'friendList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_FBFriendInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userFbID'])) {
        $this->userFbID = $vals['userFbID'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['friendList'])) {
        $this->friendList = $vals['friendList'];
      }
    }
  }

  public function getName() {
    return 'MapFBChatHistory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->data = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = new gnt_mobion_storage_mobionchatcoin_FBFriendData();
              $xfer += $input->readString($key19);
              $val20 = new gnt_mobion_storage_mobionchatcoin_FBFriendData();
              $xfer += $val20->read($input);
              $this->data[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->friendList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new gnt_mobion_storage_mobionchatcoin_FBFriendInfo();
              $xfer += $elem26->read($input);
              $this->friendList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MapFBChatHistory');
    if ($this->userFbID !== null) {
      $xfer += $output->writeFieldBegin('userFbID', TType::STRING, 1);
      $xfer += $output->writeString($this->userFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $kiter27 => $viter28)
          {
            $xfer += $output->writeString($kiter27);
            $xfer += $viter28->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendList !== null) {
      if (!is_array($this->friendList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('friendList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->friendList));
        {
          foreach ($this->friendList as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBChatCoinInfoListResult {
  static $_TSPEC;

  public $status = null;
  public $mapCoinInfos = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'mapCoinInfos',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_ChatCoinInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['mapCoinInfos'])) {
        $this->mapCoinInfos = $vals['mapCoinInfos'];
      }
    }
  }

  public function getName() {
    return 'MBChatCoinInfoListResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->mapCoinInfos = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = 0;
              $val36 = new gnt_mobion_storage_mobionchatcoin_ChatCoinInfo();
              $xfer += $input->readI64($key35);
              $val36 = new gnt_mobion_storage_mobionchatcoin_ChatCoinInfo();
              $xfer += $val36->read($input);
              $this->mapCoinInfos[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBChatCoinInfoListResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mapCoinInfos !== null) {
      if (!is_array($this->mapCoinInfos)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mapCoinInfos', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->mapCoinInfos));
        {
          foreach ($this->mapCoinInfos as $kiter37 => $viter38)
          {
            $xfer += $output->writeI64($kiter37);
            $xfer += $viter38->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBTransHistoryResult {
  static $_TSPEC;

  public $status = null;
  public $accountID = null;
  public $transHistory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'transHistory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_TransactionInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['transHistory'])) {
        $this->transHistory = $vals['transHistory'];
      }
    }
  }

  public function getName() {
    return 'MBTransHistoryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->transHistory = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $elem44 = new gnt_mobion_storage_mobionchatcoin_TransactionInfo();
              $xfer += $elem44->read($input);
              $this->transHistory []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBTransHistoryResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 2);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->transHistory !== null) {
      if (!is_array($this->transHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('transHistory', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->transHistory));
        {
          foreach ($this->transHistory as $iter45)
          {
            $xfer += $iter45->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBTotalTransOfUserResult {
  static $_TSPEC;

  public $status = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'MBTotalTransOfUserResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBTotalTransOfUserResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I64, 2);
      $xfer += $output->writeI64($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBFBDataResult {
  static $_TSPEC;

  public $status = null;
  public $userFbID = null;
  public $mapFBChatHistory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'userFbID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mapFBChatHistory',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_FBFriendData',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['userFbID'])) {
        $this->userFbID = $vals['userFbID'];
      }
      if (isset($vals['mapFBChatHistory'])) {
        $this->mapFBChatHistory = $vals['mapFBChatHistory'];
      }
    }
  }

  public function getName() {
    return 'MBFBDataResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->mapFBChatHistory = array();
            $_size46 = 0;
            $_ktype47 = 0;
            $_vtype48 = 0;
            $xfer += $input->readMapBegin($_ktype47, $_vtype48, $_size46);
            for ($_i50 = 0; $_i50 < $_size46; ++$_i50)
            {
              $key51 = '';
              $val52 = new gnt_mobion_storage_mobionchatcoin_FBFriendData();
              $xfer += $input->readString($key51);
              $val52 = new gnt_mobion_storage_mobionchatcoin_FBFriendData();
              $xfer += $val52->read($input);
              $this->mapFBChatHistory[$key51] = $val52;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBFBDataResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userFbID !== null) {
      $xfer += $output->writeFieldBegin('userFbID', TType::STRING, 2);
      $xfer += $output->writeString($this->userFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mapFBChatHistory !== null) {
      if (!is_array($this->mapFBChatHistory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mapFBChatHistory', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->mapFBChatHistory));
        {
          foreach ($this->mapFBChatHistory as $kiter53 => $viter54)
          {
            $xfer += $output->writeString($kiter53);
            $xfer += $viter54->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBFBCsvResult {
  static $_TSPEC;

  public $status = null;
  public $userFbID = null;
  public $csvDetail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'userFbID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'csvDetail',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionchatcoin_FBFriendData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['userFbID'])) {
        $this->userFbID = $vals['userFbID'];
      }
      if (isset($vals['csvDetail'])) {
        $this->csvDetail = $vals['csvDetail'];
      }
    }
  }

  public function getName() {
    return 'MBFBCsvResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userFbID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->csvDetail = new gnt_mobion_storage_mobionchatcoin_FBFriendData();
            $xfer += $this->csvDetail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBFBCsvResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userFbID !== null) {
      $xfer += $output->writeFieldBegin('userFbID', TType::STRING, 2);
      $xfer += $output->writeString($this->userFbID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->csvDetail !== null) {
      if (!is_object($this->csvDetail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('csvDetail', TType::STRUCT, 3);
      $xfer += $this->csvDetail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBFBFriendResult {
  static $_TSPEC;

  public $status = null;
  public $userID = null;
  public $friendList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'friendList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionchatcoin_FBFriendInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['friendList'])) {
        $this->friendList = $vals['friendList'];
      }
    }
  }

  public function getName() {
    return 'MBFBFriendResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->friendList = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $elem60 = new gnt_mobion_storage_mobionchatcoin_FBFriendInfo();
              $xfer += $elem60->read($input);
              $this->friendList []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBFBFriendResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 2);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendList !== null) {
      if (!is_array($this->friendList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('friendList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->friendList));
        {
          foreach ($this->friendList as $iter61)
          {
            $xfer += $iter61->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionchatcoin_MBFBCsvCountResult {
  static $_TSPEC;

  public $status = null;
  public $totalCsv = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mbdefinition_GeneralResponse',
          ),
        2 => array(
          'var' => 'totalCsv',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['totalCsv'])) {
        $this->totalCsv = $vals['totalCsv'];
      }
    }
  }

  public function getName() {
    return 'MBFBCsvCountResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mbdefinition_GeneralResponse();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalCsv);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBFBCsvCountResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalCsv !== null) {
      $xfer += $output->writeFieldBegin('totalCsv', TType::I64, 2);
      $xfer += $output->writeI64($this->totalCsv);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
