<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class gnt_server_FeedDetail {
  static $_TSPEC;

  public $ArrDetail = null;
  public $arrLastComment = null;
  public $ArrStaticstic = null;
  public $ArrLiked = null;
  public $arrListComment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ArrDetail',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'arrLastComment',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        3 => array(
          'var' => 'ArrStaticstic',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'ArrLiked',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'arrListComment',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::MAP,
            'elem' => array(
              'type' => TType::MAP,
              'ktype' => TType::STRING,
              'vtype' => TType::STRING,
              'key' => array(
                'type' => TType::STRING,
              ),
              'val' => array(
                'type' => TType::STRING,
                ),
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ArrDetail'])) {
        $this->ArrDetail = $vals['ArrDetail'];
      }
      if (isset($vals['arrLastComment'])) {
        $this->arrLastComment = $vals['arrLastComment'];
      }
      if (isset($vals['ArrStaticstic'])) {
        $this->ArrStaticstic = $vals['ArrStaticstic'];
      }
      if (isset($vals['ArrLiked'])) {
        $this->ArrLiked = $vals['ArrLiked'];
      }
      if (isset($vals['arrListComment'])) {
        $this->arrListComment = $vals['arrListComment'];
      }
    }
  }

  public function getName() {
    return 'FeedDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->ArrDetail = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->ArrDetail[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->arrLastComment = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = array();
              $_size13 = 0;
              $_ktype14 = 0;
              $_vtype15 = 0;
              $xfer += $input->readMapBegin($_ktype14, $_vtype15, $_size13);
              for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
              {
                $key18 = '';
                $val19 = '';
                $xfer += $input->readString($key18);
                $xfer += $input->readString($val19);
                $elem12[$key18] = $val19;
              }
              $xfer += $input->readMapEnd();
              $this->arrLastComment []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->ArrStaticstic = array();
            $_size20 = 0;
            $_ktype21 = 0;
            $_vtype22 = 0;
            $xfer += $input->readMapBegin($_ktype21, $_vtype22, $_size20);
            for ($_i24 = 0; $_i24 < $_size20; ++$_i24)
            {
              $key25 = '';
              $val26 = '';
              $xfer += $input->readString($key25);
              $xfer += $input->readString($val26);
              $this->ArrStaticstic[$key25] = $val26;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->ArrLiked = array();
            $_size27 = 0;
            $_ktype28 = 0;
            $_vtype29 = 0;
            $xfer += $input->readMapBegin($_ktype28, $_vtype29, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $key32 = '';
              $val33 = '';
              $xfer += $input->readString($key32);
              $xfer += $input->readString($val33);
              $this->ArrLiked[$key32] = $val33;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->arrListComment = array();
            $_size34 = 0;
            $_ktype35 = 0;
            $_vtype36 = 0;
            $xfer += $input->readMapBegin($_ktype35, $_vtype36, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $key39 = '';
              $val40 = array();
              $xfer += $input->readString($key39);
              $val40 = array();
              $_size41 = 0;
              $_etype44 = 0;
              $xfer += $input->readListBegin($_etype44, $_size41);
              for ($_i45 = 0; $_i45 < $_size41; ++$_i45)
              {
                $elem46 = null;
                $elem46 = array();
                $_size47 = 0;
                $_ktype48 = 0;
                $_vtype49 = 0;
                $xfer += $input->readMapBegin($_ktype48, $_vtype49, $_size47);
                for ($_i51 = 0; $_i51 < $_size47; ++$_i51)
                {
                  $key52 = '';
                  $val53 = '';
                  $xfer += $input->readString($key52);
                  $xfer += $input->readString($val53);
                  $elem46[$key52] = $val53;
                }
                $xfer += $input->readMapEnd();
                $val40 []= $elem46;
              }
              $xfer += $input->readListEnd();
              $this->arrListComment[$key39] = $val40;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedDetail');
    if ($this->ArrDetail !== null) {
      if (!is_array($this->ArrDetail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrDetail', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->ArrDetail));
        {
          foreach ($this->ArrDetail as $kiter54 => $viter55)
          {
            $xfer += $output->writeString($kiter54);
            $xfer += $output->writeString($viter55);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrLastComment !== null) {
      if (!is_array($this->arrLastComment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrLastComment', TType::LST, 2);
      {
        $output->writeListBegin(TType::MAP, count($this->arrLastComment));
        {
          foreach ($this->arrLastComment as $iter56)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter56));
              {
                foreach ($iter56 as $kiter57 => $viter58)
                {
                  $xfer += $output->writeString($kiter57);
                  $xfer += $output->writeString($viter58);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ArrStaticstic !== null) {
      if (!is_array($this->ArrStaticstic)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrStaticstic', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->ArrStaticstic));
        {
          foreach ($this->ArrStaticstic as $kiter59 => $viter60)
          {
            $xfer += $output->writeString($kiter59);
            $xfer += $output->writeString($viter60);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ArrLiked !== null) {
      if (!is_array($this->ArrLiked)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrLiked', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->ArrLiked));
        {
          foreach ($this->ArrLiked as $kiter61 => $viter62)
          {
            $xfer += $output->writeString($kiter61);
            $xfer += $output->writeString($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrListComment !== null) {
      if (!is_array($this->arrListComment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrListComment', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::LST, count($this->arrListComment));
        {
          foreach ($this->arrListComment as $kiter63 => $viter64)
          {
            $xfer += $output->writeString($kiter63);
            {
              $output->writeListBegin(TType::MAP, count($viter64));
              {
                foreach ($viter64 as $iter65)
                {
                  {
                    $output->writeMapBegin(TType::STRING, TType::STRING, count($iter65));
                    {
                      foreach ($iter65 as $kiter66 => $viter67)
                      {
                        $xfer += $output->writeString($kiter66);
                        $xfer += $output->writeString($viter67);
                      }
                    }
                    $output->writeMapEnd();
                  }
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_scopeFeed {
  static $_TSPEC;

  public $arrFeed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrFeed',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrFeed'])) {
        $this->arrFeed = $vals['arrFeed'];
      }
    }
  }

  public function getName() {
    return 'scopeFeed';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->arrFeed = array();
            $_size68 = 0;
            $_ktype69 = 0;
            $_vtype70 = 0;
            $xfer += $input->readMapBegin($_ktype69, $_vtype70, $_size68);
            for ($_i72 = 0; $_i72 < $_size68; ++$_i72)
            {
              $key73 = '';
              $val74 = array();
              $xfer += $input->readString($key73);
              $val74 = array();
              $_size75 = 0;
              $_ktype76 = 0;
              $_vtype77 = 0;
              $xfer += $input->readMapBegin($_ktype76, $_vtype77, $_size75);
              for ($_i79 = 0; $_i79 < $_size75; ++$_i79)
              {
                $key80 = '';
                $val81 = '';
                $xfer += $input->readString($key80);
                $xfer += $input->readString($val81);
                $val74[$key80] = $val81;
              }
              $xfer += $input->readMapEnd();
              $this->arrFeed[$key73] = $val74;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('scopeFeed');
    if ($this->arrFeed !== null) {
      if (!is_array($this->arrFeed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrFeed', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->arrFeed));
        {
          foreach ($this->arrFeed as $kiter82 => $viter83)
          {
            $xfer += $output->writeString($kiter82);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter83));
              {
                foreach ($viter83 as $kiter84 => $viter85)
                {
                  $xfer += $output->writeString($kiter84);
                  $xfer += $output->writeString($viter85);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_scopeComment {
  static $_TSPEC;

  public $arrComment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrComment',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrComment'])) {
        $this->arrComment = $vals['arrComment'];
      }
    }
  }

  public function getName() {
    return 'scopeComment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->arrComment = array();
            $_size86 = 0;
            $_ktype87 = 0;
            $_vtype88 = 0;
            $xfer += $input->readMapBegin($_ktype87, $_vtype88, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $key91 = '';
              $val92 = array();
              $xfer += $input->readString($key91);
              $val92 = array();
              $_size93 = 0;
              $_ktype94 = 0;
              $_vtype95 = 0;
              $xfer += $input->readMapBegin($_ktype94, $_vtype95, $_size93);
              for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
              {
                $key98 = '';
                $val99 = '';
                $xfer += $input->readString($key98);
                $xfer += $input->readString($val99);
                $val92[$key98] = $val99;
              }
              $xfer += $input->readMapEnd();
              $this->arrComment[$key91] = $val92;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('scopeComment');
    if ($this->arrComment !== null) {
      if (!is_array($this->arrComment)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrComment', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->arrComment));
        {
          foreach ($this->arrComment as $kiter100 => $viter101)
          {
            $xfer += $output->writeString($kiter100);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter101));
              {
                foreach ($viter101 as $kiter102 => $viter103)
                {
                  $xfer += $output->writeString($kiter102);
                  $xfer += $output->writeString($viter103);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
