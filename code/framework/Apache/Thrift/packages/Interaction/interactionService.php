<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Interaction/interaction_types.php';

interface gnt_server_interactionServiceIf {
  public function setLiked($appType, $uniqueID, $userID, $iUnixTimeStamp);
  public function getTotalLiked($appType, $uniqueID);
  public function getLiked($appType, $uniqueID, $iStart, $iEnd);
  public function setUnLiked($appType, $uniqueID, $userID);
  public function isLiked($appType, $uniqueID, $userID);
  public function setFeed($uniqueIDTo, $uniqueIDFrom, $blobData, $appType);
  public function setFeedForGroup($arrUniqueIDTo, $uniqueIDFrom, $blobData, $appType);
  public function delFeed($uniqueIDTo, $uniqueIDChecked, $feedID, $appType);
  public function delFeedByAdmin($uniqueIDTo, $feedID, $appType);
  public function getFeedWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $appType, $iStart, $iEnd);
  public function getFeedDetailWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $feedID, $appType);
  public function setComment($objectID, $userIDTo, $userIDFrom, $blobData, $appType);
  public function updateComment($feedID, $commentID, $uniqueID, $blobDelData, $appType);
  public function delComment($objectID, $commentID, $uniqueIDChecked, $appType);
  public function delCommentByAdmin($objectID, $commentID, $appType);
  public function getArrTotalComment($arrObjectID, $appType);
  public function getCommentWithLike($objectID, $uniqueIDChecked, $appType, $iStart, $iEnd);
  public function getArrTotalFeed($arrObjectID, $appType);
  public function shutdown();
}

class gnt_server_interactionServiceClient implements gnt_server_interactionServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function setLiked($appType, $uniqueID, $userID, $iUnixTimeStamp)
  {
    $this->send_setLiked($appType, $uniqueID, $userID, $iUnixTimeStamp);
    return $this->recv_setLiked();
  }

  public function send_setLiked($appType, $uniqueID, $userID, $iUnixTimeStamp)
  {
    $args = new gnt_server_interactionService_setLiked_args();
    $args->appType = $appType;
    $args->uniqueID = $uniqueID;
    $args->userID = $userID;
    $args->iUnixTimeStamp = $iUnixTimeStamp;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setLiked', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setLiked', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setLiked()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_setLiked_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_setLiked_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setLiked failed: unknown result");
  }

  public function getTotalLiked($appType, $uniqueID)
  {
    $this->send_getTotalLiked($appType, $uniqueID);
    return $this->recv_getTotalLiked();
  }

  public function send_getTotalLiked($appType, $uniqueID)
  {
    $args = new gnt_server_interactionService_getTotalLiked_args();
    $args->appType = $appType;
    $args->uniqueID = $uniqueID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTotalLiked', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTotalLiked', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTotalLiked()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getTotalLiked_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getTotalLiked_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTotalLiked failed: unknown result");
  }

  public function getLiked($appType, $uniqueID, $iStart, $iEnd)
  {
    $this->send_getLiked($appType, $uniqueID, $iStart, $iEnd);
    return $this->recv_getLiked();
  }

  public function send_getLiked($appType, $uniqueID, $iStart, $iEnd)
  {
    $args = new gnt_server_interactionService_getLiked_args();
    $args->appType = $appType;
    $args->uniqueID = $uniqueID;
    $args->iStart = $iStart;
    $args->iEnd = $iEnd;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLiked', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLiked', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLiked()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getLiked_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getLiked_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLiked failed: unknown result");
  }

  public function setUnLiked($appType, $uniqueID, $userID)
  {
    $this->send_setUnLiked($appType, $uniqueID, $userID);
    return $this->recv_setUnLiked();
  }

  public function send_setUnLiked($appType, $uniqueID, $userID)
  {
    $args = new gnt_server_interactionService_setUnLiked_args();
    $args->appType = $appType;
    $args->uniqueID = $uniqueID;
    $args->userID = $userID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setUnLiked', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setUnLiked', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setUnLiked()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_setUnLiked_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_setUnLiked_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setUnLiked failed: unknown result");
  }

  public function isLiked($appType, $uniqueID, $userID)
  {
    $this->send_isLiked($appType, $uniqueID, $userID);
    return $this->recv_isLiked();
  }

  public function send_isLiked($appType, $uniqueID, $userID)
  {
    $args = new gnt_server_interactionService_isLiked_args();
    $args->appType = $appType;
    $args->uniqueID = $uniqueID;
    $args->userID = $userID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'isLiked', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('isLiked', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_isLiked()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_isLiked_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_isLiked_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("isLiked failed: unknown result");
  }

  public function setFeed($uniqueIDTo, $uniqueIDFrom, $blobData, $appType)
  {
    $this->send_setFeed($uniqueIDTo, $uniqueIDFrom, $blobData, $appType);
    return $this->recv_setFeed();
  }

  public function send_setFeed($uniqueIDTo, $uniqueIDFrom, $blobData, $appType)
  {
    $args = new gnt_server_interactionService_setFeed_args();
    $args->uniqueIDTo = $uniqueIDTo;
    $args->uniqueIDFrom = $uniqueIDFrom;
    $args->blobData = $blobData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setFeed()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_setFeed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_setFeed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setFeed failed: unknown result");
  }

  public function setFeedForGroup($arrUniqueIDTo, $uniqueIDFrom, $blobData, $appType)
  {
    $this->send_setFeedForGroup($arrUniqueIDTo, $uniqueIDFrom, $blobData, $appType);
    return $this->recv_setFeedForGroup();
  }

  public function send_setFeedForGroup($arrUniqueIDTo, $uniqueIDFrom, $blobData, $appType)
  {
    $args = new gnt_server_interactionService_setFeedForGroup_args();
    $args->arrUniqueIDTo = $arrUniqueIDTo;
    $args->uniqueIDFrom = $uniqueIDFrom;
    $args->blobData = $blobData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeedForGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeedForGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setFeedForGroup()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_setFeedForGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_setFeedForGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setFeedForGroup failed: unknown result");
  }

  public function delFeed($uniqueIDTo, $uniqueIDChecked, $feedID, $appType)
  {
    $this->send_delFeed($uniqueIDTo, $uniqueIDChecked, $feedID, $appType);
    return $this->recv_delFeed();
  }

  public function send_delFeed($uniqueIDTo, $uniqueIDChecked, $feedID, $appType)
  {
    $args = new gnt_server_interactionService_delFeed_args();
    $args->uniqueIDTo = $uniqueIDTo;
    $args->uniqueIDChecked = $uniqueIDChecked;
    $args->feedID = $feedID;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delFeed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delFeed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delFeed()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_delFeed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_delFeed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delFeed failed: unknown result");
  }

  public function delFeedByAdmin($uniqueIDTo, $feedID, $appType)
  {
    $this->send_delFeedByAdmin($uniqueIDTo, $feedID, $appType);
    return $this->recv_delFeedByAdmin();
  }

  public function send_delFeedByAdmin($uniqueIDTo, $feedID, $appType)
  {
    $args = new gnt_server_interactionService_delFeedByAdmin_args();
    $args->uniqueIDTo = $uniqueIDTo;
    $args->feedID = $feedID;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delFeedByAdmin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delFeedByAdmin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delFeedByAdmin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_delFeedByAdmin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_delFeedByAdmin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delFeedByAdmin failed: unknown result");
  }

  public function getFeedWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $appType, $iStart, $iEnd)
  {
    $this->send_getFeedWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $appType, $iStart, $iEnd);
    return $this->recv_getFeedWithCommentAndLike();
  }

  public function send_getFeedWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $appType, $iStart, $iEnd)
  {
    $args = new gnt_server_interactionService_getFeedWithCommentAndLike_args();
    $args->uniqueIDTo = $uniqueIDTo;
    $args->uniqueIDChecked = $uniqueIDChecked;
    $args->appType = $appType;
    $args->iStart = $iStart;
    $args->iEnd = $iEnd;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFeedWithCommentAndLike', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFeedWithCommentAndLike', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFeedWithCommentAndLike()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getFeedWithCommentAndLike_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getFeedWithCommentAndLike_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getFeedWithCommentAndLike failed: unknown result");
  }

  public function getFeedDetailWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $feedID, $appType)
  {
    $this->send_getFeedDetailWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $feedID, $appType);
    return $this->recv_getFeedDetailWithCommentAndLike();
  }

  public function send_getFeedDetailWithCommentAndLike($uniqueIDTo, $uniqueIDChecked, $feedID, $appType)
  {
    $args = new gnt_server_interactionService_getFeedDetailWithCommentAndLike_args();
    $args->uniqueIDTo = $uniqueIDTo;
    $args->uniqueIDChecked = $uniqueIDChecked;
    $args->feedID = $feedID;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getFeedDetailWithCommentAndLike', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getFeedDetailWithCommentAndLike', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getFeedDetailWithCommentAndLike()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getFeedDetailWithCommentAndLike_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getFeedDetailWithCommentAndLike_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getFeedDetailWithCommentAndLike failed: unknown result");
  }

  public function setComment($objectID, $userIDTo, $userIDFrom, $blobData, $appType)
  {
    $this->send_setComment($objectID, $userIDTo, $userIDFrom, $blobData, $appType);
    return $this->recv_setComment();
  }

  public function send_setComment($objectID, $userIDTo, $userIDFrom, $blobData, $appType)
  {
    $args = new gnt_server_interactionService_setComment_args();
    $args->objectID = $objectID;
    $args->userIDTo = $userIDTo;
    $args->userIDFrom = $userIDFrom;
    $args->blobData = $blobData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setComment()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_setComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_setComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setComment failed: unknown result");
  }

  public function updateComment($feedID, $commentID, $uniqueID, $blobDelData, $appType)
  {
    $this->send_updateComment($feedID, $commentID, $uniqueID, $blobDelData, $appType);
    return $this->recv_updateComment();
  }

  public function send_updateComment($feedID, $commentID, $uniqueID, $blobDelData, $appType)
  {
    $args = new gnt_server_interactionService_updateComment_args();
    $args->feedID = $feedID;
    $args->commentID = $commentID;
    $args->uniqueID = $uniqueID;
    $args->blobDelData = $blobDelData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateComment()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_updateComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_updateComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updateComment failed: unknown result");
  }

  public function delComment($objectID, $commentID, $uniqueIDChecked, $appType)
  {
    $this->send_delComment($objectID, $commentID, $uniqueIDChecked, $appType);
    return $this->recv_delComment();
  }

  public function send_delComment($objectID, $commentID, $uniqueIDChecked, $appType)
  {
    $args = new gnt_server_interactionService_delComment_args();
    $args->objectID = $objectID;
    $args->commentID = $commentID;
    $args->uniqueIDChecked = $uniqueIDChecked;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delComment()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_delComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_delComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delComment failed: unknown result");
  }

  public function delCommentByAdmin($objectID, $commentID, $appType)
  {
    $this->send_delCommentByAdmin($objectID, $commentID, $appType);
    return $this->recv_delCommentByAdmin();
  }

  public function send_delCommentByAdmin($objectID, $commentID, $appType)
  {
    $args = new gnt_server_interactionService_delCommentByAdmin_args();
    $args->objectID = $objectID;
    $args->commentID = $commentID;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delCommentByAdmin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delCommentByAdmin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delCommentByAdmin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_delCommentByAdmin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_delCommentByAdmin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delCommentByAdmin failed: unknown result");
  }

  public function getArrTotalComment($arrObjectID, $appType)
  {
    $this->send_getArrTotalComment($arrObjectID, $appType);
    return $this->recv_getArrTotalComment();
  }

  public function send_getArrTotalComment($arrObjectID, $appType)
  {
    $args = new gnt_server_interactionService_getArrTotalComment_args();
    $args->arrObjectID = $arrObjectID;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getArrTotalComment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getArrTotalComment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getArrTotalComment()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getArrTotalComment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getArrTotalComment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getArrTotalComment failed: unknown result");
  }

  public function getCommentWithLike($objectID, $uniqueIDChecked, $appType, $iStart, $iEnd)
  {
    $this->send_getCommentWithLike($objectID, $uniqueIDChecked, $appType, $iStart, $iEnd);
    return $this->recv_getCommentWithLike();
  }

  public function send_getCommentWithLike($objectID, $uniqueIDChecked, $appType, $iStart, $iEnd)
  {
    $args = new gnt_server_interactionService_getCommentWithLike_args();
    $args->objectID = $objectID;
    $args->uniqueIDChecked = $uniqueIDChecked;
    $args->appType = $appType;
    $args->iStart = $iStart;
    $args->iEnd = $iEnd;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCommentWithLike', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCommentWithLike', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCommentWithLike()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getCommentWithLike_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getCommentWithLike_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getCommentWithLike failed: unknown result");
  }

  public function getArrTotalFeed($arrObjectID, $appType)
  {
    $this->send_getArrTotalFeed($arrObjectID, $appType);
    return $this->recv_getArrTotalFeed();
  }

  public function send_getArrTotalFeed($arrObjectID, $appType)
  {
    $args = new gnt_server_interactionService_getArrTotalFeed_args();
    $args->arrObjectID = $arrObjectID;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getArrTotalFeed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getArrTotalFeed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getArrTotalFeed()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_interactionService_getArrTotalFeed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_interactionService_getArrTotalFeed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getArrTotalFeed failed: unknown result");
  }

  public function shutdown()
  {
    $this->send_shutdown();
  }

  public function send_shutdown()
  {
    $args = new gnt_server_interactionService_shutdown_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'shutdown', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('shutdown', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_server_interactionService_setLiked_args {
  static $_TSPEC;

  public $appType = null;
  public $uniqueID = null;
  public $userID = null;
  public $iUnixTimeStamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iUnixTimeStamp',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['uniqueID'])) {
        $this->uniqueID = $vals['uniqueID'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['iUnixTimeStamp'])) {
        $this->iUnixTimeStamp = $vals['iUnixTimeStamp'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setLiked_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->iUnixTimeStamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setLiked_args');
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 1);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueID !== null) {
      $xfer += $output->writeFieldBegin('uniqueID', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::STRING, 3);
      $xfer += $output->writeString($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iUnixTimeStamp !== null) {
      $xfer += $output->writeFieldBegin('iUnixTimeStamp', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->iUnixTimeStamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setLiked_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setLiked_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setLiked_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getTotalLiked_args {
  static $_TSPEC;

  public $appType = null;
  public $uniqueID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['uniqueID'])) {
        $this->uniqueID = $vals['uniqueID'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getTotalLiked_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getTotalLiked_args');
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 1);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueID !== null) {
      $xfer += $output->writeFieldBegin('uniqueID', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getTotalLiked_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getTotalLiked_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getTotalLiked_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getLiked_args {
  static $_TSPEC;

  public $appType = null;
  public $uniqueID = null;
  public $iStart = null;
  public $iEnd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iStart',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iEnd',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['uniqueID'])) {
        $this->uniqueID = $vals['uniqueID'];
      }
      if (isset($vals['iStart'])) {
        $this->iStart = $vals['iStart'];
      }
      if (isset($vals['iEnd'])) {
        $this->iEnd = $vals['iEnd'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getLiked_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getLiked_args');
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 1);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueID !== null) {
      $xfer += $output->writeFieldBegin('uniqueID', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iStart !== null) {
      $xfer += $output->writeFieldBegin('iStart', TType::I32, 3);
      $xfer += $output->writeI32($this->iStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iEnd !== null) {
      $xfer += $output->writeFieldBegin('iEnd', TType::I32, 4);
      $xfer += $output->writeI32($this->iEnd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getLiked_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getLiked_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size104 = 0;
            $_etype107 = 0;
            $xfer += $input->readListBegin($_etype107, $_size104);
            for ($_i108 = 0; $_i108 < $_size104; ++$_i108)
            {
              $elem109 = null;
              $xfer += $input->readString($elem109);
              $this->success []= $elem109;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getLiked_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter110)
          {
            $xfer += $output->writeString($iter110);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setUnLiked_args {
  static $_TSPEC;

  public $appType = null;
  public $uniqueID = null;
  public $userID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['uniqueID'])) {
        $this->uniqueID = $vals['uniqueID'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setUnLiked_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setUnLiked_args');
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 1);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueID !== null) {
      $xfer += $output->writeFieldBegin('uniqueID', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::STRING, 3);
      $xfer += $output->writeString($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setUnLiked_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setUnLiked_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setUnLiked_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_isLiked_args {
  static $_TSPEC;

  public $appType = null;
  public $uniqueID = null;
  public $userID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['uniqueID'])) {
        $this->uniqueID = $vals['uniqueID'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
    }
  }

  public function getName() {
    return 'interactionService_isLiked_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_isLiked_args');
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 1);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueID !== null) {
      $xfer += $output->writeFieldBegin('uniqueID', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::STRING, 3);
      $xfer += $output->writeString($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_isLiked_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_isLiked_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_isLiked_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setFeed_args {
  static $_TSPEC;

  public $uniqueIDTo = null;
  public $uniqueIDFrom = null;
  public $blobData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqueIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueIDFrom',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'blobData',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqueIDTo'])) {
        $this->uniqueIDTo = $vals['uniqueIDTo'];
      }
      if (isset($vals['uniqueIDFrom'])) {
        $this->uniqueIDFrom = $vals['uniqueIDFrom'];
      }
      if (isset($vals['blobData'])) {
        $this->blobData = $vals['blobData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setFeed_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blobData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setFeed_args');
    if ($this->uniqueIDTo !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqueIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDFrom !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDFrom', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueIDFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blobData !== null) {
      $xfer += $output->writeFieldBegin('blobData', TType::STRING, 3);
      $xfer += $output->writeString($this->blobData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 4);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setFeed_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setFeed_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size111 = 0;
            $_ktype112 = 0;
            $_vtype113 = 0;
            $xfer += $input->readMapBegin($_ktype112, $_vtype113, $_size111);
            for ($_i115 = 0; $_i115 < $_size111; ++$_i115)
            {
              $key116 = '';
              $val117 = '';
              $xfer += $input->readString($key116);
              $xfer += $input->readString($val117);
              $this->success[$key116] = $val117;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setFeed_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter118 => $viter119)
          {
            $xfer += $output->writeString($kiter118);
            $xfer += $output->writeString($viter119);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setFeedForGroup_args {
  static $_TSPEC;

  public $arrUniqueIDTo = null;
  public $uniqueIDFrom = null;
  public $blobData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrUniqueIDTo',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'uniqueIDFrom',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'blobData',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrUniqueIDTo'])) {
        $this->arrUniqueIDTo = $vals['arrUniqueIDTo'];
      }
      if (isset($vals['uniqueIDFrom'])) {
        $this->uniqueIDFrom = $vals['uniqueIDFrom'];
      }
      if (isset($vals['blobData'])) {
        $this->blobData = $vals['blobData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setFeedForGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->arrUniqueIDTo = array();
            $_size120 = 0;
            $_etype123 = 0;
            $xfer += $input->readListBegin($_etype123, $_size120);
            for ($_i124 = 0; $_i124 < $_size120; ++$_i124)
            {
              $elem125 = null;
              $xfer += $input->readString($elem125);
              $this->arrUniqueIDTo []= $elem125;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blobData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setFeedForGroup_args');
    if ($this->arrUniqueIDTo !== null) {
      if (!is_array($this->arrUniqueIDTo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrUniqueIDTo', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->arrUniqueIDTo));
        {
          foreach ($this->arrUniqueIDTo as $iter126)
          {
            $xfer += $output->writeString($iter126);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDFrom !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDFrom', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueIDFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blobData !== null) {
      $xfer += $output->writeFieldBegin('blobData', TType::STRING, 3);
      $xfer += $output->writeString($this->blobData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 4);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setFeedForGroup_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setFeedForGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size127 = 0;
            $_ktype128 = 0;
            $_vtype129 = 0;
            $xfer += $input->readMapBegin($_ktype128, $_vtype129, $_size127);
            for ($_i131 = 0; $_i131 < $_size127; ++$_i131)
            {
              $key132 = '';
              $val133 = array();
              $xfer += $input->readString($key132);
              $val133 = array();
              $_size134 = 0;
              $_ktype135 = 0;
              $_vtype136 = 0;
              $xfer += $input->readMapBegin($_ktype135, $_vtype136, $_size134);
              for ($_i138 = 0; $_i138 < $_size134; ++$_i138)
              {
                $key139 = '';
                $val140 = '';
                $xfer += $input->readString($key139);
                $xfer += $input->readString($val140);
                $val133[$key139] = $val140;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key132] = $val133;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setFeedForGroup_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter141 => $viter142)
          {
            $xfer += $output->writeString($kiter141);
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($viter142));
              {
                foreach ($viter142 as $kiter143 => $viter144)
                {
                  $xfer += $output->writeString($kiter143);
                  $xfer += $output->writeString($viter144);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delFeed_args {
  static $_TSPEC;

  public $uniqueIDTo = null;
  public $uniqueIDChecked = null;
  public $feedID = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqueIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueIDChecked',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'feedID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqueIDTo'])) {
        $this->uniqueIDTo = $vals['uniqueIDTo'];
      }
      if (isset($vals['uniqueIDChecked'])) {
        $this->uniqueIDChecked = $vals['uniqueIDChecked'];
      }
      if (isset($vals['feedID'])) {
        $this->feedID = $vals['feedID'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delFeed_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDChecked);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delFeed_args');
    if ($this->uniqueIDTo !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqueIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDChecked !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDChecked', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueIDChecked);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedID !== null) {
      $xfer += $output->writeFieldBegin('feedID', TType::STRING, 3);
      $xfer += $output->writeString($this->feedID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 4);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delFeed_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delFeed_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delFeed_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delFeedByAdmin_args {
  static $_TSPEC;

  public $uniqueIDTo = null;
  public $feedID = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqueIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'feedID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqueIDTo'])) {
        $this->uniqueIDTo = $vals['uniqueIDTo'];
      }
      if (isset($vals['feedID'])) {
        $this->feedID = $vals['feedID'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delFeedByAdmin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delFeedByAdmin_args');
    if ($this->uniqueIDTo !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqueIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedID !== null) {
      $xfer += $output->writeFieldBegin('feedID', TType::STRING, 2);
      $xfer += $output->writeString($this->feedID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 3);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delFeedByAdmin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delFeedByAdmin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delFeedByAdmin_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getFeedWithCommentAndLike_args {
  static $_TSPEC;

  public $uniqueIDTo = null;
  public $uniqueIDChecked = null;
  public $appType = null;
  public $iStart = null;
  public $iEnd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqueIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueIDChecked',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iStart',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'iEnd',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqueIDTo'])) {
        $this->uniqueIDTo = $vals['uniqueIDTo'];
      }
      if (isset($vals['uniqueIDChecked'])) {
        $this->uniqueIDChecked = $vals['uniqueIDChecked'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['iStart'])) {
        $this->iStart = $vals['iStart'];
      }
      if (isset($vals['iEnd'])) {
        $this->iEnd = $vals['iEnd'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getFeedWithCommentAndLike_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDChecked);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getFeedWithCommentAndLike_args');
    if ($this->uniqueIDTo !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqueIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDChecked !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDChecked', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueIDChecked);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 3);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iStart !== null) {
      $xfer += $output->writeFieldBegin('iStart', TType::I32, 4);
      $xfer += $output->writeI32($this->iStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iEnd !== null) {
      $xfer += $output->writeFieldBegin('iEnd', TType::I32, 5);
      $xfer += $output->writeI32($this->iEnd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getFeedWithCommentAndLike_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => 'gnt_server_FeedDetail',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getFeedWithCommentAndLike_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size145 = 0;
            $_ktype146 = 0;
            $_vtype147 = 0;
            $xfer += $input->readMapBegin($_ktype146, $_vtype147, $_size145);
            for ($_i149 = 0; $_i149 < $_size145; ++$_i149)
            {
              $key150 = 0;
              $val151 = array();
              $xfer += $input->readI32($key150);
              $val151 = array();
              $_size152 = 0;
              $_etype155 = 0;
              $xfer += $input->readListBegin($_etype155, $_size152);
              for ($_i156 = 0; $_i156 < $_size152; ++$_i156)
              {
                $elem157 = null;
                $elem157 = new gnt_server_FeedDetail();
                $xfer += $elem157->read($input);
                $val151 []= $elem157;
              }
              $xfer += $input->readListEnd();
              $this->success[$key150] = $val151;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getFeedWithCommentAndLike_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->success));
        {
          foreach ($this->success as $kiter158 => $viter159)
          {
            $xfer += $output->writeI32($kiter158);
            {
              $output->writeListBegin(TType::STRUCT, count($viter159));
              {
                foreach ($viter159 as $iter160)
                {
                  $xfer += $iter160->write($output);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getFeedDetailWithCommentAndLike_args {
  static $_TSPEC;

  public $uniqueIDTo = null;
  public $uniqueIDChecked = null;
  public $feedID = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uniqueIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueIDChecked',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'feedID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uniqueIDTo'])) {
        $this->uniqueIDTo = $vals['uniqueIDTo'];
      }
      if (isset($vals['uniqueIDChecked'])) {
        $this->uniqueIDChecked = $vals['uniqueIDChecked'];
      }
      if (isset($vals['feedID'])) {
        $this->feedID = $vals['feedID'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getFeedDetailWithCommentAndLike_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDChecked);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getFeedDetailWithCommentAndLike_args');
    if ($this->uniqueIDTo !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->uniqueIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDChecked !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDChecked', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueIDChecked);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedID !== null) {
      $xfer += $output->writeFieldBegin('feedID', TType::STRING, 3);
      $xfer += $output->writeString($this->feedID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 4);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getFeedDetailWithCommentAndLike_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_FeedDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getFeedDetailWithCommentAndLike_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_FeedDetail();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getFeedDetailWithCommentAndLike_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setComment_args {
  static $_TSPEC;

  public $objectID = null;
  public $userIDTo = null;
  public $userIDFrom = null;
  public $blobData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'objectID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userIDFrom',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'blobData',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['objectID'])) {
        $this->objectID = $vals['objectID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['userIDFrom'])) {
        $this->userIDFrom = $vals['userIDFrom'];
      }
      if (isset($vals['blobData'])) {
        $this->blobData = $vals['blobData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setComment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blobData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setComment_args');
    if ($this->objectID !== null) {
      $xfer += $output->writeFieldBegin('objectID', TType::STRING, 1);
      $xfer += $output->writeString($this->objectID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDFrom !== null) {
      $xfer += $output->writeFieldBegin('userIDFrom', TType::STRING, 3);
      $xfer += $output->writeString($this->userIDFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blobData !== null) {
      $xfer += $output->writeFieldBegin('blobData', TType::STRING, 4);
      $xfer += $output->writeString($this->blobData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 5);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_setComment_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_setComment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size161 = 0;
            $_ktype162 = 0;
            $_vtype163 = 0;
            $xfer += $input->readMapBegin($_ktype162, $_vtype163, $_size161);
            for ($_i165 = 0; $_i165 < $_size161; ++$_i165)
            {
              $key166 = '';
              $val167 = '';
              $xfer += $input->readString($key166);
              $xfer += $input->readString($val167);
              $this->success[$key166] = $val167;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_setComment_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter168 => $viter169)
          {
            $xfer += $output->writeString($kiter168);
            $xfer += $output->writeString($viter169);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_updateComment_args {
  static $_TSPEC;

  public $feedID = null;
  public $commentID = null;
  public $uniqueID = null;
  public $blobDelData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'commentID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uniqueID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'blobDelData',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['feedID'])) {
        $this->feedID = $vals['feedID'];
      }
      if (isset($vals['commentID'])) {
        $this->commentID = $vals['commentID'];
      }
      if (isset($vals['uniqueID'])) {
        $this->uniqueID = $vals['uniqueID'];
      }
      if (isset($vals['blobDelData'])) {
        $this->blobDelData = $vals['blobDelData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_updateComment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blobDelData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_updateComment_args');
    if ($this->feedID !== null) {
      $xfer += $output->writeFieldBegin('feedID', TType::STRING, 1);
      $xfer += $output->writeString($this->feedID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentID !== null) {
      $xfer += $output->writeFieldBegin('commentID', TType::STRING, 2);
      $xfer += $output->writeString($this->commentID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueID !== null) {
      $xfer += $output->writeFieldBegin('uniqueID', TType::STRING, 3);
      $xfer += $output->writeString($this->uniqueID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blobDelData !== null) {
      $xfer += $output->writeFieldBegin('blobDelData', TType::STRING, 4);
      $xfer += $output->writeString($this->blobDelData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 5);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_updateComment_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_updateComment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_updateComment_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delComment_args {
  static $_TSPEC;

  public $objectID = null;
  public $commentID = null;
  public $uniqueIDChecked = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'objectID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'commentID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'uniqueIDChecked',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['objectID'])) {
        $this->objectID = $vals['objectID'];
      }
      if (isset($vals['commentID'])) {
        $this->commentID = $vals['commentID'];
      }
      if (isset($vals['uniqueIDChecked'])) {
        $this->uniqueIDChecked = $vals['uniqueIDChecked'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delComment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDChecked);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delComment_args');
    if ($this->objectID !== null) {
      $xfer += $output->writeFieldBegin('objectID', TType::STRING, 1);
      $xfer += $output->writeString($this->objectID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentID !== null) {
      $xfer += $output->writeFieldBegin('commentID', TType::STRING, 2);
      $xfer += $output->writeString($this->commentID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDChecked !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDChecked', TType::STRING, 3);
      $xfer += $output->writeString($this->uniqueIDChecked);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 4);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delComment_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delComment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size170 = 0;
            $_etype173 = 0;
            $xfer += $input->readListBegin($_etype173, $_size170);
            for ($_i174 = 0; $_i174 < $_size170; ++$_i174)
            {
              $elem175 = null;
              $elem175 = array();
              $_size176 = 0;
              $_ktype177 = 0;
              $_vtype178 = 0;
              $xfer += $input->readMapBegin($_ktype177, $_vtype178, $_size176);
              for ($_i180 = 0; $_i180 < $_size176; ++$_i180)
              {
                $key181 = '';
                $val182 = '';
                $xfer += $input->readString($key181);
                $xfer += $input->readString($val182);
                $elem175[$key181] = $val182;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem175;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delComment_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter183)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter183));
              {
                foreach ($iter183 as $kiter184 => $viter185)
                {
                  $xfer += $output->writeString($kiter184);
                  $xfer += $output->writeString($viter185);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delCommentByAdmin_args {
  static $_TSPEC;

  public $objectID = null;
  public $commentID = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'objectID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'commentID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['objectID'])) {
        $this->objectID = $vals['objectID'];
      }
      if (isset($vals['commentID'])) {
        $this->commentID = $vals['commentID'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delCommentByAdmin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->commentID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delCommentByAdmin_args');
    if ($this->objectID !== null) {
      $xfer += $output->writeFieldBegin('objectID', TType::STRING, 1);
      $xfer += $output->writeString($this->objectID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentID !== null) {
      $xfer += $output->writeFieldBegin('commentID', TType::STRING, 2);
      $xfer += $output->writeString($this->commentID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 3);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_delCommentByAdmin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_delCommentByAdmin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_delCommentByAdmin_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getArrTotalComment_args {
  static $_TSPEC;

  public $arrObjectID = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrObjectID',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrObjectID'])) {
        $this->arrObjectID = $vals['arrObjectID'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getArrTotalComment_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->arrObjectID = array();
            $_size186 = 0;
            $_etype189 = 0;
            $xfer += $input->readListBegin($_etype189, $_size186);
            for ($_i190 = 0; $_i190 < $_size186; ++$_i190)
            {
              $elem191 = null;
              $xfer += $input->readString($elem191);
              $this->arrObjectID []= $elem191;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getArrTotalComment_args');
    if ($this->arrObjectID !== null) {
      if (!is_array($this->arrObjectID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrObjectID', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->arrObjectID));
        {
          foreach ($this->arrObjectID as $iter192)
          {
            $xfer += $output->writeString($iter192);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 2);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getArrTotalComment_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getArrTotalComment_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size193 = 0;
            $_ktype194 = 0;
            $_vtype195 = 0;
            $xfer += $input->readMapBegin($_ktype194, $_vtype195, $_size193);
            for ($_i197 = 0; $_i197 < $_size193; ++$_i197)
            {
              $key198 = '';
              $val199 = '';
              $xfer += $input->readString($key198);
              $xfer += $input->readString($val199);
              $this->success[$key198] = $val199;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getArrTotalComment_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter200 => $viter201)
          {
            $xfer += $output->writeString($kiter200);
            $xfer += $output->writeString($viter201);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getCommentWithLike_args {
  static $_TSPEC;

  public $objectID = null;
  public $uniqueIDChecked = null;
  public $appType = null;
  public $iStart = null;
  public $iEnd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'objectID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'uniqueIDChecked',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iStart',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'iEnd',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['objectID'])) {
        $this->objectID = $vals['objectID'];
      }
      if (isset($vals['uniqueIDChecked'])) {
        $this->uniqueIDChecked = $vals['uniqueIDChecked'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
      if (isset($vals['iStart'])) {
        $this->iStart = $vals['iStart'];
      }
      if (isset($vals['iEnd'])) {
        $this->iEnd = $vals['iEnd'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getCommentWithLike_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uniqueIDChecked);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getCommentWithLike_args');
    if ($this->objectID !== null) {
      $xfer += $output->writeFieldBegin('objectID', TType::STRING, 1);
      $xfer += $output->writeString($this->objectID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uniqueIDChecked !== null) {
      $xfer += $output->writeFieldBegin('uniqueIDChecked', TType::STRING, 2);
      $xfer += $output->writeString($this->uniqueIDChecked);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 3);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iStart !== null) {
      $xfer += $output->writeFieldBegin('iStart', TType::I32, 4);
      $xfer += $output->writeI32($this->iStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iEnd !== null) {
      $xfer += $output->writeFieldBegin('iEnd', TType::I32, 5);
      $xfer += $output->writeI32($this->iEnd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getCommentWithLike_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::LST,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::LST,
              'etype' => TType::MAP,
              'elem' => array(
                'type' => TType::MAP,
                'ktype' => TType::STRING,
                'vtype' => TType::STRING,
                'key' => array(
                  'type' => TType::STRING,
                ),
                'val' => array(
                  'type' => TType::STRING,
                  ),
                ),
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getCommentWithLike_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size202 = 0;
            $_ktype203 = 0;
            $_vtype204 = 0;
            $xfer += $input->readMapBegin($_ktype203, $_vtype204, $_size202);
            for ($_i206 = 0; $_i206 < $_size202; ++$_i206)
            {
              $key207 = 0;
              $val208 = array();
              $xfer += $input->readI32($key207);
              $val208 = array();
              $_size209 = 0;
              $_ktype210 = 0;
              $_vtype211 = 0;
              $xfer += $input->readMapBegin($_ktype210, $_vtype211, $_size209);
              for ($_i213 = 0; $_i213 < $_size209; ++$_i213)
              {
                $key214 = '';
                $val215 = array();
                $xfer += $input->readString($key214);
                $val215 = array();
                $_size216 = 0;
                $_etype219 = 0;
                $xfer += $input->readListBegin($_etype219, $_size216);
                for ($_i220 = 0; $_i220 < $_size216; ++$_i220)
                {
                  $elem221 = null;
                  $elem221 = array();
                  $_size222 = 0;
                  $_ktype223 = 0;
                  $_vtype224 = 0;
                  $xfer += $input->readMapBegin($_ktype223, $_vtype224, $_size222);
                  for ($_i226 = 0; $_i226 < $_size222; ++$_i226)
                  {
                    $key227 = '';
                    $val228 = '';
                    $xfer += $input->readString($key227);
                    $xfer += $input->readString($val228);
                    $elem221[$key227] = $val228;
                  }
                  $xfer += $input->readMapEnd();
                  $val215 []= $elem221;
                }
                $xfer += $input->readListEnd();
                $val208[$key214] = $val215;
              }
              $xfer += $input->readMapEnd();
              $this->success[$key207] = $val208;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getCommentWithLike_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::MAP, count($this->success));
        {
          foreach ($this->success as $kiter229 => $viter230)
          {
            $xfer += $output->writeI32($kiter229);
            {
              $output->writeMapBegin(TType::STRING, TType::LST, count($viter230));
              {
                foreach ($viter230 as $kiter231 => $viter232)
                {
                  $xfer += $output->writeString($kiter231);
                  {
                    $output->writeListBegin(TType::MAP, count($viter232));
                    {
                      foreach ($viter232 as $iter233)
                      {
                        {
                          $output->writeMapBegin(TType::STRING, TType::STRING, count($iter233));
                          {
                            foreach ($iter233 as $kiter234 => $viter235)
                            {
                              $xfer += $output->writeString($kiter234);
                              $xfer += $output->writeString($viter235);
                            }
                          }
                          $output->writeMapEnd();
                        }
                      }
                    }
                    $output->writeListEnd();
                  }
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getArrTotalFeed_args {
  static $_TSPEC;

  public $arrObjectID = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrObjectID',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'appType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrObjectID'])) {
        $this->arrObjectID = $vals['arrObjectID'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getArrTotalFeed_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->arrObjectID = array();
            $_size236 = 0;
            $_etype239 = 0;
            $xfer += $input->readListBegin($_etype239, $_size236);
            for ($_i240 = 0; $_i240 < $_size236; ++$_i240)
            {
              $elem241 = null;
              $xfer += $input->readString($elem241);
              $this->arrObjectID []= $elem241;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getArrTotalFeed_args');
    if ($this->arrObjectID !== null) {
      if (!is_array($this->arrObjectID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrObjectID', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->arrObjectID));
        {
          foreach ($this->arrObjectID as $iter242)
          {
            $xfer += $output->writeString($iter242);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::STRING, 2);
      $xfer += $output->writeString($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_getArrTotalFeed_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'interactionService_getArrTotalFeed_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size243 = 0;
            $_ktype244 = 0;
            $_vtype245 = 0;
            $xfer += $input->readMapBegin($_ktype244, $_vtype245, $_size243);
            for ($_i247 = 0; $_i247 < $_size243; ++$_i247)
            {
              $key248 = '';
              $val249 = '';
              $xfer += $input->readString($key248);
              $xfer += $input->readString($val249);
              $this->success[$key248] = $val249;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_getArrTotalFeed_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter250 => $viter251)
          {
            $xfer += $output->writeString($kiter250);
            $xfer += $output->writeString($viter251);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_interactionService_shutdown_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'interactionService_shutdown_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('interactionService_shutdown_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
