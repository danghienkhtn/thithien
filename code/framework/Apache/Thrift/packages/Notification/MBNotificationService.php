<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Notification/mobion_notification_types.php';

interface gnt_mobion_notification_MBNotificationServiceIf {
  public function notifyWithExtra($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $extraMsg, $bStatistic, $bAllwayAPNS);
  public function notify($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic);
  public function notifyEx($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic, $bAllwayAPNS);
  public function notifyExtraOfflineMessage($receiver, $signature, $lsDeviceToken, $lsAppId, $lsPushServer, $offlineMessage, $sJsonExtra);
  public function notifyOnline($userSender, $token, $signature, $userReceiver, $appId, $onlineMessage, $bStatistic);
  public function notifyOfflineWithExtra($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage, $extraMsg);
  public function notifyOffline($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage);
}

class gnt_mobion_notification_MBNotificationServiceClient implements gnt_mobion_notification_MBNotificationServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function notifyWithExtra($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $extraMsg, $bStatistic, $bAllwayAPNS)
  {
    $this->send_notifyWithExtra($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $extraMsg, $bStatistic, $bAllwayAPNS);
  }

  public function send_notifyWithExtra($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $extraMsg, $bStatistic, $bAllwayAPNS)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notifyWithExtra_args();
    $args->userSender = $userSender;
    $args->token = $token;
    $args->signature = $signature;
    $args->lsUserReceiver = $lsUserReceiver;
    $args->lsAppId = $lsAppId;
    $args->lsPushServer = $lsPushServer;
    $args->onlineMessage = $onlineMessage;
    $args->offlineMessage = $offlineMessage;
    $args->extraMsg = $extraMsg;
    $args->bStatistic = $bStatistic;
    $args->bAllwayAPNS = $bAllwayAPNS;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyWithExtra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyWithExtra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function notify($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic)
  {
    $this->send_notify($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic);
  }

  public function send_notify($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notify_args();
    $args->userSender = $userSender;
    $args->token = $token;
    $args->signature = $signature;
    $args->lsUserReceiver = $lsUserReceiver;
    $args->lsAppId = $lsAppId;
    $args->lsPushServer = $lsPushServer;
    $args->onlineMessage = $onlineMessage;
    $args->offlineMessage = $offlineMessage;
    $args->bStatistic = $bStatistic;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function notifyEx($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic, $bAllwayAPNS)
  {
    $this->send_notifyEx($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic, $bAllwayAPNS);
  }

  public function send_notifyEx($userSender, $token, $signature, $lsUserReceiver, $lsAppId, $lsPushServer, $onlineMessage, $offlineMessage, $bStatistic, $bAllwayAPNS)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notifyEx_args();
    $args->userSender = $userSender;
    $args->token = $token;
    $args->signature = $signature;
    $args->lsUserReceiver = $lsUserReceiver;
    $args->lsAppId = $lsAppId;
    $args->lsPushServer = $lsPushServer;
    $args->onlineMessage = $onlineMessage;
    $args->offlineMessage = $offlineMessage;
    $args->bStatistic = $bStatistic;
    $args->bAllwayAPNS = $bAllwayAPNS;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function notifyExtraOfflineMessage($receiver, $signature, $lsDeviceToken, $lsAppId, $lsPushServer, $offlineMessage, $sJsonExtra)
  {
    $this->send_notifyExtraOfflineMessage($receiver, $signature, $lsDeviceToken, $lsAppId, $lsPushServer, $offlineMessage, $sJsonExtra);
  }

  public function send_notifyExtraOfflineMessage($receiver, $signature, $lsDeviceToken, $lsAppId, $lsPushServer, $offlineMessage, $sJsonExtra)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notifyExtraOfflineMessage_args();
    $args->receiver = $receiver;
    $args->signature = $signature;
    $args->lsDeviceToken = $lsDeviceToken;
    $args->lsAppId = $lsAppId;
    $args->lsPushServer = $lsPushServer;
    $args->offlineMessage = $offlineMessage;
    $args->sJsonExtra = $sJsonExtra;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyExtraOfflineMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyExtraOfflineMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function notifyOnline($userSender, $token, $signature, $userReceiver, $appId, $onlineMessage, $bStatistic)
  {
    $this->send_notifyOnline($userSender, $token, $signature, $userReceiver, $appId, $onlineMessage, $bStatistic);
    return $this->recv_notifyOnline();
  }

  public function send_notifyOnline($userSender, $token, $signature, $userReceiver, $appId, $onlineMessage, $bStatistic)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notifyOnline_args();
    $args->userSender = $userSender;
    $args->token = $token;
    $args->signature = $signature;
    $args->userReceiver = $userReceiver;
    $args->appId = $appId;
    $args->onlineMessage = $onlineMessage;
    $args->bStatistic = $bStatistic;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyOnline', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyOnline', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_notifyOnline()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_notification_MBNotificationService_notifyOnline_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_notification_MBNotificationService_notifyOnline_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("notifyOnline failed: unknown result");
  }

  public function notifyOfflineWithExtra($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage, $extraMsg)
  {
    $this->send_notifyOfflineWithExtra($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage, $extraMsg);
  }

  public function send_notifyOfflineWithExtra($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage, $extraMsg)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notifyOfflineWithExtra_args();
    $args->userSender = $userSender;
    $args->token = $token;
    $args->signature = $signature;
    $args->userReceiver = $userReceiver;
    $args->appId = $appId;
    $args->lsPushServer = $lsPushServer;
    $args->offlineMessage = $offlineMessage;
    $args->extraMsg = $extraMsg;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyOfflineWithExtra', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyOfflineWithExtra', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function notifyOffline($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage)
  {
    $this->send_notifyOffline($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage);
  }

  public function send_notifyOffline($userSender, $token, $signature, $userReceiver, $appId, $lsPushServer, $offlineMessage)
  {
    $args = new gnt_mobion_notification_MBNotificationService_notifyOffline_args();
    $args->userSender = $userSender;
    $args->token = $token;
    $args->signature = $signature;
    $args->userReceiver = $userReceiver;
    $args->appId = $appId;
    $args->lsPushServer = $lsPushServer;
    $args->offlineMessage = $offlineMessage;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notifyOffline', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notifyOffline', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_notification_MBNotificationService_notifyWithExtra_args {
  static $_TSPEC;

  public $userSender = null;
  public $token = null;
  public $signature = null;
  public $lsUserReceiver = null;
  public $lsAppId = null;
  public $lsPushServer = null;
  public $onlineMessage = null;
  public $offlineMessage = null;
  public $extraMsg = null;
  public $bStatistic = null;
  public $bAllwayAPNS = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lsUserReceiver',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'lsAppId',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'lsPushServer',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        7 => array(
          'var' => 'onlineMessage',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'offlineMessage',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'extraMsg',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'bStatistic',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'bAllwayAPNS',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['lsUserReceiver'])) {
        $this->lsUserReceiver = $vals['lsUserReceiver'];
      }
      if (isset($vals['lsAppId'])) {
        $this->lsAppId = $vals['lsAppId'];
      }
      if (isset($vals['lsPushServer'])) {
        $this->lsPushServer = $vals['lsPushServer'];
      }
      if (isset($vals['onlineMessage'])) {
        $this->onlineMessage = $vals['onlineMessage'];
      }
      if (isset($vals['offlineMessage'])) {
        $this->offlineMessage = $vals['offlineMessage'];
      }
      if (isset($vals['extraMsg'])) {
        $this->extraMsg = $vals['extraMsg'];
      }
      if (isset($vals['bStatistic'])) {
        $this->bStatistic = $vals['bStatistic'];
      }
      if (isset($vals['bAllwayAPNS'])) {
        $this->bAllwayAPNS = $vals['bAllwayAPNS'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyWithExtra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->lsUserReceiver = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->lsUserReceiver []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->lsAppId = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $xfer += $input->readString($elem11);
              $this->lsAppId []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->lsPushServer = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readI16($elem17);
              $this->lsPushServer []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extraMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bStatistic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bAllwayAPNS);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyWithExtra_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsUserReceiver !== null) {
      if (!is_array($this->lsUserReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsUserReceiver', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->lsUserReceiver));
        {
          foreach ($this->lsUserReceiver as $iter18)
          {
            $xfer += $output->writeString($iter18);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsAppId !== null) {
      if (!is_array($this->lsAppId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAppId', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->lsAppId));
        {
          foreach ($this->lsAppId as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsPushServer !== null) {
      if (!is_array($this->lsPushServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPushServer', TType::LST, 6);
      {
        $output->writeListBegin(TType::I16, count($this->lsPushServer));
        {
          foreach ($this->lsPushServer as $iter20)
          {
            $xfer += $output->writeI16($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlineMessage !== null) {
      $xfer += $output->writeFieldBegin('onlineMessage', TType::STRING, 7);
      $xfer += $output->writeString($this->onlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMessage !== null) {
      $xfer += $output->writeFieldBegin('offlineMessage', TType::STRING, 8);
      $xfer += $output->writeString($this->offlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMsg !== null) {
      $xfer += $output->writeFieldBegin('extraMsg', TType::STRING, 9);
      $xfer += $output->writeString($this->extraMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bStatistic !== null) {
      $xfer += $output->writeFieldBegin('bStatistic', TType::BOOL, 10);
      $xfer += $output->writeBool($this->bStatistic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bAllwayAPNS !== null) {
      $xfer += $output->writeFieldBegin('bAllwayAPNS', TType::BOOL, 11);
      $xfer += $output->writeBool($this->bAllwayAPNS);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notify_args {
  static $_TSPEC;

  public $userSender = null;
  public $token = null;
  public $signature = null;
  public $lsUserReceiver = null;
  public $lsAppId = null;
  public $lsPushServer = null;
  public $onlineMessage = null;
  public $offlineMessage = null;
  public $bStatistic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lsUserReceiver',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'lsAppId',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'lsPushServer',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        7 => array(
          'var' => 'onlineMessage',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'offlineMessage',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'bStatistic',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['lsUserReceiver'])) {
        $this->lsUserReceiver = $vals['lsUserReceiver'];
      }
      if (isset($vals['lsAppId'])) {
        $this->lsAppId = $vals['lsAppId'];
      }
      if (isset($vals['lsPushServer'])) {
        $this->lsPushServer = $vals['lsPushServer'];
      }
      if (isset($vals['onlineMessage'])) {
        $this->onlineMessage = $vals['onlineMessage'];
      }
      if (isset($vals['offlineMessage'])) {
        $this->offlineMessage = $vals['offlineMessage'];
      }
      if (isset($vals['bStatistic'])) {
        $this->bStatistic = $vals['bStatistic'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->lsUserReceiver = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readString($elem26);
              $this->lsUserReceiver []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->lsAppId = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $xfer += $input->readString($elem32);
              $this->lsAppId []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->lsPushServer = array();
            $_size33 = 0;
            $_etype36 = 0;
            $xfer += $input->readListBegin($_etype36, $_size33);
            for ($_i37 = 0; $_i37 < $_size33; ++$_i37)
            {
              $elem38 = null;
              $xfer += $input->readI16($elem38);
              $this->lsPushServer []= $elem38;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bStatistic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notify_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsUserReceiver !== null) {
      if (!is_array($this->lsUserReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsUserReceiver', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->lsUserReceiver));
        {
          foreach ($this->lsUserReceiver as $iter39)
          {
            $xfer += $output->writeString($iter39);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsAppId !== null) {
      if (!is_array($this->lsAppId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAppId', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->lsAppId));
        {
          foreach ($this->lsAppId as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsPushServer !== null) {
      if (!is_array($this->lsPushServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPushServer', TType::LST, 6);
      {
        $output->writeListBegin(TType::I16, count($this->lsPushServer));
        {
          foreach ($this->lsPushServer as $iter41)
          {
            $xfer += $output->writeI16($iter41);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlineMessage !== null) {
      $xfer += $output->writeFieldBegin('onlineMessage', TType::STRING, 7);
      $xfer += $output->writeString($this->onlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMessage !== null) {
      $xfer += $output->writeFieldBegin('offlineMessage', TType::STRING, 8);
      $xfer += $output->writeString($this->offlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bStatistic !== null) {
      $xfer += $output->writeFieldBegin('bStatistic', TType::BOOL, 9);
      $xfer += $output->writeBool($this->bStatistic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notifyEx_args {
  static $_TSPEC;

  public $userSender = null;
  public $token = null;
  public $signature = null;
  public $lsUserReceiver = null;
  public $lsAppId = null;
  public $lsPushServer = null;
  public $onlineMessage = null;
  public $offlineMessage = null;
  public $bStatistic = null;
  public $bAllwayAPNS = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lsUserReceiver',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'lsAppId',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'lsPushServer',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        7 => array(
          'var' => 'onlineMessage',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'offlineMessage',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'bStatistic',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'bAllwayAPNS',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['lsUserReceiver'])) {
        $this->lsUserReceiver = $vals['lsUserReceiver'];
      }
      if (isset($vals['lsAppId'])) {
        $this->lsAppId = $vals['lsAppId'];
      }
      if (isset($vals['lsPushServer'])) {
        $this->lsPushServer = $vals['lsPushServer'];
      }
      if (isset($vals['onlineMessage'])) {
        $this->onlineMessage = $vals['onlineMessage'];
      }
      if (isset($vals['offlineMessage'])) {
        $this->offlineMessage = $vals['offlineMessage'];
      }
      if (isset($vals['bStatistic'])) {
        $this->bStatistic = $vals['bStatistic'];
      }
      if (isset($vals['bAllwayAPNS'])) {
        $this->bAllwayAPNS = $vals['bAllwayAPNS'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->lsUserReceiver = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $xfer += $input->readString($elem47);
              $this->lsUserReceiver []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->lsAppId = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $xfer += $input->readString($elem53);
              $this->lsAppId []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->lsPushServer = array();
            $_size54 = 0;
            $_etype57 = 0;
            $xfer += $input->readListBegin($_etype57, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $elem59 = null;
              $xfer += $input->readI16($elem59);
              $this->lsPushServer []= $elem59;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bStatistic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bAllwayAPNS);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyEx_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsUserReceiver !== null) {
      if (!is_array($this->lsUserReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsUserReceiver', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->lsUserReceiver));
        {
          foreach ($this->lsUserReceiver as $iter60)
          {
            $xfer += $output->writeString($iter60);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsAppId !== null) {
      if (!is_array($this->lsAppId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAppId', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->lsAppId));
        {
          foreach ($this->lsAppId as $iter61)
          {
            $xfer += $output->writeString($iter61);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsPushServer !== null) {
      if (!is_array($this->lsPushServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPushServer', TType::LST, 6);
      {
        $output->writeListBegin(TType::I16, count($this->lsPushServer));
        {
          foreach ($this->lsPushServer as $iter62)
          {
            $xfer += $output->writeI16($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlineMessage !== null) {
      $xfer += $output->writeFieldBegin('onlineMessage', TType::STRING, 7);
      $xfer += $output->writeString($this->onlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMessage !== null) {
      $xfer += $output->writeFieldBegin('offlineMessage', TType::STRING, 8);
      $xfer += $output->writeString($this->offlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bStatistic !== null) {
      $xfer += $output->writeFieldBegin('bStatistic', TType::BOOL, 9);
      $xfer += $output->writeBool($this->bStatistic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bAllwayAPNS !== null) {
      $xfer += $output->writeFieldBegin('bAllwayAPNS', TType::BOOL, 10);
      $xfer += $output->writeBool($this->bAllwayAPNS);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notifyExtraOfflineMessage_args {
  static $_TSPEC;

  public $receiver = null;
  public $signature = null;
  public $lsDeviceToken = null;
  public $lsAppId = null;
  public $lsPushServer = null;
  public $offlineMessage = null;
  public $sJsonExtra = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiver',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'lsDeviceToken',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'lsAppId',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'lsPushServer',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        6 => array(
          'var' => 'offlineMessage',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'sJsonExtra',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiver'])) {
        $this->receiver = $vals['receiver'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['lsDeviceToken'])) {
        $this->lsDeviceToken = $vals['lsDeviceToken'];
      }
      if (isset($vals['lsAppId'])) {
        $this->lsAppId = $vals['lsAppId'];
      }
      if (isset($vals['lsPushServer'])) {
        $this->lsPushServer = $vals['lsPushServer'];
      }
      if (isset($vals['offlineMessage'])) {
        $this->offlineMessage = $vals['offlineMessage'];
      }
      if (isset($vals['sJsonExtra'])) {
        $this->sJsonExtra = $vals['sJsonExtra'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyExtraOfflineMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->lsDeviceToken = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $xfer += $input->readString($elem68);
              $this->lsDeviceToken []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->lsAppId = array();
            $_size69 = 0;
            $_etype72 = 0;
            $xfer += $input->readListBegin($_etype72, $_size69);
            for ($_i73 = 0; $_i73 < $_size69; ++$_i73)
            {
              $elem74 = null;
              $xfer += $input->readString($elem74);
              $this->lsAppId []= $elem74;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->lsPushServer = array();
            $_size75 = 0;
            $_etype78 = 0;
            $xfer += $input->readListBegin($_etype78, $_size75);
            for ($_i79 = 0; $_i79 < $_size75; ++$_i79)
            {
              $elem80 = null;
              $xfer += $input->readI16($elem80);
              $this->lsPushServer []= $elem80;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sJsonExtra);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyExtraOfflineMessage_args');
    if ($this->receiver !== null) {
      $xfer += $output->writeFieldBegin('receiver', TType::STRING, 1);
      $xfer += $output->writeString($this->receiver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 2);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsDeviceToken !== null) {
      if (!is_array($this->lsDeviceToken)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsDeviceToken', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->lsDeviceToken));
        {
          foreach ($this->lsDeviceToken as $iter81)
          {
            $xfer += $output->writeString($iter81);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsAppId !== null) {
      if (!is_array($this->lsAppId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAppId', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->lsAppId));
        {
          foreach ($this->lsAppId as $iter82)
          {
            $xfer += $output->writeString($iter82);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsPushServer !== null) {
      if (!is_array($this->lsPushServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPushServer', TType::LST, 5);
      {
        $output->writeListBegin(TType::I16, count($this->lsPushServer));
        {
          foreach ($this->lsPushServer as $iter83)
          {
            $xfer += $output->writeI16($iter83);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMessage !== null) {
      $xfer += $output->writeFieldBegin('offlineMessage', TType::STRING, 6);
      $xfer += $output->writeString($this->offlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sJsonExtra !== null) {
      $xfer += $output->writeFieldBegin('sJsonExtra', TType::STRING, 7);
      $xfer += $output->writeString($this->sJsonExtra);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notifyOnline_args {
  static $_TSPEC;

  public $userSender = null;
  public $token = null;
  public $signature = null;
  public $userReceiver = null;
  public $appId = null;
  public $onlineMessage = null;
  public $bStatistic = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userReceiver',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'onlineMessage',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bStatistic',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['userReceiver'])) {
        $this->userReceiver = $vals['userReceiver'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['onlineMessage'])) {
        $this->onlineMessage = $vals['onlineMessage'];
      }
      if (isset($vals['bStatistic'])) {
        $this->bStatistic = $vals['bStatistic'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyOnline_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userReceiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->onlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bStatistic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyOnline_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userReceiver !== null) {
      $xfer += $output->writeFieldBegin('userReceiver', TType::STRING, 4);
      $xfer += $output->writeString($this->userReceiver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 5);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->onlineMessage !== null) {
      $xfer += $output->writeFieldBegin('onlineMessage', TType::STRING, 6);
      $xfer += $output->writeString($this->onlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bStatistic !== null) {
      $xfer += $output->writeFieldBegin('bStatistic', TType::BOOL, 7);
      $xfer += $output->writeBool($this->bStatistic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notifyOnline_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyOnline_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyOnline_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notifyOfflineWithExtra_args {
  static $_TSPEC;

  public $userSender = null;
  public $token = null;
  public $signature = null;
  public $userReceiver = null;
  public $appId = null;
  public $lsPushServer = null;
  public $offlineMessage = null;
  public $extraMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userReceiver',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'lsPushServer',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        7 => array(
          'var' => 'offlineMessage',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'extraMsg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['userReceiver'])) {
        $this->userReceiver = $vals['userReceiver'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['lsPushServer'])) {
        $this->lsPushServer = $vals['lsPushServer'];
      }
      if (isset($vals['offlineMessage'])) {
        $this->offlineMessage = $vals['offlineMessage'];
      }
      if (isset($vals['extraMsg'])) {
        $this->extraMsg = $vals['extraMsg'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyOfflineWithExtra_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userReceiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->lsPushServer = array();
            $_size84 = 0;
            $_etype87 = 0;
            $xfer += $input->readListBegin($_etype87, $_size84);
            for ($_i88 = 0; $_i88 < $_size84; ++$_i88)
            {
              $elem89 = null;
              $xfer += $input->readI16($elem89);
              $this->lsPushServer []= $elem89;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extraMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyOfflineWithExtra_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userReceiver !== null) {
      $xfer += $output->writeFieldBegin('userReceiver', TType::STRING, 4);
      $xfer += $output->writeString($this->userReceiver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 5);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsPushServer !== null) {
      if (!is_array($this->lsPushServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPushServer', TType::LST, 6);
      {
        $output->writeListBegin(TType::I16, count($this->lsPushServer));
        {
          foreach ($this->lsPushServer as $iter90)
          {
            $xfer += $output->writeI16($iter90);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMessage !== null) {
      $xfer += $output->writeFieldBegin('offlineMessage', TType::STRING, 7);
      $xfer += $output->writeString($this->offlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extraMsg !== null) {
      $xfer += $output->writeFieldBegin('extraMsg', TType::STRING, 8);
      $xfer += $output->writeString($this->extraMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_notification_MBNotificationService_notifyOffline_args {
  static $_TSPEC;

  public $userSender = null;
  public $token = null;
  public $signature = null;
  public $userReceiver = null;
  public $appId = null;
  public $lsPushServer = null;
  public $offlineMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userReceiver',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'lsPushServer',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        7 => array(
          'var' => 'offlineMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['userReceiver'])) {
        $this->userReceiver = $vals['userReceiver'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['lsPushServer'])) {
        $this->lsPushServer = $vals['lsPushServer'];
      }
      if (isset($vals['offlineMessage'])) {
        $this->offlineMessage = $vals['offlineMessage'];
      }
    }
  }

  public function getName() {
    return 'MBNotificationService_notifyOffline_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userReceiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->lsPushServer = array();
            $_size91 = 0;
            $_etype94 = 0;
            $xfer += $input->readListBegin($_etype94, $_size91);
            for ($_i95 = 0; $_i95 < $_size91; ++$_i95)
            {
              $elem96 = null;
              $xfer += $input->readI16($elem96);
              $this->lsPushServer []= $elem96;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBNotificationService_notifyOffline_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 2);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userReceiver !== null) {
      $xfer += $output->writeFieldBegin('userReceiver', TType::STRING, 4);
      $xfer += $output->writeString($this->userReceiver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 5);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsPushServer !== null) {
      if (!is_array($this->lsPushServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPushServer', TType::LST, 6);
      {
        $output->writeListBegin(TType::I16, count($this->lsPushServer));
        {
          foreach ($this->lsPushServer as $iter97)
          {
            $xfer += $output->writeI16($iter97);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMessage !== null) {
      $xfer += $output->writeFieldBegin('offlineMessage', TType::STRING, 7);
      $xfer += $output->writeString($this->offlineMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
