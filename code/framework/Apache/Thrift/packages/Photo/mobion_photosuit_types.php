<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class gnt_mobion_storage_mobionphotosuit_AlbumDetail {
  static $_TSPEC;

  public $albumName = null;
  public $ownerId = null;
  public $thumbId = null;
  public $createDate = null;
  public $albumType = null;
  public $privacy = null;
  public $activeFlag = null;
  public $lstPhotoID = null;
  public $feedId = null;
  public $location = null;
  public $desc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'albumName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ownerId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'thumbId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'albumType',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => 'privacy',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'activeFlag',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'lstPhotoID',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        9 => array(
          'var' => 'feedId',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['albumName'])) {
        $this->albumName = $vals['albumName'];
      }
      if (isset($vals['ownerId'])) {
        $this->ownerId = $vals['ownerId'];
      }
      if (isset($vals['thumbId'])) {
        $this->thumbId = $vals['thumbId'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['albumType'])) {
        $this->albumType = $vals['albumType'];
      }
      if (isset($vals['privacy'])) {
        $this->privacy = $vals['privacy'];
      }
      if (isset($vals['activeFlag'])) {
        $this->activeFlag = $vals['activeFlag'];
      }
      if (isset($vals['lstPhotoID'])) {
        $this->lstPhotoID = $vals['lstPhotoID'];
      }
      if (isset($vals['feedId'])) {
        $this->feedId = $vals['feedId'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
    }
  }

  public function getName() {
    return 'AlbumDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->albumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ownerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->thumbId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->albumType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->privacy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->activeFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->lstPhotoID = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->lstPhotoID []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AlbumDetail');
    if ($this->albumName !== null) {
      $xfer += $output->writeFieldBegin('albumName', TType::STRING, 1);
      $xfer += $output->writeString($this->albumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerId !== null) {
      $xfer += $output->writeFieldBegin('ownerId', TType::I64, 2);
      $xfer += $output->writeI64($this->ownerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbId !== null) {
      $xfer += $output->writeFieldBegin('thumbId', TType::I64, 3);
      $xfer += $output->writeI64($this->thumbId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 4);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->albumType !== null) {
      $xfer += $output->writeFieldBegin('albumType', TType::BYTE, 5);
      $xfer += $output->writeByte($this->albumType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacy !== null) {
      $xfer += $output->writeFieldBegin('privacy', TType::I16, 6);
      $xfer += $output->writeI16($this->privacy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeFlag !== null) {
      $xfer += $output->writeFieldBegin('activeFlag', TType::BOOL, 7);
      $xfer += $output->writeBool($this->activeFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lstPhotoID !== null) {
      if (!is_array($this->lstPhotoID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lstPhotoID', TType::LST, 8);
      {
        $output->writeListBegin(TType::I64, count($this->lstPhotoID));
        {
          foreach ($this->lstPhotoID as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedId !== null) {
      $xfer += $output->writeFieldBegin('feedId', TType::STRING, 9);
      $xfer += $output->writeString($this->feedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 10);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 11);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_TagOfPhoto {
  static $_TSPEC;

  public $userID = null;
  public $tagetUserID = null;
  public $x = null;
  public $y = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'tagetUserID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'x',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'y',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
      if (isset($vals['tagetUserID'])) {
        $this->tagetUserID = $vals['tagetUserID'];
      }
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['y'])) {
        $this->y = $vals['y'];
      }
    }
  }

  public function getName() {
    return 'TagOfPhoto';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tagetUserID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->y);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TagOfPhoto');
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::I64, 1);
      $xfer += $output->writeI64($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tagetUserID !== null) {
      $xfer += $output->writeFieldBegin('tagetUserID', TType::I64, 2);
      $xfer += $output->writeI64($this->tagetUserID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::I16, 3);
      $xfer += $output->writeI16($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y !== null) {
      $xfer += $output->writeFieldBegin('y', TType::I16, 4);
      $xfer += $output->writeI16($this->y);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoDetail {
  static $_TSPEC;

  public $photoName = null;
  public $ownerId = null;
  public $albumId = null;
  public $createDate = null;
  public $uuid = null;
  public $height = null;
  public $width = null;
  public $serverType = null;
  public $feedId = null;
  public $ext = null;
  public $desc = null;
  public $lsTag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ownerId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'height',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'width',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'serverType',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'feedId',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ext',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'lsTag',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionphotosuit_TagOfPhoto',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoName'])) {
        $this->photoName = $vals['photoName'];
      }
      if (isset($vals['ownerId'])) {
        $this->ownerId = $vals['ownerId'];
      }
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['serverType'])) {
        $this->serverType = $vals['serverType'];
      }
      if (isset($vals['feedId'])) {
        $this->feedId = $vals['feedId'];
      }
      if (isset($vals['ext'])) {
        $this->ext = $vals['ext'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['lsTag'])) {
        $this->lsTag = $vals['lsTag'];
      }
    }
  }

  public function getName() {
    return 'PhotoDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ownerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->serverType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->lsTag = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new gnt_mobion_storage_mobionphotosuit_TagOfPhoto();
              $xfer += $elem12->read($input);
              $this->lsTag []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoDetail');
    if ($this->photoName !== null) {
      $xfer += $output->writeFieldBegin('photoName', TType::STRING, 1);
      $xfer += $output->writeString($this->photoName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerId !== null) {
      $xfer += $output->writeFieldBegin('ownerId', TType::I64, 2);
      $xfer += $output->writeI64($this->ownerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 3);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 4);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 5);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I16, 6);
      $xfer += $output->writeI16($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I16, 7);
      $xfer += $output->writeI16($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverType !== null) {
      $xfer += $output->writeFieldBegin('serverType', TType::I16, 8);
      $xfer += $output->writeI16($this->serverType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedId !== null) {
      $xfer += $output->writeFieldBegin('feedId', TType::STRING, 9);
      $xfer += $output->writeString($this->feedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext !== null) {
      $xfer += $output->writeFieldBegin('ext', TType::STRING, 10);
      $xfer += $output->writeString($this->ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 11);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsTag !== null) {
      if (!is_array($this->lsTag)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsTag', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lsTag));
        {
          foreach ($this->lsTag as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_GeneralResult {
  static $_TSPEC;

  public $statusCode = null;
  public $msg = null;
  public $msg_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statusCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg_detail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['statusCode'])) {
        $this->statusCode = $vals['statusCode'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msg_detail'])) {
        $this->msg_detail = $vals['msg_detail'];
      }
    }
  }

  public function getName() {
    return 'GeneralResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->statusCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg_detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeneralResult');
    if ($this->statusCode !== null) {
      $xfer += $output->writeFieldBegin('statusCode', TType::I32, 1);
      $xfer += $output->writeI32($this->statusCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_detail !== null) {
      $xfer += $output->writeFieldBegin('msg_detail', TType::STRING, 3);
      $xfer += $output->writeString($this->msg_detail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_CreateAlbumDetailResult {
  static $_TSPEC;

  public $status = null;
  public $albumId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        2 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
    }
  }

  public function getName() {
    return 'CreateAlbumDetailResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateAlbumDetailResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 2);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_AlbumDetailResult {
  static $_TSPEC;

  public $status = null;
  public $albumValue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        2 => array(
          'var' => 'albumValue',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_AlbumDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['albumValue'])) {
        $this->albumValue = $vals['albumValue'];
      }
    }
  }

  public function getName() {
    return 'AlbumDetailResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->albumValue = new gnt_mobion_storage_mobionphotosuit_AlbumDetail();
            $xfer += $this->albumValue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AlbumDetailResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->albumValue !== null) {
      if (!is_object($this->albumValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('albumValue', TType::STRUCT, 2);
      $xfer += $this->albumValue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_AlbumDetailListResult {
  static $_TSPEC;

  public $status = null;
  public $mapAlbumResult = null;
  public $capacity = null;
  public $return_size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        2 => array(
          'var' => 'mapAlbumResult',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionphotosuit_AlbumDetailResult',
            ),
          ),
        3 => array(
          'var' => 'capacity',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'return_size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['mapAlbumResult'])) {
        $this->mapAlbumResult = $vals['mapAlbumResult'];
      }
      if (isset($vals['capacity'])) {
        $this->capacity = $vals['capacity'];
      }
      if (isset($vals['return_size'])) {
        $this->return_size = $vals['return_size'];
      }
    }
  }

  public function getName() {
    return 'AlbumDetailListResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->mapAlbumResult = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = 0;
              $val20 = new gnt_mobion_storage_mobionphotosuit_AlbumDetailResult();
              $xfer += $input->readI32($key19);
              $val20 = new gnt_mobion_storage_mobionphotosuit_AlbumDetailResult();
              $xfer += $val20->read($input);
              $this->mapAlbumResult[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->capacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->return_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AlbumDetailListResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mapAlbumResult !== null) {
      if (!is_array($this->mapAlbumResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mapAlbumResult', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->mapAlbumResult));
        {
          foreach ($this->mapAlbumResult as $kiter21 => $viter22)
          {
            $xfer += $output->writeI32($kiter21);
            $xfer += $viter22->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capacity !== null) {
      $xfer += $output->writeFieldBegin('capacity', TType::I32, 3);
      $xfer += $output->writeI32($this->capacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_size !== null) {
      $xfer += $output->writeFieldBegin('return_size', TType::I32, 4);
      $xfer += $output->writeI32($this->return_size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_AddPhotoDetailResult {
  static $_TSPEC;

  public $status = null;
  public $photoId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        2 => array(
          'var' => 'photoId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['photoId'])) {
        $this->photoId = $vals['photoId'];
      }
    }
  }

  public function getName() {
    return 'AddPhotoDetailResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->photoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddPhotoDetailResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoId !== null) {
      $xfer += $output->writeFieldBegin('photoId', TType::I64, 2);
      $xfer += $output->writeI64($this->photoId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoDetailResult {
  static $_TSPEC;

  public $status = null;
  public $photoValue = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        2 => array(
          'var' => 'photoValue',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_PhotoDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['photoValue'])) {
        $this->photoValue = $vals['photoValue'];
      }
    }
  }

  public function getName() {
    return 'PhotoDetailResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->photoValue = new gnt_mobion_storage_mobionphotosuit_PhotoDetail();
            $xfer += $this->photoValue->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoDetailResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photoValue !== null) {
      if (!is_object($this->photoValue)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('photoValue', TType::STRUCT, 2);
      $xfer += $this->photoValue->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoDetailListResult {
  static $_TSPEC;

  public $status = null;
  public $mapPhotoResult = null;
  public $capacity = null;
  public $return_size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        2 => array(
          'var' => 'mapPhotoResult',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionphotosuit_PhotoDetailResult',
            ),
          ),
        3 => array(
          'var' => 'capacity',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'return_size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['mapPhotoResult'])) {
        $this->mapPhotoResult = $vals['mapPhotoResult'];
      }
      if (isset($vals['capacity'])) {
        $this->capacity = $vals['capacity'];
      }
      if (isset($vals['return_size'])) {
        $this->return_size = $vals['return_size'];
      }
    }
  }

  public function getName() {
    return 'PhotoDetailListResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->mapPhotoResult = array();
            $_size23 = 0;
            $_ktype24 = 0;
            $_vtype25 = 0;
            $xfer += $input->readMapBegin($_ktype24, $_vtype25, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $key28 = 0;
              $val29 = new gnt_mobion_storage_mobionphotosuit_PhotoDetailResult();
              $xfer += $input->readI64($key28);
              $val29 = new gnt_mobion_storage_mobionphotosuit_PhotoDetailResult();
              $xfer += $val29->read($input);
              $this->mapPhotoResult[$key28] = $val29;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->capacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->return_size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoDetailListResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mapPhotoResult !== null) {
      if (!is_array($this->mapPhotoResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mapPhotoResult', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->mapPhotoResult));
        {
          foreach ($this->mapPhotoResult as $kiter30 => $viter31)
          {
            $xfer += $output->writeI64($kiter30);
            $xfer += $viter31->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capacity !== null) {
      $xfer += $output->writeFieldBegin('capacity', TType::I32, 3);
      $xfer += $output->writeI32($this->capacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->return_size !== null) {
      $xfer += $output->writeFieldBegin('return_size', TType::I32, 4);
      $xfer += $output->writeI32($this->return_size);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
