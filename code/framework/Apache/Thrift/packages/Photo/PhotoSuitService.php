<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Photo/mobion_photosuit_types.php';

interface gnt_mobion_storage_mobionphotosuit_PhotoSuitServiceIf {
  public function ping();
  public function getAlbumDetail($albumId, $accessCode);
  public function getPhotoDetail($photoId, $accessCode);
  public function getSlicePhotoOfAlbum($albumId, $startIndex, $size, $accessCode);
  public function getMultiAlbumDetail($lsAlbumId, $accessCode);
  public function getMultiPhotoDetail($lsPhotoId, $accessCode);
  public function getSliceAlbumOfUser($accountID, $startIndex, $size, $accessCode);
  public function getSliceTagsOfUser($accountID, $startIndex, $size, $accessCode);
  public function createAlbum($albumName, $ownerId, $thumbId, $createDate, $albumType, $privacy, $activeFlag, $feedId, $location, $desc, $accessCode);
  public function addPhoto($photoName, $ownerId, $albumId, $createDate, $uuid, $height, $width, $serverType, $feedId, $ext, $desc, $accessCode);
  public function deletePhotoDetail($photoId, $accessCode);
  public function deleteAlbumDetail($albumId, $accessCode);
  public function updatePhotoDetail($photoId, $accessCode, $mParams);
  public function updateAlbumDetail($albumId, $accessCode, $mParams);
  public function addTagToPhoto($photoId, $Tag, $accessCode);
  public function deleteTagFromPhoto($photoId, $accountID, $accessCode);
}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitServiceClient implements gnt_mobion_storage_mobionphotosuit_PhotoSuitServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
  }

  public function send_ping()
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_ping_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function getAlbumDetail($albumId, $accessCode)
  {
    $this->send_getAlbumDetail($albumId, $accessCode);
    return $this->recv_getAlbumDetail();
  }

  public function send_getAlbumDetail($albumId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getAlbumDetail_args();
    $args->albumId = $albumId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAlbumDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAlbumDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAlbumDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getAlbumDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getAlbumDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getAlbumDetail failed: unknown result");
  }

  public function getPhotoDetail($photoId, $accessCode)
  {
    $this->send_getPhotoDetail($photoId, $accessCode);
    return $this->recv_getPhotoDetail();
  }

  public function send_getPhotoDetail($photoId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getPhotoDetail_args();
    $args->photoId = $photoId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPhotoDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPhotoDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPhotoDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getPhotoDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getPhotoDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getPhotoDetail failed: unknown result");
  }

  public function getSlicePhotoOfAlbum($albumId, $startIndex, $size, $accessCode)
  {
    $this->send_getSlicePhotoOfAlbum($albumId, $startIndex, $size, $accessCode);
    return $this->recv_getSlicePhotoOfAlbum();
  }

  public function send_getSlicePhotoOfAlbum($albumId, $startIndex, $size, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSlicePhotoOfAlbum_args();
    $args->albumId = $albumId;
    $args->startIndex = $startIndex;
    $args->size = $size;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSlicePhotoOfAlbum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSlicePhotoOfAlbum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSlicePhotoOfAlbum()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSlicePhotoOfAlbum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSlicePhotoOfAlbum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSlicePhotoOfAlbum failed: unknown result");
  }

  public function getMultiAlbumDetail($lsAlbumId, $accessCode)
  {
    $this->send_getMultiAlbumDetail($lsAlbumId, $accessCode);
    return $this->recv_getMultiAlbumDetail();
  }

  public function send_getMultiAlbumDetail($lsAlbumId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiAlbumDetail_args();
    $args->lsAlbumId = $lsAlbumId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMultiAlbumDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMultiAlbumDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMultiAlbumDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiAlbumDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiAlbumDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMultiAlbumDetail failed: unknown result");
  }

  public function getMultiPhotoDetail($lsPhotoId, $accessCode)
  {
    $this->send_getMultiPhotoDetail($lsPhotoId, $accessCode);
    return $this->recv_getMultiPhotoDetail();
  }

  public function send_getMultiPhotoDetail($lsPhotoId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiPhotoDetail_args();
    $args->lsPhotoId = $lsPhotoId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMultiPhotoDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMultiPhotoDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMultiPhotoDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiPhotoDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiPhotoDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getMultiPhotoDetail failed: unknown result");
  }

  public function getSliceAlbumOfUser($accountID, $startIndex, $size, $accessCode)
  {
    $this->send_getSliceAlbumOfUser($accountID, $startIndex, $size, $accessCode);
    return $this->recv_getSliceAlbumOfUser();
  }

  public function send_getSliceAlbumOfUser($accountID, $startIndex, $size, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceAlbumOfUser_args();
    $args->accountID = $accountID;
    $args->startIndex = $startIndex;
    $args->size = $size;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSliceAlbumOfUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSliceAlbumOfUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSliceAlbumOfUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceAlbumOfUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceAlbumOfUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSliceAlbumOfUser failed: unknown result");
  }

  public function getSliceTagsOfUser($accountID, $startIndex, $size, $accessCode)
  {
    $this->send_getSliceTagsOfUser($accountID, $startIndex, $size, $accessCode);
    return $this->recv_getSliceTagsOfUser();
  }

  public function send_getSliceTagsOfUser($accountID, $startIndex, $size, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceTagsOfUser_args();
    $args->accountID = $accountID;
    $args->startIndex = $startIndex;
    $args->size = $size;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSliceTagsOfUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSliceTagsOfUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSliceTagsOfUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceTagsOfUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceTagsOfUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSliceTagsOfUser failed: unknown result");
  }

  public function createAlbum($albumName, $ownerId, $thumbId, $createDate, $albumType, $privacy, $activeFlag, $feedId, $location, $desc, $accessCode)
  {
    $this->send_createAlbum($albumName, $ownerId, $thumbId, $createDate, $albumType, $privacy, $activeFlag, $feedId, $location, $desc, $accessCode);
    return $this->recv_createAlbum();
  }

  public function send_createAlbum($albumName, $ownerId, $thumbId, $createDate, $albumType, $privacy, $activeFlag, $feedId, $location, $desc, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_createAlbum_args();
    $args->albumName = $albumName;
    $args->ownerId = $ownerId;
    $args->thumbId = $thumbId;
    $args->createDate = $createDate;
    $args->albumType = $albumType;
    $args->privacy = $privacy;
    $args->activeFlag = $activeFlag;
    $args->feedId = $feedId;
    $args->location = $location;
    $args->desc = $desc;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createAlbum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createAlbum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createAlbum()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_createAlbum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_createAlbum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("createAlbum failed: unknown result");
  }

  public function addPhoto($photoName, $ownerId, $albumId, $createDate, $uuid, $height, $width, $serverType, $feedId, $ext, $desc, $accessCode)
  {
    $this->send_addPhoto($photoName, $ownerId, $albumId, $createDate, $uuid, $height, $width, $serverType, $feedId, $ext, $desc, $accessCode);
    return $this->recv_addPhoto();
  }

  public function send_addPhoto($photoName, $ownerId, $albumId, $createDate, $uuid, $height, $width, $serverType, $feedId, $ext, $desc, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addPhoto_args();
    $args->photoName = $photoName;
    $args->ownerId = $ownerId;
    $args->albumId = $albumId;
    $args->createDate = $createDate;
    $args->uuid = $uuid;
    $args->height = $height;
    $args->width = $width;
    $args->serverType = $serverType;
    $args->feedId = $feedId;
    $args->ext = $ext;
    $args->desc = $desc;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addPhoto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addPhoto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addPhoto()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addPhoto_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addPhoto_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("addPhoto failed: unknown result");
  }

  public function deletePhotoDetail($photoId, $accessCode)
  {
    $this->send_deletePhotoDetail($photoId, $accessCode);
    return $this->recv_deletePhotoDetail();
  }

  public function send_deletePhotoDetail($photoId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deletePhotoDetail_args();
    $args->photoId = $photoId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deletePhotoDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deletePhotoDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deletePhotoDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deletePhotoDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deletePhotoDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("deletePhotoDetail failed: unknown result");
  }

  public function deleteAlbumDetail($albumId, $accessCode)
  {
    $this->send_deleteAlbumDetail($albumId, $accessCode);
    return $this->recv_deleteAlbumDetail();
  }

  public function send_deleteAlbumDetail($albumId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteAlbumDetail_args();
    $args->albumId = $albumId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteAlbumDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteAlbumDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteAlbumDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteAlbumDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteAlbumDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("deleteAlbumDetail failed: unknown result");
  }

  public function updatePhotoDetail($photoId, $accessCode, $mParams)
  {
    $this->send_updatePhotoDetail($photoId, $accessCode, $mParams);
    return $this->recv_updatePhotoDetail();
  }

  public function send_updatePhotoDetail($photoId, $accessCode, $mParams)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updatePhotoDetail_args();
    $args->photoId = $photoId;
    $args->accessCode = $accessCode;
    $args->mParams = $mParams;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePhotoDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePhotoDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePhotoDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updatePhotoDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updatePhotoDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updatePhotoDetail failed: unknown result");
  }

  public function updateAlbumDetail($albumId, $accessCode, $mParams)
  {
    $this->send_updateAlbumDetail($albumId, $accessCode, $mParams);
    return $this->recv_updateAlbumDetail();
  }

  public function send_updateAlbumDetail($albumId, $accessCode, $mParams)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updateAlbumDetail_args();
    $args->albumId = $albumId;
    $args->accessCode = $accessCode;
    $args->mParams = $mParams;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateAlbumDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateAlbumDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateAlbumDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updateAlbumDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updateAlbumDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updateAlbumDetail failed: unknown result");
  }

  public function addTagToPhoto($photoId, $Tag, $accessCode)
  {
    $this->send_addTagToPhoto($photoId, $Tag, $accessCode);
  }

  public function send_addTagToPhoto($photoId, $Tag, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addTagToPhoto_args();
    $args->photoId = $photoId;
    $args->Tag = $Tag;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addTagToPhoto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addTagToPhoto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function deleteTagFromPhoto($photoId, $accountID, $accessCode)
  {
    $this->send_deleteTagFromPhoto($photoId, $accountID, $accessCode);
  }

  public function send_deleteTagFromPhoto($photoId, $accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteTagFromPhoto_args();
    $args->photoId = $photoId;
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteTagFromPhoto', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteTagFromPhoto', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_ping_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'PhotoSuitService_ping_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_ping_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getAlbumDetail_args {
  static $_TSPEC;

  public $albumId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getAlbumDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getAlbumDetail_args');
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 1);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getAlbumDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_AlbumDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getAlbumDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_AlbumDetailResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getAlbumDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getPhotoDetail_args {
  static $_TSPEC;

  public $photoId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoId'])) {
        $this->photoId = $vals['photoId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getPhotoDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->photoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getPhotoDetail_args');
    if ($this->photoId !== null) {
      $xfer += $output->writeFieldBegin('photoId', TType::I64, 1);
      $xfer += $output->writeI64($this->photoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getPhotoDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_PhotoDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getPhotoDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_PhotoDetailResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getPhotoDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSlicePhotoOfAlbum_args {
  static $_TSPEC;

  public $albumId = null;
  public $startIndex = null;
  public $size = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
      if (isset($vals['startIndex'])) {
        $this->startIndex = $vals['startIndex'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getSlicePhotoOfAlbum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getSlicePhotoOfAlbum_args');
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 1);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startIndex !== null) {
      $xfer += $output->writeFieldBegin('startIndex', TType::I32, 2);
      $xfer += $output->writeI32($this->startIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 3);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSlicePhotoOfAlbum_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_PhotoDetailListResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getSlicePhotoOfAlbum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_PhotoDetailListResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getSlicePhotoOfAlbum_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiAlbumDetail_args {
  static $_TSPEC;

  public $lsAlbumId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lsAlbumId',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lsAlbumId'])) {
        $this->lsAlbumId = $vals['lsAlbumId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getMultiAlbumDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lsAlbumId = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $xfer += $input->readI32($elem37);
              $this->lsAlbumId []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getMultiAlbumDetail_args');
    if ($this->lsAlbumId !== null) {
      if (!is_array($this->lsAlbumId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAlbumId', TType::LST, 1);
      {
        $output->writeListBegin(TType::I32, count($this->lsAlbumId));
        {
          foreach ($this->lsAlbumId as $iter38)
          {
            $xfer += $output->writeI32($iter38);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiAlbumDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionphotosuit_AlbumDetailResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getMultiAlbumDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size39 = 0;
            $_ktype40 = 0;
            $_vtype41 = 0;
            $xfer += $input->readMapBegin($_ktype40, $_vtype41, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $key44 = 0;
              $val45 = new gnt_mobion_storage_mobionphotosuit_AlbumDetailResult();
              $xfer += $input->readI32($key44);
              $val45 = new gnt_mobion_storage_mobionphotosuit_AlbumDetailResult();
              $xfer += $val45->read($input);
              $this->success[$key44] = $val45;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getMultiAlbumDetail_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter46 => $viter47)
          {
            $xfer += $output->writeI32($kiter46);
            $xfer += $viter47->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiPhotoDetail_args {
  static $_TSPEC;

  public $lsPhotoId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lsPhotoId',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lsPhotoId'])) {
        $this->lsPhotoId = $vals['lsPhotoId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getMultiPhotoDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lsPhotoId = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $xfer += $input->readI64($elem53);
              $this->lsPhotoId []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getMultiPhotoDetail_args');
    if ($this->lsPhotoId !== null) {
      if (!is_array($this->lsPhotoId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsPhotoId', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->lsPhotoId));
        {
          foreach ($this->lsPhotoId as $iter54)
          {
            $xfer += $output->writeI64($iter54);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getMultiPhotoDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionphotosuit_PhotoDetailResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getMultiPhotoDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size55 = 0;
            $_ktype56 = 0;
            $_vtype57 = 0;
            $xfer += $input->readMapBegin($_ktype56, $_vtype57, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $key60 = 0;
              $val61 = new gnt_mobion_storage_mobionphotosuit_PhotoDetailResult();
              $xfer += $input->readI64($key60);
              $val61 = new gnt_mobion_storage_mobionphotosuit_PhotoDetailResult();
              $xfer += $val61->read($input);
              $this->success[$key60] = $val61;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getMultiPhotoDetail_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I64, TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $kiter62 => $viter63)
          {
            $xfer += $output->writeI64($kiter62);
            $xfer += $viter63->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceAlbumOfUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $startIndex = null;
  public $size = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['startIndex'])) {
        $this->startIndex = $vals['startIndex'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getSliceAlbumOfUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getSliceAlbumOfUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startIndex !== null) {
      $xfer += $output->writeFieldBegin('startIndex', TType::I32, 2);
      $xfer += $output->writeI32($this->startIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 3);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceAlbumOfUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_AlbumDetailListResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getSliceAlbumOfUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_AlbumDetailListResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getSliceAlbumOfUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceTagsOfUser_args {
  static $_TSPEC;

  public $accountID = null;
  public $startIndex = null;
  public $size = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['startIndex'])) {
        $this->startIndex = $vals['startIndex'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getSliceTagsOfUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getSliceTagsOfUser_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startIndex !== null) {
      $xfer += $output->writeFieldBegin('startIndex', TType::I32, 2);
      $xfer += $output->writeI32($this->startIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 3);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_getSliceTagsOfUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_PhotoDetailListResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_getSliceTagsOfUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_PhotoDetailListResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_getSliceTagsOfUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_createAlbum_args {
  static $_TSPEC;

  public $albumName = null;
  public $ownerId = null;
  public $thumbId = null;
  public $createDate = null;
  public $albumType = null;
  public $privacy = null;
  public $activeFlag = null;
  public $feedId = null;
  public $location = null;
  public $desc = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'albumName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ownerId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'thumbId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'albumType',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => 'privacy',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'activeFlag',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'feedId',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['albumName'])) {
        $this->albumName = $vals['albumName'];
      }
      if (isset($vals['ownerId'])) {
        $this->ownerId = $vals['ownerId'];
      }
      if (isset($vals['thumbId'])) {
        $this->thumbId = $vals['thumbId'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['albumType'])) {
        $this->albumType = $vals['albumType'];
      }
      if (isset($vals['privacy'])) {
        $this->privacy = $vals['privacy'];
      }
      if (isset($vals['activeFlag'])) {
        $this->activeFlag = $vals['activeFlag'];
      }
      if (isset($vals['feedId'])) {
        $this->feedId = $vals['feedId'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_createAlbum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->albumName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ownerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->thumbId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->albumType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->privacy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->activeFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_createAlbum_args');
    if ($this->albumName !== null) {
      $xfer += $output->writeFieldBegin('albumName', TType::STRING, 1);
      $xfer += $output->writeString($this->albumName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerId !== null) {
      $xfer += $output->writeFieldBegin('ownerId', TType::I64, 2);
      $xfer += $output->writeI64($this->ownerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbId !== null) {
      $xfer += $output->writeFieldBegin('thumbId', TType::I64, 3);
      $xfer += $output->writeI64($this->thumbId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 4);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->albumType !== null) {
      $xfer += $output->writeFieldBegin('albumType', TType::BYTE, 5);
      $xfer += $output->writeByte($this->albumType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacy !== null) {
      $xfer += $output->writeFieldBegin('privacy', TType::I16, 6);
      $xfer += $output->writeI16($this->privacy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeFlag !== null) {
      $xfer += $output->writeFieldBegin('activeFlag', TType::BOOL, 7);
      $xfer += $output->writeBool($this->activeFlag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedId !== null) {
      $xfer += $output->writeFieldBegin('feedId', TType::STRING, 8);
      $xfer += $output->writeString($this->feedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 9);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 10);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 11);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_createAlbum_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_CreateAlbumDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_createAlbum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_CreateAlbumDetailResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_createAlbum_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addPhoto_args {
  static $_TSPEC;

  public $photoName = null;
  public $ownerId = null;
  public $albumId = null;
  public $createDate = null;
  public $uuid = null;
  public $height = null;
  public $width = null;
  public $serverType = null;
  public $feedId = null;
  public $ext = null;
  public $desc = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ownerId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'createDate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'uuid',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'height',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'width',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'serverType',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'feedId',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ext',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'desc',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoName'])) {
        $this->photoName = $vals['photoName'];
      }
      if (isset($vals['ownerId'])) {
        $this->ownerId = $vals['ownerId'];
      }
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
      if (isset($vals['createDate'])) {
        $this->createDate = $vals['createDate'];
      }
      if (isset($vals['uuid'])) {
        $this->uuid = $vals['uuid'];
      }
      if (isset($vals['height'])) {
        $this->height = $vals['height'];
      }
      if (isset($vals['width'])) {
        $this->width = $vals['width'];
      }
      if (isset($vals['serverType'])) {
        $this->serverType = $vals['serverType'];
      }
      if (isset($vals['feedId'])) {
        $this->feedId = $vals['feedId'];
      }
      if (isset($vals['ext'])) {
        $this->ext = $vals['ext'];
      }
      if (isset($vals['desc'])) {
        $this->desc = $vals['desc'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_addPhoto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photoName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ownerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->createDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uuid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->width);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->serverType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->desc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_addPhoto_args');
    if ($this->photoName !== null) {
      $xfer += $output->writeFieldBegin('photoName', TType::STRING, 1);
      $xfer += $output->writeString($this->photoName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerId !== null) {
      $xfer += $output->writeFieldBegin('ownerId', TType::I64, 2);
      $xfer += $output->writeI64($this->ownerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 3);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDate !== null) {
      $xfer += $output->writeFieldBegin('createDate', TType::I32, 4);
      $xfer += $output->writeI32($this->createDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uuid !== null) {
      $xfer += $output->writeFieldBegin('uuid', TType::STRING, 5);
      $xfer += $output->writeString($this->uuid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->height !== null) {
      $xfer += $output->writeFieldBegin('height', TType::I16, 6);
      $xfer += $output->writeI16($this->height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->width !== null) {
      $xfer += $output->writeFieldBegin('width', TType::I16, 7);
      $xfer += $output->writeI16($this->width);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serverType !== null) {
      $xfer += $output->writeFieldBegin('serverType', TType::I16, 8);
      $xfer += $output->writeI16($this->serverType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedId !== null) {
      $xfer += $output->writeFieldBegin('feedId', TType::STRING, 9);
      $xfer += $output->writeString($this->feedId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ext !== null) {
      $xfer += $output->writeFieldBegin('ext', TType::STRING, 10);
      $xfer += $output->writeString($this->ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->desc !== null) {
      $xfer += $output->writeFieldBegin('desc', TType::STRING, 11);
      $xfer += $output->writeString($this->desc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 12);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addPhoto_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_AddPhotoDetailResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_addPhoto_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_AddPhotoDetailResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_addPhoto_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deletePhotoDetail_args {
  static $_TSPEC;

  public $photoId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoId'])) {
        $this->photoId = $vals['photoId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_deletePhotoDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->photoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_deletePhotoDetail_args');
    if ($this->photoId !== null) {
      $xfer += $output->writeFieldBegin('photoId', TType::I64, 1);
      $xfer += $output->writeI64($this->photoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deletePhotoDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_deletePhotoDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_deletePhotoDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteAlbumDetail_args {
  static $_TSPEC;

  public $albumId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_deleteAlbumDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_deleteAlbumDetail_args');
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 1);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteAlbumDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_deleteAlbumDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_deleteAlbumDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updatePhotoDetail_args {
  static $_TSPEC;

  public $photoId = null;
  public $accessCode = null;
  public $mParams = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mParams',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoId'])) {
        $this->photoId = $vals['photoId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
      if (isset($vals['mParams'])) {
        $this->mParams = $vals['mParams'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_updatePhotoDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->photoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->mParams = array();
            $_size64 = 0;
            $_ktype65 = 0;
            $_vtype66 = 0;
            $xfer += $input->readMapBegin($_ktype65, $_vtype66, $_size64);
            for ($_i68 = 0; $_i68 < $_size64; ++$_i68)
            {
              $key69 = '';
              $val70 = '';
              $xfer += $input->readString($key69);
              $xfer += $input->readString($val70);
              $this->mParams[$key69] = $val70;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_updatePhotoDetail_args');
    if ($this->photoId !== null) {
      $xfer += $output->writeFieldBegin('photoId', TType::I64, 1);
      $xfer += $output->writeI64($this->photoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mParams !== null) {
      if (!is_array($this->mParams)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mParams', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->mParams));
        {
          foreach ($this->mParams as $kiter71 => $viter72)
          {
            $xfer += $output->writeString($kiter71);
            $xfer += $output->writeString($viter72);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updatePhotoDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_updatePhotoDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_updatePhotoDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updateAlbumDetail_args {
  static $_TSPEC;

  public $albumId = null;
  public $accessCode = null;
  public $mParams = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'albumId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mParams',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['albumId'])) {
        $this->albumId = $vals['albumId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
      if (isset($vals['mParams'])) {
        $this->mParams = $vals['mParams'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_updateAlbumDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->albumId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->mParams = array();
            $_size73 = 0;
            $_ktype74 = 0;
            $_vtype75 = 0;
            $xfer += $input->readMapBegin($_ktype74, $_vtype75, $_size73);
            for ($_i77 = 0; $_i77 < $_size73; ++$_i77)
            {
              $key78 = '';
              $val79 = '';
              $xfer += $input->readString($key78);
              $xfer += $input->readString($val79);
              $this->mParams[$key78] = $val79;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_updateAlbumDetail_args');
    if ($this->albumId !== null) {
      $xfer += $output->writeFieldBegin('albumId', TType::I32, 1);
      $xfer += $output->writeI32($this->albumId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mParams !== null) {
      if (!is_array($this->mParams)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mParams', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->mParams));
        {
          foreach ($this->mParams as $kiter80 => $viter81)
          {
            $xfer += $output->writeString($kiter80);
            $xfer += $output->writeString($viter81);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_updateAlbumDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_GeneralResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_updateAlbumDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionphotosuit_GeneralResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_updateAlbumDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_addTagToPhoto_args {
  static $_TSPEC;

  public $photoId = null;
  public $Tag = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'Tag',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionphotosuit_TagOfPhoto',
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoId'])) {
        $this->photoId = $vals['photoId'];
      }
      if (isset($vals['Tag'])) {
        $this->Tag = $vals['Tag'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_addTagToPhoto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->photoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Tag = new gnt_mobion_storage_mobionphotosuit_TagOfPhoto();
            $xfer += $this->Tag->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_addTagToPhoto_args');
    if ($this->photoId !== null) {
      $xfer += $output->writeFieldBegin('photoId', TType::I64, 1);
      $xfer += $output->writeI64($this->photoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Tag !== null) {
      if (!is_object($this->Tag)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Tag', TType::STRUCT, 2);
      $xfer += $this->Tag->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionphotosuit_PhotoSuitService_deleteTagFromPhoto_args {
  static $_TSPEC;

  public $photoId = null;
  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photoId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photoId'])) {
        $this->photoId = $vals['photoId'];
      }
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'PhotoSuitService_deleteTagFromPhoto_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->photoId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PhotoSuitService_deleteTagFromPhoto_args');
    if ($this->photoId !== null) {
      $xfer += $output->writeFieldBegin('photoId', TType::I64, 1);
      $xfer += $output->writeI64($this->photoId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 2);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
