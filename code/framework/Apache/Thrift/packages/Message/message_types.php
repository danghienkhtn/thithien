<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class gnt_server_MessageChat {
  static $_TSPEC;

  public $FriendID = null;
  public $LoginID = null;
  public $MessageBlob = null;
  public $MessageDate = null;
  public $MessageID = null;
  public $UniqueID = null;
  public $SenderID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'FriendID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'LoginID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'MessageBlob',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MessageDate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'MessageID',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'UniqueID',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'SenderID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['FriendID'])) {
        $this->FriendID = $vals['FriendID'];
      }
      if (isset($vals['LoginID'])) {
        $this->LoginID = $vals['LoginID'];
      }
      if (isset($vals['MessageBlob'])) {
        $this->MessageBlob = $vals['MessageBlob'];
      }
      if (isset($vals['MessageDate'])) {
        $this->MessageDate = $vals['MessageDate'];
      }
      if (isset($vals['MessageID'])) {
        $this->MessageID = $vals['MessageID'];
      }
      if (isset($vals['UniqueID'])) {
        $this->UniqueID = $vals['UniqueID'];
      }
      if (isset($vals['SenderID'])) {
        $this->SenderID = $vals['SenderID'];
      }
    }
  }

  public function getName() {
    return 'MessageChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FriendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LoginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MessageBlob);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MessageDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MessageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UniqueID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SenderID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageChat');
    if ($this->FriendID !== null) {
      $xfer += $output->writeFieldBegin('FriendID', TType::STRING, 1);
      $xfer += $output->writeString($this->FriendID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LoginID !== null) {
      $xfer += $output->writeFieldBegin('LoginID', TType::STRING, 2);
      $xfer += $output->writeString($this->LoginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MessageBlob !== null) {
      $xfer += $output->writeFieldBegin('MessageBlob', TType::STRING, 3);
      $xfer += $output->writeString($this->MessageBlob);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MessageDate !== null) {
      $xfer += $output->writeFieldBegin('MessageDate', TType::I32, 4);
      $xfer += $output->writeI32($this->MessageDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MessageID !== null) {
      $xfer += $output->writeFieldBegin('MessageID', TType::I32, 5);
      $xfer += $output->writeI32($this->MessageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UniqueID !== null) {
      $xfer += $output->writeFieldBegin('UniqueID', TType::STRING, 6);
      $xfer += $output->writeString($this->UniqueID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SenderID !== null) {
      $xfer += $output->writeFieldBegin('SenderID', TType::STRING, 7);
      $xfer += $output->writeString($this->SenderID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_FriendChat {
  static $_TSPEC;

  public $FriendID = null;
  public $LastMessage = null;
  public $FlagRead = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'FriendID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'LastMessage',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_MessageChat',
          ),
        3 => array(
          'var' => 'FlagRead',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['FriendID'])) {
        $this->FriendID = $vals['FriendID'];
      }
      if (isset($vals['LastMessage'])) {
        $this->LastMessage = $vals['LastMessage'];
      }
      if (isset($vals['FlagRead'])) {
        $this->FlagRead = $vals['FlagRead'];
      }
    }
  }

  public function getName() {
    return 'FriendChat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FriendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->LastMessage = new gnt_server_MessageChat();
            $xfer += $this->LastMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->FlagRead);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FriendChat');
    if ($this->FriendID !== null) {
      $xfer += $output->writeFieldBegin('FriendID', TType::STRING, 1);
      $xfer += $output->writeString($this->FriendID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastMessage !== null) {
      if (!is_object($this->LastMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('LastMessage', TType::STRUCT, 2);
      $xfer += $this->LastMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FlagRead !== null) {
      $xfer += $output->writeFieldBegin('FlagRead', TType::BOOL, 3);
      $xfer += $output->writeBool($this->FlagRead);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_ListFriend {
  static $_TSPEC;

  public $TotalFriend = null;
  public $ArrFriendChat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'TotalFriend',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ArrFriendChat',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_server_FriendChat',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['TotalFriend'])) {
        $this->TotalFriend = $vals['TotalFriend'];
      }
      if (isset($vals['ArrFriendChat'])) {
        $this->ArrFriendChat = $vals['ArrFriendChat'];
      }
    }
  }

  public function getName() {
    return 'ListFriend';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->TotalFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->ArrFriendChat = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new gnt_server_FriendChat();
              $xfer += $elem5->read($input);
              $this->ArrFriendChat []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListFriend');
    if ($this->TotalFriend !== null) {
      $xfer += $output->writeFieldBegin('TotalFriend', TType::I32, 1);
      $xfer += $output->writeI32($this->TotalFriend);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ArrFriendChat !== null) {
      if (!is_array($this->ArrFriendChat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrFriendChat', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ArrFriendChat));
        {
          foreach ($this->ArrFriendChat as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_ListMessage {
  static $_TSPEC;

  public $TotalMessage = null;
  public $ArrMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'TotalMessage',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ArrMessage',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_server_MessageChat',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['TotalMessage'])) {
        $this->TotalMessage = $vals['TotalMessage'];
      }
      if (isset($vals['ArrMessage'])) {
        $this->ArrMessage = $vals['ArrMessage'];
      }
    }
  }

  public function getName() {
    return 'ListMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->TotalMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->ArrMessage = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new gnt_server_MessageChat();
              $xfer += $elem12->read($input);
              $this->ArrMessage []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListMessage');
    if ($this->TotalMessage !== null) {
      $xfer += $output->writeFieldBegin('TotalMessage', TType::I32, 1);
      $xfer += $output->writeI32($this->TotalMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ArrMessage !== null) {
      if (!is_array($this->ArrMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrMessage', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ArrMessage));
        {
          foreach ($this->ArrMessage as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
