<?php
/**
 * Autogenerated by Thrift Compiler (0.8.01)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Message/message_types.php';

interface gnt_server_messageServiceIf {
  public function getTotalFriendUnRead($loginID, $loginType);
  public function getListFriend($loginID, $loginType, $iOffset, $iLimit);
  public function getListFriendUnRead($loginID, $loginType, $iOffset, $iLimit);
  public function getListFriendArchive($loginID, $loginType, $iOffset, $iLimit);
  public function getListMessage($loginID, $loginType, $friendID, $iOffset, $iLimit);
  public function getListMessageByID($loginID, $loginType, $friendID, $iOffset, $iLimit, $bOrder, $messageID);
  public function setMessage($arrMessage, $loginType, $bFlag);
  public function setArchive($loginID, $loginType, $friendID);
  public function setUnArchive($loginID, $loginType, $friendID);
  public function setRead($loginID, $loginType, $friendID);
  public function setUnRead($loginID, $loginType, $friendID);
  public function delMessage($loginID, $loginType, $friendID, $messageID);
  public function delAllMessage($loginID, $loginType, $friendID);
  public function shutdown();
}

class gnt_server_messageServiceClient implements gnt_server_messageServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getTotalFriendUnRead($loginID, $loginType)
  {
    $this->send_getTotalFriendUnRead($loginID, $loginType);
    return $this->recv_getTotalFriendUnRead();
  }

  public function send_getTotalFriendUnRead($loginID, $loginType)
  {
    $args = new gnt_server_messageService_getTotalFriendUnRead_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTotalFriendUnRead', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTotalFriendUnRead', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTotalFriendUnRead()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_getTotalFriendUnRead_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_getTotalFriendUnRead_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTotalFriendUnRead failed: unknown result");
  }

  public function getListFriend($loginID, $loginType, $iOffset, $iLimit)
  {
    $this->send_getListFriend($loginID, $loginType, $iOffset, $iLimit);
    return $this->recv_getListFriend();
  }

  public function send_getListFriend($loginID, $loginType, $iOffset, $iLimit)
  {
    $args = new gnt_server_messageService_getListFriend_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->iOffset = $iOffset;
    $args->iLimit = $iLimit;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListFriend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListFriend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListFriend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_getListFriend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_getListFriend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListFriend failed: unknown result");
  }

  public function getListFriendUnRead($loginID, $loginType, $iOffset, $iLimit)
  {
    $this->send_getListFriendUnRead($loginID, $loginType, $iOffset, $iLimit);
    return $this->recv_getListFriendUnRead();
  }

  public function send_getListFriendUnRead($loginID, $loginType, $iOffset, $iLimit)
  {
    $args = new gnt_server_messageService_getListFriendUnRead_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->iOffset = $iOffset;
    $args->iLimit = $iLimit;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListFriendUnRead', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListFriendUnRead', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListFriendUnRead()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_getListFriendUnRead_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_getListFriendUnRead_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListFriendUnRead failed: unknown result");
  }

  public function getListFriendArchive($loginID, $loginType, $iOffset, $iLimit)
  {
    $this->send_getListFriendArchive($loginID, $loginType, $iOffset, $iLimit);
    return $this->recv_getListFriendArchive();
  }

  public function send_getListFriendArchive($loginID, $loginType, $iOffset, $iLimit)
  {
    $args = new gnt_server_messageService_getListFriendArchive_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->iOffset = $iOffset;
    $args->iLimit = $iLimit;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListFriendArchive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListFriendArchive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListFriendArchive()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_getListFriendArchive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_getListFriendArchive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListFriendArchive failed: unknown result");
  }

  public function getListMessage($loginID, $loginType, $friendID, $iOffset, $iLimit)
  {
    $this->send_getListMessage($loginID, $loginType, $friendID, $iOffset, $iLimit);
    return $this->recv_getListMessage();
  }

  public function send_getListMessage($loginID, $loginType, $friendID, $iOffset, $iLimit)
  {
    $args = new gnt_server_messageService_getListMessage_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $args->iOffset = $iOffset;
    $args->iLimit = $iLimit;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListMessage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_getListMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_getListMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListMessage failed: unknown result");
  }

  public function getListMessageByID($loginID, $loginType, $friendID, $iOffset, $iLimit, $bOrder, $messageID)
  {
    $this->send_getListMessageByID($loginID, $loginType, $friendID, $iOffset, $iLimit, $bOrder, $messageID);
    return $this->recv_getListMessageByID();
  }

  public function send_getListMessageByID($loginID, $loginType, $friendID, $iOffset, $iLimit, $bOrder, $messageID)
  {
    $args = new gnt_server_messageService_getListMessageByID_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $args->iOffset = $iOffset;
    $args->iLimit = $iLimit;
    $args->bOrder = $bOrder;
    $args->messageID = $messageID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListMessageByID', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListMessageByID', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListMessageByID()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_getListMessageByID_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_getListMessageByID_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListMessageByID failed: unknown result");
  }

  public function setMessage($arrMessage, $loginType, $bFlag)
  {
    $this->send_setMessage($arrMessage, $loginType, $bFlag);
    return $this->recv_setMessage();
  }

  public function send_setMessage($arrMessage, $loginType, $bFlag)
  {
    $args = new gnt_server_messageService_setMessage_args();
    $args->arrMessage = $arrMessage;
    $args->loginType = $loginType;
    $args->bFlag = $bFlag;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setMessage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_setMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_setMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setMessage failed: unknown result");
  }

  public function setArchive($loginID, $loginType, $friendID)
  {
    $this->send_setArchive($loginID, $loginType, $friendID);
    return $this->recv_setArchive();
  }

  public function send_setArchive($loginID, $loginType, $friendID)
  {
    $args = new gnt_server_messageService_setArchive_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setArchive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setArchive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setArchive()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_setArchive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_setArchive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setArchive failed: unknown result");
  }

  public function setUnArchive($loginID, $loginType, $friendID)
  {
    $this->send_setUnArchive($loginID, $loginType, $friendID);
    return $this->recv_setUnArchive();
  }

  public function send_setUnArchive($loginID, $loginType, $friendID)
  {
    $args = new gnt_server_messageService_setUnArchive_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setUnArchive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setUnArchive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setUnArchive()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_setUnArchive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_setUnArchive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setUnArchive failed: unknown result");
  }

  public function setRead($loginID, $loginType, $friendID)
  {
    $this->send_setRead($loginID, $loginType, $friendID);
    return $this->recv_setRead();
  }

  public function send_setRead($loginID, $loginType, $friendID)
  {
    $args = new gnt_server_messageService_setRead_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setRead', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setRead', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setRead()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_setRead_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_setRead_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setRead failed: unknown result");
  }

  public function setUnRead($loginID, $loginType, $friendID)
  {
    $this->send_setUnRead($loginID, $loginType, $friendID);
    return $this->recv_setUnRead();
  }

  public function send_setUnRead($loginID, $loginType, $friendID)
  {
    $args = new gnt_server_messageService_setUnRead_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setUnRead', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setUnRead', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setUnRead()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_setUnRead_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_setUnRead_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setUnRead failed: unknown result");
  }

  public function delMessage($loginID, $loginType, $friendID, $messageID)
  {
    $this->send_delMessage($loginID, $loginType, $friendID, $messageID);
    return $this->recv_delMessage();
  }

  public function send_delMessage($loginID, $loginType, $friendID, $messageID)
  {
    $args = new gnt_server_messageService_delMessage_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $args->messageID = $messageID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delMessage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_delMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_delMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delMessage failed: unknown result");
  }

  public function delAllMessage($loginID, $loginType, $friendID)
  {
    $this->send_delAllMessage($loginID, $loginType, $friendID);
    return $this->recv_delAllMessage();
  }

  public function send_delAllMessage($loginID, $loginType, $friendID)
  {
    $args = new gnt_server_messageService_delAllMessage_args();
    $args->loginID = $loginID;
    $args->loginType = $loginType;
    $args->friendID = $friendID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delAllMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delAllMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delAllMessage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_messageService_delAllMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_messageService_delAllMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delAllMessage failed: unknown result");
  }

  public function shutdown()
  {
    $this->send_shutdown();
  }

  public function send_shutdown()
  {
    $args = new gnt_server_messageService_shutdown_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'shutdown', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('shutdown', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_server_messageService_getTotalFriendUnRead_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
    }
  }

  public function getName() {
    return 'messageService_getTotalFriendUnRead_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getTotalFriendUnRead_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getTotalFriendUnRead_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_getTotalFriendUnRead_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getTotalFriendUnRead_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListFriend_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $iOffset = null;
  public $iLimit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iOffset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iLimit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['iOffset'])) {
        $this->iOffset = $vals['iOffset'];
      }
      if (isset($vals['iLimit'])) {
        $this->iLimit = $vals['iLimit'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListFriend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListFriend_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iOffset !== null) {
      $xfer += $output->writeFieldBegin('iOffset', TType::I32, 3);
      $xfer += $output->writeI32($this->iOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iLimit !== null) {
      $xfer += $output->writeFieldBegin('iLimit', TType::I32, 4);
      $xfer += $output->writeI32($this->iLimit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListFriend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_ListFriend',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListFriend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_ListFriend();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListFriend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListFriendUnRead_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $iOffset = null;
  public $iLimit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iOffset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iLimit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['iOffset'])) {
        $this->iOffset = $vals['iOffset'];
      }
      if (isset($vals['iLimit'])) {
        $this->iLimit = $vals['iLimit'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListFriendUnRead_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListFriendUnRead_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iOffset !== null) {
      $xfer += $output->writeFieldBegin('iOffset', TType::I32, 3);
      $xfer += $output->writeI32($this->iOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iLimit !== null) {
      $xfer += $output->writeFieldBegin('iLimit', TType::I32, 4);
      $xfer += $output->writeI32($this->iLimit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListFriendUnRead_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_ListFriend',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListFriendUnRead_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_ListFriend();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListFriendUnRead_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListFriendArchive_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $iOffset = null;
  public $iLimit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iOffset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iLimit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['iOffset'])) {
        $this->iOffset = $vals['iOffset'];
      }
      if (isset($vals['iLimit'])) {
        $this->iLimit = $vals['iLimit'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListFriendArchive_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListFriendArchive_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iOffset !== null) {
      $xfer += $output->writeFieldBegin('iOffset', TType::I32, 3);
      $xfer += $output->writeI32($this->iOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iLimit !== null) {
      $xfer += $output->writeFieldBegin('iLimit', TType::I32, 4);
      $xfer += $output->writeI32($this->iLimit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListFriendArchive_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_ListFriend',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListFriendArchive_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_ListFriend();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListFriendArchive_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListMessage_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;
  public $iOffset = null;
  public $iLimit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iOffset',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'iLimit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
      if (isset($vals['iOffset'])) {
        $this->iOffset = $vals['iOffset'];
      }
      if (isset($vals['iLimit'])) {
        $this->iLimit = $vals['iLimit'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListMessage_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iOffset !== null) {
      $xfer += $output->writeFieldBegin('iOffset', TType::I32, 4);
      $xfer += $output->writeI32($this->iOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iLimit !== null) {
      $xfer += $output->writeFieldBegin('iLimit', TType::I32, 5);
      $xfer += $output->writeI32($this->iLimit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListMessage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_ListMessage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_ListMessage();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListMessage_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListMessageByID_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;
  public $iOffset = null;
  public $iLimit = null;
  public $bOrder = null;
  public $messageID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iOffset',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'iLimit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'bOrder',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'messageID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
      if (isset($vals['iOffset'])) {
        $this->iOffset = $vals['iOffset'];
      }
      if (isset($vals['iLimit'])) {
        $this->iLimit = $vals['iLimit'];
      }
      if (isset($vals['bOrder'])) {
        $this->bOrder = $vals['bOrder'];
      }
      if (isset($vals['messageID'])) {
        $this->messageID = $vals['messageID'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListMessageByID_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListMessageByID_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iOffset !== null) {
      $xfer += $output->writeFieldBegin('iOffset', TType::I32, 4);
      $xfer += $output->writeI32($this->iOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iLimit !== null) {
      $xfer += $output->writeFieldBegin('iLimit', TType::I32, 5);
      $xfer += $output->writeI32($this->iLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bOrder !== null) {
      $xfer += $output->writeFieldBegin('bOrder', TType::BOOL, 6);
      $xfer += $output->writeBool($this->bOrder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageID !== null) {
      $xfer += $output->writeFieldBegin('messageID', TType::STRING, 7);
      $xfer += $output->writeString($this->messageID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_getListMessageByID_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_ListMessage',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_getListMessageByID_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_ListMessage();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_getListMessageByID_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setMessage_args {
  static $_TSPEC;

  public $arrMessage = null;
  public $loginType = null;
  public $bFlag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrMessage',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_MessageChat',
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bFlag',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrMessage'])) {
        $this->arrMessage = $vals['arrMessage'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['bFlag'])) {
        $this->bFlag = $vals['bFlag'];
      }
    }
  }

  public function getName() {
    return 'messageService_setMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->arrMessage = new gnt_server_MessageChat();
            $xfer += $this->arrMessage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bFlag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setMessage_args');
    if ($this->arrMessage !== null) {
      if (!is_object($this->arrMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrMessage', TType::STRUCT, 1);
      $xfer += $this->arrMessage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bFlag !== null) {
      $xfer += $output->writeFieldBegin('bFlag', TType::BOOL, 3);
      $xfer += $output->writeBool($this->bFlag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setMessage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_setMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = '';
              $xfer += $input->readString($key19);
              $xfer += $input->readString($val20);
              $this->success[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setMessage_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter21 => $viter22)
          {
            $xfer += $output->writeString($kiter21);
            $xfer += $output->writeString($viter22);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setArchive_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
    }
  }

  public function getName() {
    return 'messageService_setArchive_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setArchive_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setArchive_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_setArchive_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setArchive_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setUnArchive_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
    }
  }

  public function getName() {
    return 'messageService_setUnArchive_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setUnArchive_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setUnArchive_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_setUnArchive_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setUnArchive_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setRead_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
    }
  }

  public function getName() {
    return 'messageService_setRead_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setRead_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setRead_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_setRead_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setRead_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setUnRead_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
    }
  }

  public function getName() {
    return 'messageService_setUnRead_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setUnRead_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_setUnRead_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_setUnRead_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_setUnRead_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_delMessage_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;
  public $messageID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'messageID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
      if (isset($vals['messageID'])) {
        $this->messageID = $vals['messageID'];
      }
    }
  }

  public function getName() {
    return 'messageService_delMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_delMessage_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageID !== null) {
      $xfer += $output->writeFieldBegin('messageID', TType::STRING, 4);
      $xfer += $output->writeString($this->messageID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_delMessage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_delMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_delMessage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_delAllMessage_args {
  static $_TSPEC;

  public $loginID = null;
  public $loginType = null;
  public $friendID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'loginID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'friendID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['loginID'])) {
        $this->loginID = $vals['loginID'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['friendID'])) {
        $this->friendID = $vals['friendID'];
      }
    }
  }

  public function getName() {
    return 'messageService_delAllMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->friendID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_delAllMessage_args');
    if ($this->loginID !== null) {
      $xfer += $output->writeFieldBegin('loginID', TType::STRING, 1);
      $xfer += $output->writeString($this->loginID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 2);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendID !== null) {
      $xfer += $output->writeFieldBegin('friendID', TType::STRING, 3);
      $xfer += $output->writeString($this->friendID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_delAllMessage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'messageService_delAllMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_delAllMessage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_messageService_shutdown_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'messageService_shutdown_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('messageService_shutdown_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
