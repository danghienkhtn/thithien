<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Feed/Feed_types.php';

interface gnt_mobion_feed_FeedServiceIf {
  public function setFeedGroup($token, $feedData, $groupType, $appType);
  public function setFeedFollowings($token, $feedData, $appType);
  public function setFeedFollowers($token, $feedData, $appType);
  public function setFeedFollowAll($token, $feedData, $appType);
  public function setFeedFriends($token, $feedData, $appType);
}

class gnt_mobion_feed_FeedServiceClient implements gnt_mobion_feed_FeedServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function setFeedGroup($token, $feedData, $groupType, $appType)
  {
    $this->send_setFeedGroup($token, $feedData, $groupType, $appType);
  }

  public function send_setFeedGroup($token, $feedData, $groupType, $appType)
  {
    $args = new gnt_mobion_feed_FeedService_setFeedGroup_args();
    $args->token = $token;
    $args->feedData = $feedData;
    $args->groupType = $groupType;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeedGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeedGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function setFeedFollowings($token, $feedData, $appType)
  {
    $this->send_setFeedFollowings($token, $feedData, $appType);
  }

  public function send_setFeedFollowings($token, $feedData, $appType)
  {
    $args = new gnt_mobion_feed_FeedService_setFeedFollowings_args();
    $args->token = $token;
    $args->feedData = $feedData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeedFollowings', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeedFollowings', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function setFeedFollowers($token, $feedData, $appType)
  {
    $this->send_setFeedFollowers($token, $feedData, $appType);
  }

  public function send_setFeedFollowers($token, $feedData, $appType)
  {
    $args = new gnt_mobion_feed_FeedService_setFeedFollowers_args();
    $args->token = $token;
    $args->feedData = $feedData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeedFollowers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeedFollowers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function setFeedFollowAll($token, $feedData, $appType)
  {
    $this->send_setFeedFollowAll($token, $feedData, $appType);
  }

  public function send_setFeedFollowAll($token, $feedData, $appType)
  {
    $args = new gnt_mobion_feed_FeedService_setFeedFollowAll_args();
    $args->token = $token;
    $args->feedData = $feedData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeedFollowAll', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeedFollowAll', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function setFeedFriends($token, $feedData, $appType)
  {
    $this->send_setFeedFriends($token, $feedData, $appType);
  }

  public function send_setFeedFriends($token, $feedData, $appType)
  {
    $args = new gnt_mobion_feed_FeedService_setFeedFriends_args();
    $args->token = $token;
    $args->feedData = $feedData;
    $args->appType = $appType;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setFeedFriends', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setFeedFriends', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_feed_FeedService_setFeedGroup_args {
  static $_TSPEC;

  public $token = null;
  public $feedData = null;
  public $groupType = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'feedData',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'groupType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['feedData'])) {
        $this->feedData = $vals['feedData'];
      }
      if (isset($vals['groupType'])) {
        $this->groupType = $vals['groupType'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'FeedService_setFeedGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedService_setFeedGroup_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedData !== null) {
      $xfer += $output->writeFieldBegin('feedData', TType::STRING, 2);
      $xfer += $output->writeString($this->feedData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupType !== null) {
      $xfer += $output->writeFieldBegin('groupType', TType::I32, 3);
      $xfer += $output->writeI32($this->groupType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 4);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_feed_FeedService_setFeedFollowings_args {
  static $_TSPEC;

  public $token = null;
  public $feedData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'feedData',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['feedData'])) {
        $this->feedData = $vals['feedData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'FeedService_setFeedFollowings_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedService_setFeedFollowings_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedData !== null) {
      $xfer += $output->writeFieldBegin('feedData', TType::STRING, 2);
      $xfer += $output->writeString($this->feedData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 3);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_feed_FeedService_setFeedFollowers_args {
  static $_TSPEC;

  public $token = null;
  public $feedData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'feedData',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['feedData'])) {
        $this->feedData = $vals['feedData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'FeedService_setFeedFollowers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedService_setFeedFollowers_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedData !== null) {
      $xfer += $output->writeFieldBegin('feedData', TType::STRING, 2);
      $xfer += $output->writeString($this->feedData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 3);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_feed_FeedService_setFeedFollowAll_args {
  static $_TSPEC;

  public $token = null;
  public $feedData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'feedData',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['feedData'])) {
        $this->feedData = $vals['feedData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'FeedService_setFeedFollowAll_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedService_setFeedFollowAll_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedData !== null) {
      $xfer += $output->writeFieldBegin('feedData', TType::STRING, 2);
      $xfer += $output->writeString($this->feedData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 3);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_feed_FeedService_setFeedFriends_args {
  static $_TSPEC;

  public $token = null;
  public $feedData = null;
  public $appType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'feedData',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'appType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['feedData'])) {
        $this->feedData = $vals['feedData'];
      }
      if (isset($vals['appType'])) {
        $this->appType = $vals['appType'];
      }
    }
  }

  public function getName() {
    return 'FeedService_setFeedFriends_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feedData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->appType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FeedService_setFeedFriends_args');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feedData !== null) {
      $xfer += $output->writeFieldBegin('feedData', TType::STRING, 2);
      $xfer += $output->writeString($this->feedData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appType !== null) {
      $xfer += $output->writeFieldBegin('appType', TType::I32, 3);
      $xfer += $output->writeI32($this->appType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
