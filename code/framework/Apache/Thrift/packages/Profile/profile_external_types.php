<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Profile/profile_common_types.php';

$GLOBALS['gnt_mobion_storage_profile_E_EnumConnection'] = array(
  'None' => 0,
  'Following' => 1,
  'Follower' => 2,
  'MutualFollowing' => 3,
  'Mate' => 4,
  'All' => 65535,
);

final class EnumConnection {
  const None = 0;
  const Following = 1;
  const Follower = 2;
  const MutualFollowing = 3;
  const Mate = 4;
  const All = 65535;
  static public $__names = array(
    0 => 'None',
    1 => 'Following',
    2 => 'Follower',
    3 => 'MutualFollowing',
    4 => 'Mate',
    65535 => 'All',
  );
}

$GLOBALS['gnt_mobion_storage_profile_E_ProfileSearchType'] = array(
  'Following' => 0,
  'Follower' => 1,
  'Friend' => 2,
  'User' => 3,
);

final class ProfileSearchType {
  const Following = 0;
  const Follower = 1;
  const Friend = 2;
  const User = 3;
  static public $__names = array(
    0 => 'Following',
    1 => 'Follower',
    2 => 'Friend',
    3 => 'User',
  );
}

$GLOBALS['gnt_mobion_storage_profile_E_EnumField'] = array(
  'Facebook' => 0,
  'Google' => 1,
  'Twitter' => 2,
  'Mixi' => 3,
  'Email' => 1001,
  'UrlId' => 1002,
);

final class EnumField {
  const Facebook = 0;
  const Google = 1;
  const Twitter = 2;
  const Mixi = 3;
  const Email = 1001;
  const UrlId = 1002;
  static public $__names = array(
    0 => 'Facebook',
    1 => 'Google',
    2 => 'Twitter',
    3 => 'Mixi',
    1001 => 'Email',
    1002 => 'UrlId',
  );
}

$GLOBALS['gnt_mobion_storage_profile_E_EnumFriendSuggestion'] = array(
  'SuggestFriends' => 1,
  'SuggestFollowers' => 2,
  'SuggestGenericOffset' => 1000,
);

final class EnumFriendSuggestion {
  const SuggestFriends = 1;
  const SuggestFollowers = 2;
  const SuggestGenericOffset = 1000;
  static public $__names = array(
    1 => 'SuggestFriends',
    2 => 'SuggestFollowers',
    1000 => 'SuggestGenericOffset',
  );
}

class gnt_mobion_storage_profile_FSSuggestEntry {
  static $_TSPEC;

  public $score = null;
  public $reasons = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'score',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'reasons',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['score'])) {
        $this->score = $vals['score'];
      }
      if (isset($vals['reasons'])) {
        $this->reasons = $vals['reasons'];
      }
    }
  }

  public function getName() {
    return 'FSSuggestEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->score);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->reasons = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->reasons []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FSSuggestEntry');
    if ($this->score !== null) {
      $xfer += $output->writeFieldBegin('score', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->score);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reasons !== null) {
      if (!is_array($this->reasons)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reasons', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->reasons));
        {
          foreach ($this->reasons as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_UserProfileEx {
  static $_TSPEC;

  public $email = null;
  public $is_left = false;
  public $creation_date = null;
  public $verified = null;
  public $nickname = null;
  public $activation = null;
  public $urlid = null;
  public $reg_ip = null;
  public $reg_phone_number = null;
  public $devices = null;
  public $locale = null;
  public $first_name = null;
  public $last_name = null;
  public $middle_name = null;
  public $gender =   0;
  public $birthdate = null;
  public $hometown = null;
  public $avatar_formal_photoid = null;
  public $avatar_formal_ext = null;
  public $avatar_informal_photoid = null;
  public $avatar_informal_ext = null;
  public $cover_photoid = null;
  public $cover_photo_ext = null;
  public $pos_pc = null;
  public $pos_sp = null;
  public $country = null;
  public $city = null;
  public $region_code = null;
  public $region_name = null;
  public $metro_code = null;
  public $area_code = null;
  public $timezone = null;
  public $postal_code = null;
  public $languages = null;
  public $position = null;
  public $lat = null;
  public $lon = null;
  public $highschool = null;
  public $college = null;
  public $education = null;
  public $work = null;
  public $relationship =   0;
  public $interested_in = null;
  public $significant_other = null;
  public $aboutme = null;
  public $message = null;
  public $hobbies = null;
  public $books = null;
  public $movies = null;
  public $music = null;
  public $television = null;
  public $sports = null;
  public $games = null;
  public $quotes = null;
  public $website = null;
  public $phone_number = null;
  public $social_ids = null;
  public $reset_code = null;
  public $tokens = null;
  public $updated_time = null;
  public $privacy_settings = null;
  public $public_misc_json = null;
  public $personal_misc_json = null;
  public $interests = null;
  public $accountid = null;
  public $is_banned = null;
  public $connection_to_requester = null;
  public $connection_to_requester_str = null;
  public $requested = null;
  public $online_follower_count = null;
  public $online_following_count = null;
  public $offline_friend_count = null;
  public $login_count = null;
  public $last_action = null;
  public $last_time = null;
  public $requesting = null;
  public $suggestion_detail = null;
  public $recent_avatar_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_left',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'creation_date',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'verified',
          'type' => TType::BYTE,
          ),
        7 => array(
          'var' => 'nickname',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'activation',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'urlid',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'reg_ip',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'reg_phone_number',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'devices',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        13 => array(
          'var' => 'locale',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'first_name',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'last_name',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'middle_name',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'birthdate',
          'type' => TType::STRING,
          ),
        35 => array(
          'var' => 'hometown',
          'type' => TType::STRING,
          ),
        36 => array(
          'var' => 'avatar_formal_photoid',
          'type' => TType::STRING,
          ),
        37 => array(
          'var' => 'avatar_formal_ext',
          'type' => TType::STRING,
          ),
        38 => array(
          'var' => 'avatar_informal_photoid',
          'type' => TType::STRING,
          ),
        39 => array(
          'var' => 'avatar_informal_ext',
          'type' => TType::STRING,
          ),
        40 => array(
          'var' => 'cover_photoid',
          'type' => TType::STRING,
          ),
        41 => array(
          'var' => 'cover_photo_ext',
          'type' => TType::STRING,
          ),
        42 => array(
          'var' => 'pos_pc',
          'type' => TType::STRING,
          ),
        43 => array(
          'var' => 'pos_sp',
          'type' => TType::STRING,
          ),
        50 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        51 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        52 => array(
          'var' => 'region_code',
          'type' => TType::STRING,
          ),
        53 => array(
          'var' => 'region_name',
          'type' => TType::STRING,
          ),
        54 => array(
          'var' => 'metro_code',
          'type' => TType::STRING,
          ),
        55 => array(
          'var' => 'area_code',
          'type' => TType::STRING,
          ),
        56 => array(
          'var' => 'timezone',
          'type' => TType::STRING,
          ),
        57 => array(
          'var' => 'postal_code',
          'type' => TType::STRING,
          ),
        58 => array(
          'var' => 'languages',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        59 => array(
          'var' => 'position',
          'type' => TType::STRING,
          ),
        60 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        61 => array(
          'var' => 'lon',
          'type' => TType::DOUBLE,
          ),
        80 => array(
          'var' => 'highschool',
          'type' => TType::STRING,
          ),
        81 => array(
          'var' => 'college',
          'type' => TType::STRING,
          ),
        82 => array(
          'var' => 'education',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        83 => array(
          'var' => 'work',
          'type' => TType::STRING,
          ),
        84 => array(
          'var' => 'relationship',
          'type' => TType::I32,
          ),
        85 => array(
          'var' => 'interested_in',
          'type' => TType::STRING,
          ),
        86 => array(
          'var' => 'significant_other',
          'type' => TType::STRING,
          ),
        87 => array(
          'var' => 'aboutme',
          'type' => TType::STRING,
          ),
        88 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        89 => array(
          'var' => 'hobbies',
          'type' => TType::STRING,
          ),
        90 => array(
          'var' => 'books',
          'type' => TType::STRING,
          ),
        91 => array(
          'var' => 'movies',
          'type' => TType::STRING,
          ),
        92 => array(
          'var' => 'music',
          'type' => TType::STRING,
          ),
        93 => array(
          'var' => 'television',
          'type' => TType::STRING,
          ),
        94 => array(
          'var' => 'sports',
          'type' => TType::STRING,
          ),
        95 => array(
          'var' => 'games',
          'type' => TType::STRING,
          ),
        96 => array(
          'var' => 'quotes',
          'type' => TType::STRING,
          ),
        97 => array(
          'var' => 'website',
          'type' => TType::STRING,
          ),
        98 => array(
          'var' => 'phone_number',
          'type' => TType::STRING,
          ),
        150 => array(
          'var' => 'social_ids',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        153 => array(
          'var' => 'reset_code',
          'type' => TType::STRING,
          ),
        155 => array(
          'var' => 'tokens',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_profile_TokenDetail',
            ),
          ),
        156 => array(
          'var' => 'updated_time',
          'type' => TType::I64,
          ),
        157 => array(
          'var' => 'privacy_settings',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        158 => array(
          'var' => 'public_misc_json',
          'type' => TType::STRING,
          ),
        159 => array(
          'var' => 'personal_misc_json',
          'type' => TType::STRING,
          ),
        160 => array(
          'var' => 'interests',
          'type' => TType::I32,
          ),
        200 => array(
          'var' => 'accountid',
          'type' => TType::I64,
          ),
        201 => array(
          'var' => 'is_banned',
          'type' => TType::BOOL,
          ),
        202 => array(
          'var' => 'connection_to_requester',
          'type' => TType::I32,
          ),
        203 => array(
          'var' => 'connection_to_requester_str',
          'type' => TType::STRING,
          ),
        204 => array(
          'var' => 'requested',
          'type' => TType::I32,
          ),
        205 => array(
          'var' => 'online_follower_count',
          'type' => TType::I32,
          ),
        206 => array(
          'var' => 'online_following_count',
          'type' => TType::I32,
          ),
        207 => array(
          'var' => 'offline_friend_count',
          'type' => TType::I32,
          ),
        208 => array(
          'var' => 'login_count',
          'type' => TType::I32,
          ),
        209 => array(
          'var' => 'last_action',
          'type' => TType::BYTE,
          ),
        210 => array(
          'var' => 'last_time',
          'type' => TType::I64,
          ),
        211 => array(
          'var' => 'requesting',
          'type' => TType::I32,
          ),
        300 => array(
          'var' => 'suggestion_detail',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_FSSuggestEntry',
          ),
        301 => array(
          'var' => 'recent_avatar_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_profile_RecentAvatar',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['is_left'])) {
        $this->is_left = $vals['is_left'];
      }
      if (isset($vals['creation_date'])) {
        $this->creation_date = $vals['creation_date'];
      }
      if (isset($vals['verified'])) {
        $this->verified = $vals['verified'];
      }
      if (isset($vals['nickname'])) {
        $this->nickname = $vals['nickname'];
      }
      if (isset($vals['activation'])) {
        $this->activation = $vals['activation'];
      }
      if (isset($vals['urlid'])) {
        $this->urlid = $vals['urlid'];
      }
      if (isset($vals['reg_ip'])) {
        $this->reg_ip = $vals['reg_ip'];
      }
      if (isset($vals['reg_phone_number'])) {
        $this->reg_phone_number = $vals['reg_phone_number'];
      }
      if (isset($vals['devices'])) {
        $this->devices = $vals['devices'];
      }
      if (isset($vals['locale'])) {
        $this->locale = $vals['locale'];
      }
      if (isset($vals['first_name'])) {
        $this->first_name = $vals['first_name'];
      }
      if (isset($vals['last_name'])) {
        $this->last_name = $vals['last_name'];
      }
      if (isset($vals['middle_name'])) {
        $this->middle_name = $vals['middle_name'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['birthdate'])) {
        $this->birthdate = $vals['birthdate'];
      }
      if (isset($vals['hometown'])) {
        $this->hometown = $vals['hometown'];
      }
      if (isset($vals['avatar_formal_photoid'])) {
        $this->avatar_formal_photoid = $vals['avatar_formal_photoid'];
      }
      if (isset($vals['avatar_formal_ext'])) {
        $this->avatar_formal_ext = $vals['avatar_formal_ext'];
      }
      if (isset($vals['avatar_informal_photoid'])) {
        $this->avatar_informal_photoid = $vals['avatar_informal_photoid'];
      }
      if (isset($vals['avatar_informal_ext'])) {
        $this->avatar_informal_ext = $vals['avatar_informal_ext'];
      }
      if (isset($vals['cover_photoid'])) {
        $this->cover_photoid = $vals['cover_photoid'];
      }
      if (isset($vals['cover_photo_ext'])) {
        $this->cover_photo_ext = $vals['cover_photo_ext'];
      }
      if (isset($vals['pos_pc'])) {
        $this->pos_pc = $vals['pos_pc'];
      }
      if (isset($vals['pos_sp'])) {
        $this->pos_sp = $vals['pos_sp'];
      }
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['region_code'])) {
        $this->region_code = $vals['region_code'];
      }
      if (isset($vals['region_name'])) {
        $this->region_name = $vals['region_name'];
      }
      if (isset($vals['metro_code'])) {
        $this->metro_code = $vals['metro_code'];
      }
      if (isset($vals['area_code'])) {
        $this->area_code = $vals['area_code'];
      }
      if (isset($vals['timezone'])) {
        $this->timezone = $vals['timezone'];
      }
      if (isset($vals['postal_code'])) {
        $this->postal_code = $vals['postal_code'];
      }
      if (isset($vals['languages'])) {
        $this->languages = $vals['languages'];
      }
      if (isset($vals['position'])) {
        $this->position = $vals['position'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lon'])) {
        $this->lon = $vals['lon'];
      }
      if (isset($vals['highschool'])) {
        $this->highschool = $vals['highschool'];
      }
      if (isset($vals['college'])) {
        $this->college = $vals['college'];
      }
      if (isset($vals['education'])) {
        $this->education = $vals['education'];
      }
      if (isset($vals['work'])) {
        $this->work = $vals['work'];
      }
      if (isset($vals['relationship'])) {
        $this->relationship = $vals['relationship'];
      }
      if (isset($vals['interested_in'])) {
        $this->interested_in = $vals['interested_in'];
      }
      if (isset($vals['significant_other'])) {
        $this->significant_other = $vals['significant_other'];
      }
      if (isset($vals['aboutme'])) {
        $this->aboutme = $vals['aboutme'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['hobbies'])) {
        $this->hobbies = $vals['hobbies'];
      }
      if (isset($vals['books'])) {
        $this->books = $vals['books'];
      }
      if (isset($vals['movies'])) {
        $this->movies = $vals['movies'];
      }
      if (isset($vals['music'])) {
        $this->music = $vals['music'];
      }
      if (isset($vals['television'])) {
        $this->television = $vals['television'];
      }
      if (isset($vals['sports'])) {
        $this->sports = $vals['sports'];
      }
      if (isset($vals['games'])) {
        $this->games = $vals['games'];
      }
      if (isset($vals['quotes'])) {
        $this->quotes = $vals['quotes'];
      }
      if (isset($vals['website'])) {
        $this->website = $vals['website'];
      }
      if (isset($vals['phone_number'])) {
        $this->phone_number = $vals['phone_number'];
      }
      if (isset($vals['social_ids'])) {
        $this->social_ids = $vals['social_ids'];
      }
      if (isset($vals['reset_code'])) {
        $this->reset_code = $vals['reset_code'];
      }
      if (isset($vals['tokens'])) {
        $this->tokens = $vals['tokens'];
      }
      if (isset($vals['updated_time'])) {
        $this->updated_time = $vals['updated_time'];
      }
      if (isset($vals['privacy_settings'])) {
        $this->privacy_settings = $vals['privacy_settings'];
      }
      if (isset($vals['public_misc_json'])) {
        $this->public_misc_json = $vals['public_misc_json'];
      }
      if (isset($vals['personal_misc_json'])) {
        $this->personal_misc_json = $vals['personal_misc_json'];
      }
      if (isset($vals['interests'])) {
        $this->interests = $vals['interests'];
      }
      if (isset($vals['accountid'])) {
        $this->accountid = $vals['accountid'];
      }
      if (isset($vals['is_banned'])) {
        $this->is_banned = $vals['is_banned'];
      }
      if (isset($vals['connection_to_requester'])) {
        $this->connection_to_requester = $vals['connection_to_requester'];
      }
      if (isset($vals['connection_to_requester_str'])) {
        $this->connection_to_requester_str = $vals['connection_to_requester_str'];
      }
      if (isset($vals['requested'])) {
        $this->requested = $vals['requested'];
      }
      if (isset($vals['online_follower_count'])) {
        $this->online_follower_count = $vals['online_follower_count'];
      }
      if (isset($vals['online_following_count'])) {
        $this->online_following_count = $vals['online_following_count'];
      }
      if (isset($vals['offline_friend_count'])) {
        $this->offline_friend_count = $vals['offline_friend_count'];
      }
      if (isset($vals['login_count'])) {
        $this->login_count = $vals['login_count'];
      }
      if (isset($vals['last_action'])) {
        $this->last_action = $vals['last_action'];
      }
      if (isset($vals['last_time'])) {
        $this->last_time = $vals['last_time'];
      }
      if (isset($vals['requesting'])) {
        $this->requesting = $vals['requesting'];
      }
      if (isset($vals['suggestion_detail'])) {
        $this->suggestion_detail = $vals['suggestion_detail'];
      }
      if (isset($vals['recent_avatar_list'])) {
        $this->recent_avatar_list = $vals['recent_avatar_list'];
      }
    }
  }

  public function getName() {
    return 'UserProfileEx';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->creation_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->verified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->activation);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->urlid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg_phone_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->devices = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->devices []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->locale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->first_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middle_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->birthdate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hometown);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_formal_photoid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_formal_ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_informal_photoid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar_informal_ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cover_photoid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cover_photo_ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pos_pc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pos_sp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->region_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 54:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->metro_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 55:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->area_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 56:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timezone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 57:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->postal_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 58:
          if ($ftype == TType::LST) {
            $this->languages = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $xfer += $input->readString($elem18);
              $this->languages []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 59:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->position);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 61:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 80:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->highschool);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 81:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->college);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 82:
          if ($ftype == TType::LST) {
            $this->education = array();
            $_size19 = 0;
            $_etype22 = 0;
            $xfer += $input->readListBegin($_etype22, $_size19);
            for ($_i23 = 0; $_i23 < $_size19; ++$_i23)
            {
              $elem24 = null;
              $xfer += $input->readString($elem24);
              $this->education []= $elem24;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 83:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->work);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 84:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->relationship);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 85:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->interested_in);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 86:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->significant_other);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 87:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->aboutme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 88:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 89:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hobbies);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 90:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->books);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 91:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->movies);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 92:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->music);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 93:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->television);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 94:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sports);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 95:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->games);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 96:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->quotes);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 97:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->website);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 98:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone_number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 150:
          if ($ftype == TType::MAP) {
            $this->social_ids = array();
            $_size25 = 0;
            $_ktype26 = 0;
            $_vtype27 = 0;
            $xfer += $input->readMapBegin($_ktype26, $_vtype27, $_size25);
            for ($_i29 = 0; $_i29 < $_size25; ++$_i29)
            {
              $key30 = 0;
              $val31 = '';
              $xfer += $input->readI32($key30);
              $xfer += $input->readString($val31);
              $this->social_ids[$key30] = $val31;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 153:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reset_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 155:
          if ($ftype == TType::MAP) {
            $this->tokens = array();
            $_size32 = 0;
            $_ktype33 = 0;
            $_vtype34 = 0;
            $xfer += $input->readMapBegin($_ktype33, $_vtype34, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $key37 = '';
              $val38 = new gnt_mobion_storage_profile_TokenDetail();
              $xfer += $input->readString($key37);
              $val38 = new gnt_mobion_storage_profile_TokenDetail();
              $xfer += $val38->read($input);
              $this->tokens[$key37] = $val38;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 156:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updated_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 157:
          if ($ftype == TType::LST) {
            $this->privacy_settings = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $xfer += $input->readI64($elem44);
              $this->privacy_settings []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 158:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->public_misc_json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 159:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->personal_misc_json);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 160:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->interests);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 200:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 201:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_banned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 202:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->connection_to_requester);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 203:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connection_to_requester_str);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 204:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->requested);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 205:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->online_follower_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 206:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->online_following_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 207:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->offline_friend_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 208:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->login_count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 209:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->last_action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 210:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->last_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 211:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->requesting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 300:
          if ($ftype == TType::STRUCT) {
            $this->suggestion_detail = new gnt_mobion_storage_profile_FSSuggestEntry();
            $xfer += $this->suggestion_detail->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 301:
          if ($ftype == TType::LST) {
            $this->recent_avatar_list = array();
            $_size45 = 0;
            $_etype48 = 0;
            $xfer += $input->readListBegin($_etype48, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $elem50 = null;
              $elem50 = new gnt_mobion_storage_profile_RecentAvatar();
              $xfer += $elem50->read($input);
              $this->recent_avatar_list []= $elem50;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserProfileEx');
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 1);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_left !== null) {
      $xfer += $output->writeFieldBegin('is_left', TType::BOOL, 4);
      $xfer += $output->writeBool($this->is_left);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creation_date !== null) {
      $xfer += $output->writeFieldBegin('creation_date', TType::I64, 5);
      $xfer += $output->writeI64($this->creation_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verified !== null) {
      $xfer += $output->writeFieldBegin('verified', TType::BYTE, 6);
      $xfer += $output->writeByte($this->verified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickname !== null) {
      $xfer += $output->writeFieldBegin('nickname', TType::STRING, 7);
      $xfer += $output->writeString($this->nickname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activation !== null) {
      $xfer += $output->writeFieldBegin('activation', TType::BOOL, 8);
      $xfer += $output->writeBool($this->activation);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->urlid !== null) {
      $xfer += $output->writeFieldBegin('urlid', TType::STRING, 9);
      $xfer += $output->writeString($this->urlid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_ip !== null) {
      $xfer += $output->writeFieldBegin('reg_ip', TType::STRING, 10);
      $xfer += $output->writeString($this->reg_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_phone_number !== null) {
      $xfer += $output->writeFieldBegin('reg_phone_number', TType::STRING, 11);
      $xfer += $output->writeString($this->reg_phone_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->devices !== null) {
      if (!is_array($this->devices)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('devices', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRING, count($this->devices));
        {
          foreach ($this->devices as $iter51)
          {
            $xfer += $output->writeString($iter51);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->locale !== null) {
      $xfer += $output->writeFieldBegin('locale', TType::STRING, 13);
      $xfer += $output->writeString($this->locale);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->first_name !== null) {
      $xfer += $output->writeFieldBegin('first_name', TType::STRING, 30);
      $xfer += $output->writeString($this->first_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_name !== null) {
      $xfer += $output->writeFieldBegin('last_name', TType::STRING, 31);
      $xfer += $output->writeString($this->last_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middle_name !== null) {
      $xfer += $output->writeFieldBegin('middle_name', TType::STRING, 32);
      $xfer += $output->writeString($this->middle_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 33);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birthdate !== null) {
      $xfer += $output->writeFieldBegin('birthdate', TType::STRING, 34);
      $xfer += $output->writeString($this->birthdate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hometown !== null) {
      $xfer += $output->writeFieldBegin('hometown', TType::STRING, 35);
      $xfer += $output->writeString($this->hometown);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_formal_photoid !== null) {
      $xfer += $output->writeFieldBegin('avatar_formal_photoid', TType::STRING, 36);
      $xfer += $output->writeString($this->avatar_formal_photoid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_formal_ext !== null) {
      $xfer += $output->writeFieldBegin('avatar_formal_ext', TType::STRING, 37);
      $xfer += $output->writeString($this->avatar_formal_ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_informal_photoid !== null) {
      $xfer += $output->writeFieldBegin('avatar_informal_photoid', TType::STRING, 38);
      $xfer += $output->writeString($this->avatar_informal_photoid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_informal_ext !== null) {
      $xfer += $output->writeFieldBegin('avatar_informal_ext', TType::STRING, 39);
      $xfer += $output->writeString($this->avatar_informal_ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cover_photoid !== null) {
      $xfer += $output->writeFieldBegin('cover_photoid', TType::STRING, 40);
      $xfer += $output->writeString($this->cover_photoid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cover_photo_ext !== null) {
      $xfer += $output->writeFieldBegin('cover_photo_ext', TType::STRING, 41);
      $xfer += $output->writeString($this->cover_photo_ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pos_pc !== null) {
      $xfer += $output->writeFieldBegin('pos_pc', TType::STRING, 42);
      $xfer += $output->writeString($this->pos_pc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pos_sp !== null) {
      $xfer += $output->writeFieldBegin('pos_sp', TType::STRING, 43);
      $xfer += $output->writeString($this->pos_sp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 50);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 51);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region_code !== null) {
      $xfer += $output->writeFieldBegin('region_code', TType::STRING, 52);
      $xfer += $output->writeString($this->region_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region_name !== null) {
      $xfer += $output->writeFieldBegin('region_name', TType::STRING, 53);
      $xfer += $output->writeString($this->region_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->metro_code !== null) {
      $xfer += $output->writeFieldBegin('metro_code', TType::STRING, 54);
      $xfer += $output->writeString($this->metro_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->area_code !== null) {
      $xfer += $output->writeFieldBegin('area_code', TType::STRING, 55);
      $xfer += $output->writeString($this->area_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timezone !== null) {
      $xfer += $output->writeFieldBegin('timezone', TType::STRING, 56);
      $xfer += $output->writeString($this->timezone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postal_code !== null) {
      $xfer += $output->writeFieldBegin('postal_code', TType::STRING, 57);
      $xfer += $output->writeString($this->postal_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->languages !== null) {
      if (!is_array($this->languages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('languages', TType::LST, 58);
      {
        $output->writeListBegin(TType::STRING, count($this->languages));
        {
          foreach ($this->languages as $iter52)
          {
            $xfer += $output->writeString($iter52);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->position !== null) {
      $xfer += $output->writeFieldBegin('position', TType::STRING, 59);
      $xfer += $output->writeString($this->position);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::DOUBLE, 60);
      $xfer += $output->writeDouble($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lon !== null) {
      $xfer += $output->writeFieldBegin('lon', TType::DOUBLE, 61);
      $xfer += $output->writeDouble($this->lon);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->highschool !== null) {
      $xfer += $output->writeFieldBegin('highschool', TType::STRING, 80);
      $xfer += $output->writeString($this->highschool);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->college !== null) {
      $xfer += $output->writeFieldBegin('college', TType::STRING, 81);
      $xfer += $output->writeString($this->college);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->education !== null) {
      if (!is_array($this->education)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('education', TType::LST, 82);
      {
        $output->writeListBegin(TType::STRING, count($this->education));
        {
          foreach ($this->education as $iter53)
          {
            $xfer += $output->writeString($iter53);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work !== null) {
      $xfer += $output->writeFieldBegin('work', TType::STRING, 83);
      $xfer += $output->writeString($this->work);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relationship !== null) {
      $xfer += $output->writeFieldBegin('relationship', TType::I32, 84);
      $xfer += $output->writeI32($this->relationship);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interested_in !== null) {
      $xfer += $output->writeFieldBegin('interested_in', TType::STRING, 85);
      $xfer += $output->writeString($this->interested_in);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->significant_other !== null) {
      $xfer += $output->writeFieldBegin('significant_other', TType::STRING, 86);
      $xfer += $output->writeString($this->significant_other);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aboutme !== null) {
      $xfer += $output->writeFieldBegin('aboutme', TType::STRING, 87);
      $xfer += $output->writeString($this->aboutme);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 88);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hobbies !== null) {
      $xfer += $output->writeFieldBegin('hobbies', TType::STRING, 89);
      $xfer += $output->writeString($this->hobbies);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->books !== null) {
      $xfer += $output->writeFieldBegin('books', TType::STRING, 90);
      $xfer += $output->writeString($this->books);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->movies !== null) {
      $xfer += $output->writeFieldBegin('movies', TType::STRING, 91);
      $xfer += $output->writeString($this->movies);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->music !== null) {
      $xfer += $output->writeFieldBegin('music', TType::STRING, 92);
      $xfer += $output->writeString($this->music);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->television !== null) {
      $xfer += $output->writeFieldBegin('television', TType::STRING, 93);
      $xfer += $output->writeString($this->television);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sports !== null) {
      $xfer += $output->writeFieldBegin('sports', TType::STRING, 94);
      $xfer += $output->writeString($this->sports);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->games !== null) {
      $xfer += $output->writeFieldBegin('games', TType::STRING, 95);
      $xfer += $output->writeString($this->games);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quotes !== null) {
      $xfer += $output->writeFieldBegin('quotes', TType::STRING, 96);
      $xfer += $output->writeString($this->quotes);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->website !== null) {
      $xfer += $output->writeFieldBegin('website', TType::STRING, 97);
      $xfer += $output->writeString($this->website);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone_number !== null) {
      $xfer += $output->writeFieldBegin('phone_number', TType::STRING, 98);
      $xfer += $output->writeString($this->phone_number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->social_ids !== null) {
      if (!is_array($this->social_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('social_ids', TType::MAP, 150);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->social_ids));
        {
          foreach ($this->social_ids as $kiter54 => $viter55)
          {
            $xfer += $output->writeI32($kiter54);
            $xfer += $output->writeString($viter55);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reset_code !== null) {
      $xfer += $output->writeFieldBegin('reset_code', TType::STRING, 153);
      $xfer += $output->writeString($this->reset_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokens !== null) {
      if (!is_array($this->tokens)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tokens', TType::MAP, 155);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->tokens));
        {
          foreach ($this->tokens as $kiter56 => $viter57)
          {
            $xfer += $output->writeString($kiter56);
            $xfer += $viter57->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_time !== null) {
      $xfer += $output->writeFieldBegin('updated_time', TType::I64, 156);
      $xfer += $output->writeI64($this->updated_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacy_settings !== null) {
      if (!is_array($this->privacy_settings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('privacy_settings', TType::LST, 157);
      {
        $output->writeListBegin(TType::I64, count($this->privacy_settings));
        {
          foreach ($this->privacy_settings as $iter58)
          {
            $xfer += $output->writeI64($iter58);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->public_misc_json !== null) {
      $xfer += $output->writeFieldBegin('public_misc_json', TType::STRING, 158);
      $xfer += $output->writeString($this->public_misc_json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personal_misc_json !== null) {
      $xfer += $output->writeFieldBegin('personal_misc_json', TType::STRING, 159);
      $xfer += $output->writeString($this->personal_misc_json);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->interests !== null) {
      $xfer += $output->writeFieldBegin('interests', TType::I32, 160);
      $xfer += $output->writeI32($this->interests);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountid !== null) {
      $xfer += $output->writeFieldBegin('accountid', TType::I64, 200);
      $xfer += $output->writeI64($this->accountid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_banned !== null) {
      $xfer += $output->writeFieldBegin('is_banned', TType::BOOL, 201);
      $xfer += $output->writeBool($this->is_banned);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_to_requester !== null) {
      $xfer += $output->writeFieldBegin('connection_to_requester', TType::I32, 202);
      $xfer += $output->writeI32($this->connection_to_requester);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connection_to_requester_str !== null) {
      $xfer += $output->writeFieldBegin('connection_to_requester_str', TType::STRING, 203);
      $xfer += $output->writeString($this->connection_to_requester_str);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requested !== null) {
      $xfer += $output->writeFieldBegin('requested', TType::I32, 204);
      $xfer += $output->writeI32($this->requested);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->online_follower_count !== null) {
      $xfer += $output->writeFieldBegin('online_follower_count', TType::I32, 205);
      $xfer += $output->writeI32($this->online_follower_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->online_following_count !== null) {
      $xfer += $output->writeFieldBegin('online_following_count', TType::I32, 206);
      $xfer += $output->writeI32($this->online_following_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offline_friend_count !== null) {
      $xfer += $output->writeFieldBegin('offline_friend_count', TType::I32, 207);
      $xfer += $output->writeI32($this->offline_friend_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->login_count !== null) {
      $xfer += $output->writeFieldBegin('login_count', TType::I32, 208);
      $xfer += $output->writeI32($this->login_count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_action !== null) {
      $xfer += $output->writeFieldBegin('last_action', TType::BYTE, 209);
      $xfer += $output->writeByte($this->last_action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_time !== null) {
      $xfer += $output->writeFieldBegin('last_time', TType::I64, 210);
      $xfer += $output->writeI64($this->last_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requesting !== null) {
      $xfer += $output->writeFieldBegin('requesting', TType::I32, 211);
      $xfer += $output->writeI32($this->requesting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->suggestion_detail !== null) {
      if (!is_object($this->suggestion_detail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('suggestion_detail', TType::STRUCT, 300);
      $xfer += $this->suggestion_detail->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recent_avatar_list !== null) {
      if (!is_array($this->recent_avatar_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('recent_avatar_list', TType::LST, 301);
      {
        $output->writeListBegin(TType::STRUCT, count($this->recent_avatar_list));
        {
          foreach ($this->recent_avatar_list as $iter59)
          {
            $xfer += $iter59->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_ErrorStatus {
  static $_TSPEC;

  public $status_code = null;
  public $msg = null;
  public $msg_detail = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg_detail',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status_code'])) {
        $this->status_code = $vals['status_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msg_detail'])) {
        $this->msg_detail = $vals['msg_detail'];
      }
    }
  }

  public function getName() {
    return 'ErrorStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg_detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ErrorStatus');
    if ($this->status_code !== null) {
      $xfer += $output->writeFieldBegin('status_code', TType::I32, 1);
      $xfer += $output->writeI32($this->status_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_detail !== null) {
      $xfer += $output->writeFieldBegin('msg_detail', TType::STRING, 3);
      $xfer += $output->writeString($this->msg_detail);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_GeneralResult {
  static $_TSPEC;

  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'GeneralResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GeneralResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_FacebookResult {
  static $_TSPEC;

  public $first_name = null;
  public $last_name = null;
  public $id = null;
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'first_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'last_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['first_name'])) {
        $this->first_name = $vals['first_name'];
      }
      if (isset($vals['last_name'])) {
        $this->last_name = $vals['last_name'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
    }
  }

  public function getName() {
    return 'FacebookResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->first_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FacebookResult');
    if ($this->first_name !== null) {
      $xfer += $output->writeFieldBegin('first_name', TType::STRING, 1);
      $xfer += $output->writeString($this->first_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_name !== null) {
      $xfer += $output->writeFieldBegin('last_name', TType::STRING, 2);
      $xfer += $output->writeString($this->last_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 3);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 4);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_UserProfileResult {
  static $_TSPEC;

  public $status = null;
  public $profile = null;
  public $facebook = null;
  public $token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'profile',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_UserProfileEx',
          ),
        3 => array(
          'var' => 'facebook',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_FacebookResult',
          ),
        4 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['profile'])) {
        $this->profile = $vals['profile'];
      }
      if (isset($vals['facebook'])) {
        $this->facebook = $vals['facebook'];
      }
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
    }
  }

  public function getName() {
    return 'UserProfileResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->profile = new gnt_mobion_storage_profile_UserProfileEx();
            $xfer += $this->profile->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->facebook = new gnt_mobion_storage_profile_FacebookResult();
            $xfer += $this->facebook->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserProfileResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profile !== null) {
      if (!is_object($this->profile)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profile', TType::STRUCT, 2);
      $xfer += $this->profile->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->facebook !== null) {
      if (!is_object($this->facebook)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('facebook', TType::STRUCT, 3);
      $xfer += $this->facebook->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 4);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_UserProfileResultList {
  static $_TSPEC;

  public $status = null;
  public $profile_results = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'profile_results',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_profile_UserProfileResult',
            ),
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['profile_results'])) {
        $this->profile_results = $vals['profile_results'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'UserProfileResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->profile_results = array();
            $_size60 = 0;
            $_etype63 = 0;
            $xfer += $input->readListBegin($_etype63, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $elem65 = null;
              $elem65 = new gnt_mobion_storage_profile_UserProfileResult();
              $xfer += $elem65->read($input);
              $this->profile_results []= $elem65;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserProfileResultList');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profile_results !== null) {
      if (!is_array($this->profile_results)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profile_results', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->profile_results));
        {
          foreach ($this->profile_results as $iter66)
          {
            $xfer += $iter66->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_CountryListResult {
  static $_TSPEC;

  public $status = null;
  public $suggestionList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'suggestionList',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['suggestionList'])) {
        $this->suggestionList = $vals['suggestionList'];
      }
    }
  }

  public function getName() {
    return 'CountryListResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->suggestionList = array();
            $_size67 = 0;
            $_ktype68 = 0;
            $_vtype69 = 0;
            $xfer += $input->readMapBegin($_ktype68, $_vtype69, $_size67);
            for ($_i71 = 0; $_i71 < $_size67; ++$_i71)
            {
              $key72 = '';
              $val73 = '';
              $xfer += $input->readString($key72);
              $xfer += $input->readString($val73);
              $this->suggestionList[$key72] = $val73;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CountryListResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->suggestionList !== null) {
      if (!is_array($this->suggestionList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('suggestionList', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->suggestionList));
        {
          foreach ($this->suggestionList as $kiter74 => $viter75)
          {
            $xfer += $output->writeString($kiter74);
            $xfer += $output->writeString($viter75);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_ResetPasswordResult {
  static $_TSPEC;

  public $status = null;
  public $email = null;
  public $reset_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reset_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['reset_code'])) {
        $this->reset_code = $vals['reset_code'];
      }
    }
  }

  public function getName() {
    return 'ResetPasswordResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reset_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ResetPasswordResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reset_code !== null) {
      $xfer += $output->writeFieldBegin('reset_code', TType::STRING, 3);
      $xfer += $output->writeString($this->reset_code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_ListFbIdResult {
  static $_TSPEC;

  public $status = null;
  public $map_fb_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'map_fb_ids',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['map_fb_ids'])) {
        $this->map_fb_ids = $vals['map_fb_ids'];
      }
    }
  }

  public function getName() {
    return 'ListFbIdResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->map_fb_ids = array();
            $_size76 = 0;
            $_ktype77 = 0;
            $_vtype78 = 0;
            $xfer += $input->readMapBegin($_ktype77, $_vtype78, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $key81 = 0;
              $val82 = '';
              $xfer += $input->readI64($key81);
              $xfer += $input->readString($val82);
              $this->map_fb_ids[$key81] = $val82;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ListFbIdResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->map_fb_ids !== null) {
      if (!is_array($this->map_fb_ids)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('map_fb_ids', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I64, TType::STRING, count($this->map_fb_ids));
        {
          foreach ($this->map_fb_ids as $kiter83 => $viter84)
          {
            $xfer += $output->writeI64($kiter83);
            $xfer += $output->writeString($viter84);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_SearchResult {
  static $_TSPEC;

  public $status = null;
  public $result = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'result',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
    }
  }

  public function getName() {
    return 'SearchResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->result);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      $xfer += $output->writeFieldBegin('result', TType::STRING, 2);
      $xfer += $output->writeString($this->result);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_UrlIdResult {
  static $_TSPEC;

  public $status = null;
  public $accountid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'accountid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['accountid'])) {
        $this->accountid = $vals['accountid'];
      }
    }
  }

  public function getName() {
    return 'UrlIdResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UrlIdResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accountid !== null) {
      $xfer += $output->writeFieldBegin('accountid', TType::I64, 2);
      $xfer += $output->writeI64($this->accountid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_profile_SneakingResult {
  static $_TSPEC;

  public $status = null;
  public $linked_social_networks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_profile_ErrorStatus',
          ),
        2 => array(
          'var' => 'linked_social_networks',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::BOOL,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::BOOL,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['linked_social_networks'])) {
        $this->linked_social_networks = $vals['linked_social_networks'];
      }
    }
  }

  public function getName() {
    return 'SneakingResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new gnt_mobion_storage_profile_ErrorStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->linked_social_networks = array();
            $_size85 = 0;
            $_ktype86 = 0;
            $_vtype87 = 0;
            $xfer += $input->readMapBegin($_ktype86, $_vtype87, $_size85);
            for ($_i89 = 0; $_i89 < $_size85; ++$_i89)
            {
              $key90 = 0;
              $val91 = false;
              $xfer += $input->readI32($key90);
              $xfer += $input->readBool($val91);
              $this->linked_social_networks[$key90] = $val91;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SneakingResult');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->linked_social_networks !== null) {
      if (!is_array($this->linked_social_networks)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('linked_social_networks', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::I32, TType::BOOL, count($this->linked_social_networks));
        {
          foreach ($this->linked_social_networks as $kiter92 => $viter93)
          {
            $xfer += $output->writeI32($kiter92);
            $xfer += $output->writeBool($viter93);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
