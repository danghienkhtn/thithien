<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Recent/mobion_user_recent_storage_types.php';

interface gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageServiceIf {
  public function getUserRecentStorageEntry($accountID, $secondKeyID, $accessCode);
  public function getUserRecentStorageListAccount($lsAccountID, $secondKeyID, $accessCode);
  public function getUserRecentStorageListSecondKeyID($accountID, $lsSecondKeyID, $accessCode);
  public function getSecondKeyIDs($lsAccountID, $accessCode);
  public function updateUserRecentStorage($accountID, $secondKeyID, $time_to_expire, $data, $accessCode);
  public function removeUserRecentStorageForSecondKeyID($accountID, $secondKeyID, $accessCode);
  public function removeUserRecentStorage($accountID, $accessCode);
}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageServiceClient implements gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getUserRecentStorageEntry($accountID, $secondKeyID, $accessCode)
  {
    $this->send_getUserRecentStorageEntry($accountID, $secondKeyID, $accessCode);
    return $this->recv_getUserRecentStorageEntry();
  }

  public function send_getUserRecentStorageEntry($accountID, $secondKeyID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageEntry_args();
    $args->accountID = $accountID;
    $args->secondKeyID = $secondKeyID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserRecentStorageEntry', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserRecentStorageEntry', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserRecentStorageEntry()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageEntry_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageEntry_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUserRecentStorageEntry failed: unknown result");
  }

  public function getUserRecentStorageListAccount($lsAccountID, $secondKeyID, $accessCode)
  {
    $this->send_getUserRecentStorageListAccount($lsAccountID, $secondKeyID, $accessCode);
    return $this->recv_getUserRecentStorageListAccount();
  }

  public function send_getUserRecentStorageListAccount($lsAccountID, $secondKeyID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListAccount_args();
    $args->lsAccountID = $lsAccountID;
    $args->secondKeyID = $secondKeyID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserRecentStorageListAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserRecentStorageListAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserRecentStorageListAccount()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUserRecentStorageListAccount failed: unknown result");
  }

  public function getUserRecentStorageListSecondKeyID($accountID, $lsSecondKeyID, $accessCode)
  {
    $this->send_getUserRecentStorageListSecondKeyID($accountID, $lsSecondKeyID, $accessCode);
    return $this->recv_getUserRecentStorageListSecondKeyID();
  }

  public function send_getUserRecentStorageListSecondKeyID($accountID, $lsSecondKeyID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListSecondKeyID_args();
    $args->accountID = $accountID;
    $args->lsSecondKeyID = $lsSecondKeyID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUserRecentStorageListSecondKeyID', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUserRecentStorageListSecondKeyID', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUserRecentStorageListSecondKeyID()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListSecondKeyID_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListSecondKeyID_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUserRecentStorageListSecondKeyID failed: unknown result");
  }

  public function getSecondKeyIDs($lsAccountID, $accessCode)
  {
    $this->send_getSecondKeyIDs($lsAccountID, $accessCode);
    return $this->recv_getSecondKeyIDs();
  }

  public function send_getSecondKeyIDs($lsAccountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getSecondKeyIDs_args();
    $args->lsAccountID = $lsAccountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSecondKeyIDs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSecondKeyIDs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSecondKeyIDs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getSecondKeyIDs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getSecondKeyIDs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSecondKeyIDs failed: unknown result");
  }

  public function updateUserRecentStorage($accountID, $secondKeyID, $time_to_expire, $data, $accessCode)
  {
    $this->send_updateUserRecentStorage($accountID, $secondKeyID, $time_to_expire, $data, $accessCode);
  }

  public function send_updateUserRecentStorage($accountID, $secondKeyID, $time_to_expire, $data, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_updateUserRecentStorage_args();
    $args->accountID = $accountID;
    $args->secondKeyID = $secondKeyID;
    $args->time_to_expire = $time_to_expire;
    $args->data = $data;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateUserRecentStorage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateUserRecentStorage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function removeUserRecentStorageForSecondKeyID($accountID, $secondKeyID, $accessCode)
  {
    $this->send_removeUserRecentStorageForSecondKeyID($accountID, $secondKeyID, $accessCode);
  }

  public function send_removeUserRecentStorageForSecondKeyID($accountID, $secondKeyID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_removeUserRecentStorageForSecondKeyID_args();
    $args->accountID = $accountID;
    $args->secondKeyID = $secondKeyID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeUserRecentStorageForSecondKeyID', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeUserRecentStorageForSecondKeyID', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function removeUserRecentStorage($accountID, $accessCode)
  {
    $this->send_removeUserRecentStorage($accountID, $accessCode);
  }

  public function send_removeUserRecentStorage($accountID, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_removeUserRecentStorage_args();
    $args->accountID = $accountID;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeUserRecentStorage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeUserRecentStorage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageEntry_args {
  static $_TSPEC;

  public $accountID = null;
  public $secondKeyID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'secondKeyID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['secondKeyID'])) {
        $this->secondKeyID = $vals['secondKeyID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getUserRecentStorageEntry_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secondKeyID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getUserRecentStorageEntry_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secondKeyID !== null) {
      $xfer += $output->writeFieldBegin('secondKeyID', TType::STRING, 2);
      $xfer += $output->writeString($this->secondKeyID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageEntry_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionuserrecentstorage_MobionUserRecentStorageEntryResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getUserRecentStorageEntry_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionuserrecentstorage_MobionUserRecentStorageEntryResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getUserRecentStorageEntry_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListAccount_args {
  static $_TSPEC;

  public $lsAccountID = null;
  public $secondKeyID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lsAccountID',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'secondKeyID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lsAccountID'])) {
        $this->lsAccountID = $vals['lsAccountID'];
      }
      if (isset($vals['secondKeyID'])) {
        $this->secondKeyID = $vals['secondKeyID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getUserRecentStorageListAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lsAccountID = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $xfer += $input->readI64($elem14);
              $this->lsAccountID []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secondKeyID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getUserRecentStorageListAccount_args');
    if ($this->lsAccountID !== null) {
      if (!is_array($this->lsAccountID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAccountID', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->lsAccountID));
        {
          foreach ($this->lsAccountID as $iter15)
          {
            $xfer += $output->writeI64($iter15);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secondKeyID !== null) {
      $xfer += $output->writeFieldBegin('secondKeyID', TType::STRING, 2);
      $xfer += $output->writeString($this->secondKeyID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListAccount_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionuserrecentstorage_MobionUserRecentStorageEntryResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getUserRecentStorageListAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new gnt_mobion_storage_mobionuserrecentstorage_MobionUserRecentStorageEntryResult();
              $xfer += $elem21->read($input);
              $this->success []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getUserRecentStorageListAccount_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter22)
          {
            $xfer += $iter22->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListSecondKeyID_args {
  static $_TSPEC;

  public $accountID = null;
  public $lsSecondKeyID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'lsSecondKeyID',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['lsSecondKeyID'])) {
        $this->lsSecondKeyID = $vals['lsSecondKeyID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getUserRecentStorageListSecondKeyID_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->lsSecondKeyID = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $xfer += $input->readString($elem28);
              $this->lsSecondKeyID []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getUserRecentStorageListSecondKeyID_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lsSecondKeyID !== null) {
      if (!is_array($this->lsSecondKeyID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsSecondKeyID', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->lsSecondKeyID));
        {
          foreach ($this->lsSecondKeyID as $iter29)
          {
            $xfer += $output->writeString($iter29);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getUserRecentStorageListSecondKeyID_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_mobion_storage_mobionuserrecentstorage_MobionUserRecentStorageEntryResult',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getUserRecentStorageListSecondKeyID_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size30 = 0;
            $_etype33 = 0;
            $xfer += $input->readListBegin($_etype33, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $elem35 = null;
              $elem35 = new gnt_mobion_storage_mobionuserrecentstorage_MobionUserRecentStorageEntryResult();
              $xfer += $elem35->read($input);
              $this->success []= $elem35;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getUserRecentStorageListSecondKeyID_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter36)
          {
            $xfer += $iter36->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getSecondKeyIDs_args {
  static $_TSPEC;

  public $lsAccountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lsAccountID',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lsAccountID'])) {
        $this->lsAccountID = $vals['lsAccountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getSecondKeyIDs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->lsAccountID = array();
            $_size37 = 0;
            $_etype40 = 0;
            $xfer += $input->readListBegin($_etype40, $_size37);
            for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
            {
              $elem42 = null;
              $xfer += $input->readI64($elem42);
              $this->lsAccountID []= $elem42;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getSecondKeyIDs_args');
    if ($this->lsAccountID !== null) {
      if (!is_array($this->lsAccountID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lsAccountID', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->lsAccountID));
        {
          foreach ($this->lsAccountID as $iter43)
          {
            $xfer += $output->writeI64($iter43);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_getSecondKeyIDs_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::LST,
          'elem' => array(
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_getSecondKeyIDs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readListBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = array();
              $_size50 = 0;
              $_etype53 = 0;
              $xfer += $input->readListBegin($_etype53, $_size50);
              for ($_i54 = 0; $_i54 < $_size50; ++$_i54)
              {
                $elem55 = null;
                $xfer += $input->readString($elem55);
                $elem49 []= $elem55;
              }
              $xfer += $input->readListEnd();
              $this->success []= $elem49;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_getSecondKeyIDs_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::LST, count($this->success));
        {
          foreach ($this->success as $iter56)
          {
            {
              $output->writeListBegin(TType::STRING, count($iter56));
              {
                foreach ($iter56 as $iter57)
                {
                  $xfer += $output->writeString($iter57);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_updateUserRecentStorage_args {
  static $_TSPEC;

  public $accountID = null;
  public $secondKeyID = null;
  public $time_to_expire = null;
  public $data = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'secondKeyID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time_to_expire',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['secondKeyID'])) {
        $this->secondKeyID = $vals['secondKeyID'];
      }
      if (isset($vals['time_to_expire'])) {
        $this->time_to_expire = $vals['time_to_expire'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_updateUserRecentStorage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secondKeyID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->time_to_expire);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_updateUserRecentStorage_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secondKeyID !== null) {
      $xfer += $output->writeFieldBegin('secondKeyID', TType::STRING, 2);
      $xfer += $output->writeString($this->secondKeyID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->time_to_expire !== null) {
      $xfer += $output->writeFieldBegin('time_to_expire', TType::I32, 3);
      $xfer += $output->writeI32($this->time_to_expire);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 4);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 5);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_removeUserRecentStorageForSecondKeyID_args {
  static $_TSPEC;

  public $accountID = null;
  public $secondKeyID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'secondKeyID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['secondKeyID'])) {
        $this->secondKeyID = $vals['secondKeyID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_removeUserRecentStorageForSecondKeyID_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->secondKeyID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_removeUserRecentStorageForSecondKeyID_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->secondKeyID !== null) {
      $xfer += $output->writeFieldBegin('secondKeyID', TType::STRING, 2);
      $xfer += $output->writeString($this->secondKeyID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionuserrecentstorage_UserRecentStorageService_removeUserRecentStorage_args {
  static $_TSPEC;

  public $accountID = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'accountID',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['accountID'])) {
        $this->accountID = $vals['accountID'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'UserRecentStorageService_removeUserRecentStorage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->accountID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserRecentStorageService_removeUserRecentStorage_args');
    if ($this->accountID !== null) {
      $xfer += $output->writeFieldBegin('accountID', TType::I64, 1);
      $xfer += $output->writeI64($this->accountID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
