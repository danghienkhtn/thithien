<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Visitor/mobion_recent_visitor_types.php';

interface gnt_mobion_storage_mobionrecentvisitor_RecentVisitorServiceIf {
  public function getSliceRecentVisitor($mobionId, $startIndex, $size, $accessCode);
  public function countRecentVisitor($mobionId, $iNumberSecBefor, $accessCode);
  public function addVisitor($mobionId, $flId, $accessCode);
  public function removeVisitor($mobionId, $flId, $accessCode);
  public function removeVisitorAll($mobionId, $accessCode);
}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorServiceClient implements gnt_mobion_storage_mobionrecentvisitor_RecentVisitorServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getSliceRecentVisitor($mobionId, $startIndex, $size, $accessCode)
  {
    $this->send_getSliceRecentVisitor($mobionId, $startIndex, $size, $accessCode);
    return $this->recv_getSliceRecentVisitor();
  }

  public function send_getSliceRecentVisitor($mobionId, $startIndex, $size, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_getSliceRecentVisitor_args();
    $args->mobionId = $mobionId;
    $args->startIndex = $startIndex;
    $args->size = $size;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSliceRecentVisitor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSliceRecentVisitor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSliceRecentVisitor()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_getSliceRecentVisitor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_getSliceRecentVisitor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSliceRecentVisitor failed: unknown result");
  }

  public function countRecentVisitor($mobionId, $iNumberSecBefor, $accessCode)
  {
    $this->send_countRecentVisitor($mobionId, $iNumberSecBefor, $accessCode);
    return $this->recv_countRecentVisitor();
  }

  public function send_countRecentVisitor($mobionId, $iNumberSecBefor, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_countRecentVisitor_args();
    $args->mobionId = $mobionId;
    $args->iNumberSecBefor = $iNumberSecBefor;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'countRecentVisitor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('countRecentVisitor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_countRecentVisitor()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_countRecentVisitor_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_countRecentVisitor_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("countRecentVisitor failed: unknown result");
  }

  public function addVisitor($mobionId, $flId, $accessCode)
  {
    $this->send_addVisitor($mobionId, $flId, $accessCode);
  }

  public function send_addVisitor($mobionId, $flId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_addVisitor_args();
    $args->mobionId = $mobionId;
    $args->flId = $flId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addVisitor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addVisitor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function removeVisitor($mobionId, $flId, $accessCode)
  {
    $this->send_removeVisitor($mobionId, $flId, $accessCode);
  }

  public function send_removeVisitor($mobionId, $flId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_removeVisitor_args();
    $args->mobionId = $mobionId;
    $args->flId = $flId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeVisitor', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeVisitor', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function removeVisitorAll($mobionId, $accessCode)
  {
    $this->send_removeVisitorAll($mobionId, $accessCode);
  }

  public function send_removeVisitorAll($mobionId, $accessCode)
  {
    $args = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_removeVisitorAll_args();
    $args->mobionId = $mobionId;
    $args->accessCode = $accessCode;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'removeVisitorAll', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('removeVisitorAll', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_getSliceRecentVisitor_args {
  static $_TSPEC;

  public $mobionId = null;
  public $startIndex = null;
  public $size = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'startIndex',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobionId'])) {
        $this->mobionId = $vals['mobionId'];
      }
      if (isset($vals['startIndex'])) {
        $this->startIndex = $vals['startIndex'];
      }
      if (isset($vals['size'])) {
        $this->size = $vals['size'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_getSliceRecentVisitor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->size);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_getSliceRecentVisitor_args');
    if ($this->mobionId !== null) {
      $xfer += $output->writeFieldBegin('mobionId', TType::STRING, 1);
      $xfer += $output->writeString($this->mobionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startIndex !== null) {
      $xfer += $output->writeFieldBegin('startIndex', TType::I32, 2);
      $xfer += $output->writeI32($this->startIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->size !== null) {
      $xfer += $output->writeFieldBegin('size', TType::I32, 3);
      $xfer += $output->writeI32($this->size);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 4);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_getSliceRecentVisitor_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionrecentvisitor_RecentVisitorResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_getSliceRecentVisitor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_getSliceRecentVisitor_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_countRecentVisitor_args {
  static $_TSPEC;

  public $mobionId = null;
  public $iNumberSecBefor = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'iNumberSecBefor',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobionId'])) {
        $this->mobionId = $vals['mobionId'];
      }
      if (isset($vals['iNumberSecBefor'])) {
        $this->iNumberSecBefor = $vals['iNumberSecBefor'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_countRecentVisitor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iNumberSecBefor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_countRecentVisitor_args');
    if ($this->mobionId !== null) {
      $xfer += $output->writeFieldBegin('mobionId', TType::STRING, 1);
      $xfer += $output->writeString($this->mobionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iNumberSecBefor !== null) {
      $xfer += $output->writeFieldBegin('iNumberSecBefor', TType::I32, 2);
      $xfer += $output->writeI32($this->iNumberSecBefor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_countRecentVisitor_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_mobion_storage_mobionrecentvisitor_RecentVisitorCountRecentResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_countRecentVisitor_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_mobion_storage_mobionrecentvisitor_RecentVisitorCountRecentResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_countRecentVisitor_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_addVisitor_args {
  static $_TSPEC;

  public $mobionId = null;
  public $flId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'flId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobionId'])) {
        $this->mobionId = $vals['mobionId'];
      }
      if (isset($vals['flId'])) {
        $this->flId = $vals['flId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_addVisitor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->flId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_addVisitor_args');
    if ($this->mobionId !== null) {
      $xfer += $output->writeFieldBegin('mobionId', TType::STRING, 1);
      $xfer += $output->writeString($this->mobionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flId !== null) {
      $xfer += $output->writeFieldBegin('flId', TType::STRING, 2);
      $xfer += $output->writeString($this->flId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_removeVisitor_args {
  static $_TSPEC;

  public $mobionId = null;
  public $flId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'flId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobionId'])) {
        $this->mobionId = $vals['mobionId'];
      }
      if (isset($vals['flId'])) {
        $this->flId = $vals['flId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_removeVisitor_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->flId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_removeVisitor_args');
    if ($this->mobionId !== null) {
      $xfer += $output->writeFieldBegin('mobionId', TType::STRING, 1);
      $xfer += $output->writeString($this->mobionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->flId !== null) {
      $xfer += $output->writeFieldBegin('flId', TType::STRING, 2);
      $xfer += $output->writeString($this->flId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 3);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_storage_mobionrecentvisitor_RecentVisitorService_removeVisitorAll_args {
  static $_TSPEC;

  public $mobionId = null;
  public $accessCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobionId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'accessCode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobionId'])) {
        $this->mobionId = $vals['mobionId'];
      }
      if (isset($vals['accessCode'])) {
        $this->accessCode = $vals['accessCode'];
      }
    }
  }

  public function getName() {
    return 'RecentVisitorService_removeVisitorAll_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->accessCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RecentVisitorService_removeVisitorAll_args');
    if ($this->mobionId !== null) {
      $xfer += $output->writeFieldBegin('mobionId', TType::STRING, 1);
      $xfer += $output->writeString($this->mobionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->accessCode !== null) {
      $xfer += $output->writeFieldBegin('accessCode', TType::STRING, 2);
      $xfer += $output->writeString($this->accessCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
