<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Messenger/mobion_messenger_types.php';

interface gnt_mobion_messenger_MBMessengerServiceIf {
  public function putMessage($userSender, $userReceiver, $signature, $message, $loginType, $appId);
  public function putMessageEx($userSender, $userReceiver, $signature, $message, $loginType, $appId, $offlineMsg);
}

class gnt_mobion_messenger_MBMessengerServiceClient implements gnt_mobion_messenger_MBMessengerServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function putMessage($userSender, $userReceiver, $signature, $message, $loginType, $appId)
  {
    $this->send_putMessage($userSender, $userReceiver, $signature, $message, $loginType, $appId);
    return $this->recv_putMessage();
  }

  public function send_putMessage($userSender, $userReceiver, $signature, $message, $loginType, $appId)
  {
    $args = new gnt_mobion_messenger_MBMessengerService_putMessage_args();
    $args->userSender = $userSender;
    $args->userReceiver = $userReceiver;
    $args->signature = $signature;
    $args->message = $message;
    $args->loginType = $loginType;
    $args->appId = $appId;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'putMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('putMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_putMessage()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_messenger_MBMessengerService_putMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_messenger_MBMessengerService_putMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("putMessage failed: unknown result");
  }

  public function putMessageEx($userSender, $userReceiver, $signature, $message, $loginType, $appId, $offlineMsg)
  {
    $this->send_putMessageEx($userSender, $userReceiver, $signature, $message, $loginType, $appId, $offlineMsg);
    return $this->recv_putMessageEx();
  }

  public function send_putMessageEx($userSender, $userReceiver, $signature, $message, $loginType, $appId, $offlineMsg)
  {
    $args = new gnt_mobion_messenger_MBMessengerService_putMessageEx_args();
    $args->userSender = $userSender;
    $args->userReceiver = $userReceiver;
    $args->signature = $signature;
    $args->message = $message;
    $args->loginType = $loginType;
    $args->appId = $appId;
    $args->offlineMsg = $offlineMsg;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'putMessageEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('putMessageEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_putMessageEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_mobion_messenger_MBMessengerService_putMessageEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_mobion_messenger_MBMessengerService_putMessageEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("putMessageEx failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_mobion_messenger_MBMessengerService_putMessage_args {
  static $_TSPEC;

  public $userSender = null;
  public $userReceiver = null;
  public $signature = null;
  public $message = null;
  public $loginType = null;
  public $appId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userReceiver',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['userReceiver'])) {
        $this->userReceiver = $vals['userReceiver'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
    }
  }

  public function getName() {
    return 'MBMessengerService_putMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userReceiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBMessengerService_putMessage_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userReceiver !== null) {
      $xfer += $output->writeFieldBegin('userReceiver', TType::STRING, 2);
      $xfer += $output->writeString($this->userReceiver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 5);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 6);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_messenger_MBMessengerService_putMessage_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBMessengerService_putMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBMessengerService_putMessage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_messenger_MBMessengerService_putMessageEx_args {
  static $_TSPEC;

  public $userSender = null;
  public $userReceiver = null;
  public $signature = null;
  public $message = null;
  public $loginType = null;
  public $appId = null;
  public $offlineMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userSender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userReceiver',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'signature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'loginType',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'appId',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'offlineMsg',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userSender'])) {
        $this->userSender = $vals['userSender'];
      }
      if (isset($vals['userReceiver'])) {
        $this->userReceiver = $vals['userReceiver'];
      }
      if (isset($vals['signature'])) {
        $this->signature = $vals['signature'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['loginType'])) {
        $this->loginType = $vals['loginType'];
      }
      if (isset($vals['appId'])) {
        $this->appId = $vals['appId'];
      }
      if (isset($vals['offlineMsg'])) {
        $this->offlineMsg = $vals['offlineMsg'];
      }
    }
  }

  public function getName() {
    return 'MBMessengerService_putMessageEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userSender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userReceiver);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->signature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->loginType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->offlineMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBMessengerService_putMessageEx_args');
    if ($this->userSender !== null) {
      $xfer += $output->writeFieldBegin('userSender', TType::STRING, 1);
      $xfer += $output->writeString($this->userSender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userReceiver !== null) {
      $xfer += $output->writeFieldBegin('userReceiver', TType::STRING, 2);
      $xfer += $output->writeString($this->userReceiver);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->signature !== null) {
      $xfer += $output->writeFieldBegin('signature', TType::STRING, 3);
      $xfer += $output->writeString($this->signature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->loginType !== null) {
      $xfer += $output->writeFieldBegin('loginType', TType::STRING, 5);
      $xfer += $output->writeString($this->loginType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appId !== null) {
      $xfer += $output->writeFieldBegin('appId', TType::STRING, 6);
      $xfer += $output->writeString($this->appId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offlineMsg !== null) {
      $xfer += $output->writeFieldBegin('offlineMsg', TType::STRING, 7);
      $xfer += $output->writeString($this->offlineMsg);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_mobion_messenger_MBMessengerService_putMessageEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'MBMessengerService_putMessageEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MBMessengerService_putMessageEx_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
