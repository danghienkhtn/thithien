<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['E_profileErrorCode'] = array(
  'ERROR_SUCCESS' => 0,
  'ERROR_FAILURE' => 1,
  'ERROR_WRONG_PARAM' => 2,
  'ERROR_KEY_NOT_FOUND' => 3,
  'ERROR_ALREADY_EXIST' => 4,
  'ERROR_DATABASE' => 5,
  'ERROR_INTERNAL' => 6,
  'ERROR_NOT_ALLOW' => 7,
  'ERROR_PROFILE_FAILURE' => 10000,
  'ERROR_PROFILE_WRONG_PARAM' => 10001,
  'ERROR_PROFILE_KEY_NOT_FOUND' => 10002,
  'ERROR_PROFILE_ALREADY_EXIST' => 10003,
  'ERROR_PROFILE_DATABASE' => 10004,
  'ERROR_PROFILE_INTERNAL' => 10005,
  'ERROR_PROFILE_TOKEN_NOT_VALID' => 10006,
  'ERROR_PROFILE_NOT_ALLOW' => 10007,
  'ERROR_PROFILE_EMAIL_IS_USED' => 10008,
  'ERROR_PROFILE_WRONG_EMAIL' => 10009,
  'ERROR_PROFILE_WRONG_EMAIL_PASSWORD' => 10010,
  'ERROR_PROFILE_WRONG_TOKEN_PASSWORD' => 10011,
  'ERROR_PROFILE_WRONG_PASSWORD' => 10012,
  'ERROR_PROFILE_FAIL_IN_ACCOUNT_STORAGE' => 10013,
  'ERROR_PROFILE_FAIL_IN_EMAIL_ACCOUNT_STORAGE' => 10014,
  'ERROR_PROFILE_FAIL_IN_VIRTUAL_STORAGE' => 10015,
  'ERROR_PROFILE_FAIL_IN_REALPROFILE_STORAGE' => 10016,
  'ERROR_PROFILE_FAIL_IN_AUTH_STORAGE' => 10017,
  'ERROR_PROFILE_FAIL_IN_FBACC_STORAGE' => 10018,
  'ERROR_PROFILE_FAIL_IN_FOLLOW_STORAGE' => 10019,
  'ERROR_PROFILE_FAILED_GETTING_FB_ID' => 10020,
  'ERROR_PROFILE_FB_ID_NOT_FOUND' => 10021,
  'ERROR_PROFILE_FB_ID_ALREADY_EXISTS' => 10022,
  'ERROR_PROFILE_FB_ID_ASSOCIATED' => 10023,
  'ERROR_PROFILE_FB_EMAIL_NOT_MATCHED' => 10024,
  'ERROR_PROFILE_NO_ACCOUNT_WITH_FBID_AND_FBEMAIL' => 10025,
  'ERROR_PROFILE_FB_READY_TO_MERGE' => 10026,
  'ERROR_PROFILE_EMAIL_ALREADY_EXIST_AND_MAPPED_TO_FB' => 10027,
  'ERROR_PROFILE_TOKEN_EXPIRE' => 10028,
);

final class profileErrorCode {
  const ERROR_SUCCESS = 0;
  const ERROR_FAILURE = 1;
  const ERROR_WRONG_PARAM = 2;
  const ERROR_KEY_NOT_FOUND = 3;
  const ERROR_ALREADY_EXIST = 4;
  const ERROR_DATABASE = 5;
  const ERROR_INTERNAL = 6;
  const ERROR_NOT_ALLOW = 7;
  const ERROR_PROFILE_FAILURE = 10000;
  const ERROR_PROFILE_WRONG_PARAM = 10001;
  const ERROR_PROFILE_KEY_NOT_FOUND = 10002;
  const ERROR_PROFILE_ALREADY_EXIST = 10003;
  const ERROR_PROFILE_DATABASE = 10004;
  const ERROR_PROFILE_INTERNAL = 10005;
  const ERROR_PROFILE_TOKEN_NOT_VALID = 10006;
  const ERROR_PROFILE_NOT_ALLOW = 10007;
  const ERROR_PROFILE_EMAIL_IS_USED = 10008;
  const ERROR_PROFILE_WRONG_EMAIL = 10009;
  const ERROR_PROFILE_WRONG_EMAIL_PASSWORD = 10010;
  const ERROR_PROFILE_WRONG_TOKEN_PASSWORD = 10011;
  const ERROR_PROFILE_WRONG_PASSWORD = 10012;
  const ERROR_PROFILE_FAIL_IN_ACCOUNT_STORAGE = 10013;
  const ERROR_PROFILE_FAIL_IN_EMAIL_ACCOUNT_STORAGE = 10014;
  const ERROR_PROFILE_FAIL_IN_VIRTUAL_STORAGE = 10015;
  const ERROR_PROFILE_FAIL_IN_REALPROFILE_STORAGE = 10016;
  const ERROR_PROFILE_FAIL_IN_AUTH_STORAGE = 10017;
  const ERROR_PROFILE_FAIL_IN_FBACC_STORAGE = 10018;
  const ERROR_PROFILE_FAIL_IN_FOLLOW_STORAGE = 10019;
  const ERROR_PROFILE_FAILED_GETTING_FB_ID = 10020;
  const ERROR_PROFILE_FB_ID_NOT_FOUND = 10021;
  const ERROR_PROFILE_FB_ID_ALREADY_EXISTS = 10022;
  const ERROR_PROFILE_FB_ID_ASSOCIATED = 10023;
  const ERROR_PROFILE_FB_EMAIL_NOT_MATCHED = 10024;
  const ERROR_PROFILE_NO_ACCOUNT_WITH_FBID_AND_FBEMAIL = 10025;
  const ERROR_PROFILE_FB_READY_TO_MERGE = 10026;
  const ERROR_PROFILE_EMAIL_ALREADY_EXIST_AND_MAPPED_TO_FB = 10027;
  const ERROR_PROFILE_TOKEN_EXPIRE = 10028;
  static public $__names = array(
    0 => 'ERROR_SUCCESS',
    1 => 'ERROR_FAILURE',
    2 => 'ERROR_WRONG_PARAM',
    3 => 'ERROR_KEY_NOT_FOUND',
    4 => 'ERROR_ALREADY_EXIST',
    5 => 'ERROR_DATABASE',
    6 => 'ERROR_INTERNAL',
    7 => 'ERROR_NOT_ALLOW',
    10000 => 'ERROR_PROFILE_FAILURE',
    10001 => 'ERROR_PROFILE_WRONG_PARAM',
    10002 => 'ERROR_PROFILE_KEY_NOT_FOUND',
    10003 => 'ERROR_PROFILE_ALREADY_EXIST',
    10004 => 'ERROR_PROFILE_DATABASE',
    10005 => 'ERROR_PROFILE_INTERNAL',
    10006 => 'ERROR_PROFILE_TOKEN_NOT_VALID',
    10007 => 'ERROR_PROFILE_NOT_ALLOW',
    10008 => 'ERROR_PROFILE_EMAIL_IS_USED',
    10009 => 'ERROR_PROFILE_WRONG_EMAIL',
    10010 => 'ERROR_PROFILE_WRONG_EMAIL_PASSWORD',
    10011 => 'ERROR_PROFILE_WRONG_TOKEN_PASSWORD',
    10012 => 'ERROR_PROFILE_WRONG_PASSWORD',
    10013 => 'ERROR_PROFILE_FAIL_IN_ACCOUNT_STORAGE',
    10014 => 'ERROR_PROFILE_FAIL_IN_EMAIL_ACCOUNT_STORAGE',
    10015 => 'ERROR_PROFILE_FAIL_IN_VIRTUAL_STORAGE',
    10016 => 'ERROR_PROFILE_FAIL_IN_REALPROFILE_STORAGE',
    10017 => 'ERROR_PROFILE_FAIL_IN_AUTH_STORAGE',
    10018 => 'ERROR_PROFILE_FAIL_IN_FBACC_STORAGE',
    10019 => 'ERROR_PROFILE_FAIL_IN_FOLLOW_STORAGE',
    10020 => 'ERROR_PROFILE_FAILED_GETTING_FB_ID',
    10021 => 'ERROR_PROFILE_FB_ID_NOT_FOUND',
    10022 => 'ERROR_PROFILE_FB_ID_ALREADY_EXISTS',
    10023 => 'ERROR_PROFILE_FB_ID_ASSOCIATED',
    10024 => 'ERROR_PROFILE_FB_EMAIL_NOT_MATCHED',
    10025 => 'ERROR_PROFILE_NO_ACCOUNT_WITH_FBID_AND_FBEMAIL',
    10026 => 'ERROR_PROFILE_FB_READY_TO_MERGE',
    10027 => 'ERROR_PROFILE_EMAIL_ALREADY_EXIST_AND_MAPPED_TO_FB',
    10028 => 'ERROR_PROFILE_TOKEN_EXPIRE',
  );
}

$GLOBALS['E_profileChatStatus'] = array(
  'ChatStatusOnline' => 0,
  'ChatStatusBusy' => 1,
  'ChatStatusAway' => 2,
  'ChatStatusInvisible' => 3,
  'ChatStatusOffline' => 4,
  'ChatStatusCount' => 5,
);

final class profileChatStatus {
  const ChatStatusOnline = 0;
  const ChatStatusBusy = 1;
  const ChatStatusAway = 2;
  const ChatStatusInvisible = 3;
  const ChatStatusOffline = 4;
  const ChatStatusCount = 5;
  static public $__names = array(
    0 => 'ChatStatusOnline',
    1 => 'ChatStatusBusy',
    2 => 'ChatStatusAway',
    3 => 'ChatStatusInvisible',
    4 => 'ChatStatusOffline',
    5 => 'ChatStatusCount',
  );
}

$GLOBALS['E_enumProfileGender'] = array(
  'None' => 0,
  'Male' => 1,
  'Female' => 2,
  'Other' => 3,
);

final class enumProfileGender {
  const None = 0;
  const Male = 1;
  const Female = 2;
  const Other = 3;
  static public $__names = array(
    0 => 'None',
    1 => 'Male',
    2 => 'Female',
    3 => 'Other',
  );
}

$GLOBALS['E_enumProfileActiveType'] = array(
  'ACTIVE' => 0,
  'DEACTIVE' => 1,
);

final class enumProfileActiveType {
  const ACTIVE = 0;
  const DEACTIVE = 1;
  static public $__names = array(
    0 => 'ACTIVE',
    1 => 'DEACTIVE',
  );
}

$GLOBALS['E_enumProfileSetting'] = array(
  'Profile' => 0,
  'Notification' => 1,
);

final class enumProfileSetting {
  const Profile = 0;
  const Notification = 1;
  static public $__names = array(
    0 => 'Profile',
    1 => 'Notification',
  );
}

$GLOBALS['E_enumSettingControlType'] = array(
  'ON' => 0,
  'OFF' => 1,
);

final class enumSettingControlType {
  const ON = 0;
  const OFF = 1;
  static public $__names = array(
    0 => 'ON',
    1 => 'OFF',
  );
}

$GLOBALS['E_enumProfileSettingType'] = array(
  'AUTO_ADD_FRIEND' => 1,
  'ALLOW_OTHER_TO_ADD' => 2,
);

final class enumProfileSettingType {
  const AUTO_ADD_FRIEND = 1;
  const ALLOW_OTHER_TO_ADD = 2;
  static public $__names = array(
    1 => 'AUTO_ADD_FRIEND',
    2 => 'ALLOW_OTHER_TO_ADD',
  );
}

$GLOBALS['E_enumNotifySettingType'] = array(
  'ALERT_STYLE' => 1,
  'SOUNDS' => 2,
  'APP_ICON' => 4,
  'VIEW_IN_LOCK_SCREEN' => 8,
  'TURN_OFF' => 16,
);

final class enumNotifySettingType {
  const ALERT_STYLE = 1;
  const SOUNDS = 2;
  const APP_ICON = 4;
  const VIEW_IN_LOCK_SCREEN = 8;
  const TURN_OFF = 16;
  static public $__names = array(
    1 => 'ALERT_STYLE',
    2 => 'SOUNDS',
    4 => 'APP_ICON',
    8 => 'VIEW_IN_LOCK_SCREEN',
    16 => 'TURN_OFF',
  );
}

$GLOBALS['E_enumProfileSocialNetwork'] = array(
  'Facebook' => 0,
  'Google' => 1,
  'Twitter' => 2,
  'Mixi' => 3,
);

final class enumProfileSocialNetwork {
  const Facebook = 0;
  const Google = 1;
  const Twitter = 2;
  const Mixi = 3;
  static public $__names = array(
    0 => 'Facebook',
    1 => 'Google',
    2 => 'Twitter',
    3 => 'Mixi',
  );
}

$GLOBALS['E_profileUpdateType'] = array(
  'Mood' => 0,
  'Avatar' => 1,
  'Hobby' => 2,
  'Status' => 3,
  'Personal' => 4,
  'About' => 5,
  'Full' => 6,
);

final class profileUpdateType {
  const Mood = 0;
  const Avatar = 1;
  const Hobby = 2;
  const Status = 3;
  const Personal = 4;
  const About = 5;
  const Full = 6;
  static public $__names = array(
    0 => 'Mood',
    1 => 'Avatar',
    2 => 'Hobby',
    3 => 'Status',
    4 => 'Personal',
    5 => 'About',
    6 => 'Full',
  );
}

class profileAvatar {
  static $_TSPEC;

  public $photo_id = null;
  public $photo_ext = null;
  public $photo_full_path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'photo_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'photo_ext',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'photo_full_path',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['photo_id'])) {
        $this->photo_id = $vals['photo_id'];
      }
      if (isset($vals['photo_ext'])) {
        $this->photo_ext = $vals['photo_ext'];
      }
      if (isset($vals['photo_full_path'])) {
        $this->photo_full_path = $vals['photo_full_path'];
      }
    }
  }

  public function getName() {
    return 'profileAvatar';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo_ext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->photo_full_path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileAvatar');
    if ($this->photo_id !== null) {
      $xfer += $output->writeFieldBegin('photo_id', TType::STRING, 1);
      $xfer += $output->writeString($this->photo_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo_ext !== null) {
      $xfer += $output->writeFieldBegin('photo_ext', TType::STRING, 2);
      $xfer += $output->writeString($this->photo_ext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->photo_full_path !== null) {
      $xfer += $output->writeFieldBegin('photo_full_path', TType::STRING, 3);
      $xfer += $output->writeString($this->photo_full_path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileAvatarList {
  static $_TSPEC;

  public $arrAvatar = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrAvatar',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'profileAvatar',
            ),
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrAvatar'])) {
        $this->arrAvatar = $vals['arrAvatar'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'profileAvatarList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->arrAvatar = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new profileAvatar();
              $xfer += $elem5->read($input);
              $this->arrAvatar []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileAvatarList');
    if ($this->arrAvatar !== null) {
      if (!is_array($this->arrAvatar)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrAvatar', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->arrAvatar));
        {
          foreach ($this->arrAvatar as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 2);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class personalSetting {
  static $_TSPEC;

  public $arrSetting = null;
  public $updated_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrSetting',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'updated_date',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrSetting'])) {
        $this->arrSetting = $vals['arrSetting'];
      }
      if (isset($vals['updated_date'])) {
        $this->updated_date = $vals['updated_date'];
      }
    }
  }

  public function getName() {
    return 'personalSetting';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->arrSetting = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = 0;
              $val13 = 0;
              $xfer += $input->readI32($key12);
              $xfer += $input->readI64($val13);
              $this->arrSetting[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updated_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('personalSetting');
    if ($this->arrSetting !== null) {
      if (!is_array($this->arrSetting)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrSetting', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::I32, TType::I64, count($this->arrSetting));
        {
          foreach ($this->arrSetting as $kiter14 => $viter15)
          {
            $xfer += $output->writeI32($kiter14);
            $xfer += $output->writeI64($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_date !== null) {
      $xfer += $output->writeFieldBegin('updated_date', TType::I64, 2);
      $xfer += $output->writeI64($this->updated_date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileHobbyTag {
  static $_TSPEC;

  public $tag_id = null;
  public $tag_name = null;
  public $image_url = null;
  public $sort_order = null;
  public $create_date = null;
  public $active = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tag_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'tag_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'image_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sort_order',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'create_date',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'active',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tag_id'])) {
        $this->tag_id = $vals['tag_id'];
      }
      if (isset($vals['tag_name'])) {
        $this->tag_name = $vals['tag_name'];
      }
      if (isset($vals['image_url'])) {
        $this->image_url = $vals['image_url'];
      }
      if (isset($vals['sort_order'])) {
        $this->sort_order = $vals['sort_order'];
      }
      if (isset($vals['create_date'])) {
        $this->create_date = $vals['create_date'];
      }
      if (isset($vals['active'])) {
        $this->active = $vals['active'];
      }
    }
  }

  public function getName() {
    return 'profileHobbyTag';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tag_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->image_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sort_order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->active);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileHobbyTag');
    if ($this->tag_id !== null) {
      $xfer += $output->writeFieldBegin('tag_id', TType::I64, 1);
      $xfer += $output->writeI64($this->tag_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag_name !== null) {
      $xfer += $output->writeFieldBegin('tag_name', TType::STRING, 2);
      $xfer += $output->writeString($this->tag_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->image_url !== null) {
      $xfer += $output->writeFieldBegin('image_url', TType::STRING, 3);
      $xfer += $output->writeString($this->image_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sort_order !== null) {
      $xfer += $output->writeFieldBegin('sort_order', TType::I32, 4);
      $xfer += $output->writeI32($this->sort_order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_date !== null) {
      $xfer += $output->writeFieldBegin('create_date', TType::I64, 5);
      $xfer += $output->writeI64($this->create_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->active !== null) {
      $xfer += $output->writeFieldBegin('active', TType::BYTE, 6);
      $xfer += $output->writeByte($this->active);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class personalInfo {
  static $_TSPEC;

  public $first_name = null;
  public $last_name = null;
  public $middle_name = null;
  public $birth_date = null;
  public $gender =   0;
  public $avatar_url = null;
  public $about_me = null;
  public $hobbies_list = null;
  public $total_friends = 0;
  public $used_avatars = null;
  public $mood_message = null;
  public $chat_status = null;
  public $social_list = null;
  public $full_name = null;
  public $hobbies = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'first_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'last_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'middle_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'birth_date',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'gender',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'avatar_url',
          'type' => TType::STRUCT,
          'class' => 'profileAvatar',
          ),
        7 => array(
          'var' => 'about_me',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'hobbies_list',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'profileHobbyTag',
            ),
          ),
        9 => array(
          'var' => 'total_friends',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'used_avatars',
          'type' => TType::STRUCT,
          'class' => 'profileAvatarList',
          ),
        11 => array(
          'var' => 'mood_message',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'chat_status',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'social_list',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        14 => array(
          'var' => 'full_name',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'hobbies',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['first_name'])) {
        $this->first_name = $vals['first_name'];
      }
      if (isset($vals['last_name'])) {
        $this->last_name = $vals['last_name'];
      }
      if (isset($vals['middle_name'])) {
        $this->middle_name = $vals['middle_name'];
      }
      if (isset($vals['birth_date'])) {
        $this->birth_date = $vals['birth_date'];
      }
      if (isset($vals['gender'])) {
        $this->gender = $vals['gender'];
      }
      if (isset($vals['avatar_url'])) {
        $this->avatar_url = $vals['avatar_url'];
      }
      if (isset($vals['about_me'])) {
        $this->about_me = $vals['about_me'];
      }
      if (isset($vals['hobbies_list'])) {
        $this->hobbies_list = $vals['hobbies_list'];
      }
      if (isset($vals['total_friends'])) {
        $this->total_friends = $vals['total_friends'];
      }
      if (isset($vals['used_avatars'])) {
        $this->used_avatars = $vals['used_avatars'];
      }
      if (isset($vals['mood_message'])) {
        $this->mood_message = $vals['mood_message'];
      }
      if (isset($vals['chat_status'])) {
        $this->chat_status = $vals['chat_status'];
      }
      if (isset($vals['social_list'])) {
        $this->social_list = $vals['social_list'];
      }
      if (isset($vals['full_name'])) {
        $this->full_name = $vals['full_name'];
      }
      if (isset($vals['hobbies'])) {
        $this->hobbies = $vals['hobbies'];
      }
    }
  }

  public function getName() {
    return 'personalInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->first_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->middle_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->birth_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->avatar_url = new profileAvatar();
            $xfer += $this->avatar_url->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->about_me);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->hobbies_list = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new profileHobbyTag();
              $xfer += $elem21->read($input);
              $this->hobbies_list []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total_friends);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->used_avatars = new profileAvatarList();
            $xfer += $this->used_avatars->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mood_message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->chat_status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::MAP) {
            $this->social_list = array();
            $_size22 = 0;
            $_ktype23 = 0;
            $_vtype24 = 0;
            $xfer += $input->readMapBegin($_ktype23, $_vtype24, $_size22);
            for ($_i26 = 0; $_i26 < $_size22; ++$_i26)
            {
              $key27 = 0;
              $val28 = '';
              $xfer += $input->readI32($key27);
              $xfer += $input->readString($val28);
              $this->social_list[$key27] = $val28;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->full_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hobbies);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('personalInfo');
    if ($this->first_name !== null) {
      $xfer += $output->writeFieldBegin('first_name', TType::STRING, 1);
      $xfer += $output->writeString($this->first_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_name !== null) {
      $xfer += $output->writeFieldBegin('last_name', TType::STRING, 2);
      $xfer += $output->writeString($this->last_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->middle_name !== null) {
      $xfer += $output->writeFieldBegin('middle_name', TType::STRING, 3);
      $xfer += $output->writeString($this->middle_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->birth_date !== null) {
      $xfer += $output->writeFieldBegin('birth_date', TType::STRING, 4);
      $xfer += $output->writeString($this->birth_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gender !== null) {
      $xfer += $output->writeFieldBegin('gender', TType::I32, 5);
      $xfer += $output->writeI32($this->gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar_url !== null) {
      if (!is_object($this->avatar_url)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('avatar_url', TType::STRUCT, 6);
      $xfer += $this->avatar_url->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->about_me !== null) {
      $xfer += $output->writeFieldBegin('about_me', TType::STRING, 7);
      $xfer += $output->writeString($this->about_me);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hobbies_list !== null) {
      if (!is_array($this->hobbies_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hobbies_list', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hobbies_list));
        {
          foreach ($this->hobbies_list as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total_friends !== null) {
      $xfer += $output->writeFieldBegin('total_friends', TType::I32, 9);
      $xfer += $output->writeI32($this->total_friends);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->used_avatars !== null) {
      if (!is_object($this->used_avatars)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('used_avatars', TType::STRUCT, 10);
      $xfer += $this->used_avatars->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mood_message !== null) {
      $xfer += $output->writeFieldBegin('mood_message', TType::STRING, 11);
      $xfer += $output->writeString($this->mood_message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chat_status !== null) {
      $xfer += $output->writeFieldBegin('chat_status', TType::I32, 12);
      $xfer += $output->writeI32($this->chat_status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->social_list !== null) {
      if (!is_array($this->social_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('social_list', TType::MAP, 13);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->social_list));
        {
          foreach ($this->social_list as $kiter30 => $viter31)
          {
            $xfer += $output->writeI32($kiter30);
            $xfer += $output->writeString($viter31);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->full_name !== null) {
      $xfer += $output->writeFieldBegin('full_name', TType::STRING, 14);
      $xfer += $output->writeString($this->full_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hobbies !== null) {
      $xfer += $output->writeFieldBegin('hobbies', TType::STRING, 15);
      $xfer += $output->writeString($this->hobbies);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class activationInfo {
  static $_TSPEC;

  public $is_left = false;
  public $activated = false;
  public $email_verified = false;
  public $enable_change_passwd_or_email = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_left',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'activated',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'email_verified',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'enable_change_passwd_or_email',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['is_left'])) {
        $this->is_left = $vals['is_left'];
      }
      if (isset($vals['activated'])) {
        $this->activated = $vals['activated'];
      }
      if (isset($vals['email_verified'])) {
        $this->email_verified = $vals['email_verified'];
      }
      if (isset($vals['enable_change_passwd_or_email'])) {
        $this->enable_change_passwd_or_email = $vals['enable_change_passwd_or_email'];
      }
    }
  }

  public function getName() {
    return 'activationInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_left);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->activated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->email_verified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->enable_change_passwd_or_email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('activationInfo');
    if ($this->is_left !== null) {
      $xfer += $output->writeFieldBegin('is_left', TType::BOOL, 1);
      $xfer += $output->writeBool($this->is_left);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activated !== null) {
      $xfer += $output->writeFieldBegin('activated', TType::BOOL, 2);
      $xfer += $output->writeBool($this->activated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email_verified !== null) {
      $xfer += $output->writeFieldBegin('email_verified', TType::BOOL, 3);
      $xfer += $output->writeBool($this->email_verified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->enable_change_passwd_or_email !== null) {
      $xfer += $output->writeFieldBegin('enable_change_passwd_or_email', TType::BOOL, 4);
      $xfer += $output->writeBool($this->enable_change_passwd_or_email);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class networkInfo {
  static $_TSPEC;

  public $country = null;
  public $city = null;
  public $reg_ip = null;
  public $lat = null;
  public $lon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'country',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reg_ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'lon',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['country'])) {
        $this->country = $vals['country'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['reg_ip'])) {
        $this->reg_ip = $vals['reg_ip'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lon'])) {
        $this->lon = $vals['lon'];
      }
    }
  }

  public function getName() {
    return 'networkInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->country);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg_ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lon);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('networkInfo');
    if ($this->country !== null) {
      $xfer += $output->writeFieldBegin('country', TType::STRING, 1);
      $xfer += $output->writeString($this->country);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 2);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_ip !== null) {
      $xfer += $output->writeFieldBegin('reg_ip', TType::STRING, 3);
      $xfer += $output->writeString($this->reg_ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lon !== null) {
      $xfer += $output->writeFieldBegin('lon', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->lon);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileDetail {
  static $_TSPEC;

  public $account_id = 0;
  public $email = null;
  public $personal = null;
  public $activation = null;
  public $network = null;
  public $login_token = null;
  public $login_token_expired = null;
  public $privacy_settings = null;
  public $created_date = null;
  public $updated_date = null;
  public $is_banned = false;
  public $is_banning = false;
  public $last_login = null;
  public $is_requested = false;
  public $is_requesting = false;
  public $is_friend = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'account_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'personal',
          'type' => TType::STRUCT,
          'class' => 'personalInfo',
          ),
        4 => array(
          'var' => 'activation',
          'type' => TType::STRUCT,
          'class' => 'activationInfo',
          ),
        5 => array(
          'var' => 'network',
          'type' => TType::STRUCT,
          'class' => 'networkInfo',
          ),
        6 => array(
          'var' => 'login_token',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'login_token_expired',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'privacy_settings',
          'type' => TType::STRUCT,
          'class' => 'personalSetting',
          ),
        9 => array(
          'var' => 'created_date',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'updated_date',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'is_banned',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'is_banning',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'last_login',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'is_requested',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'is_requesting',
          'type' => TType::BOOL,
          ),
        16 => array(
          'var' => 'is_friend',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['account_id'])) {
        $this->account_id = $vals['account_id'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['personal'])) {
        $this->personal = $vals['personal'];
      }
      if (isset($vals['activation'])) {
        $this->activation = $vals['activation'];
      }
      if (isset($vals['network'])) {
        $this->network = $vals['network'];
      }
      if (isset($vals['login_token'])) {
        $this->login_token = $vals['login_token'];
      }
      if (isset($vals['login_token_expired'])) {
        $this->login_token_expired = $vals['login_token_expired'];
      }
      if (isset($vals['privacy_settings'])) {
        $this->privacy_settings = $vals['privacy_settings'];
      }
      if (isset($vals['created_date'])) {
        $this->created_date = $vals['created_date'];
      }
      if (isset($vals['updated_date'])) {
        $this->updated_date = $vals['updated_date'];
      }
      if (isset($vals['is_banned'])) {
        $this->is_banned = $vals['is_banned'];
      }
      if (isset($vals['is_banning'])) {
        $this->is_banning = $vals['is_banning'];
      }
      if (isset($vals['last_login'])) {
        $this->last_login = $vals['last_login'];
      }
      if (isset($vals['is_requested'])) {
        $this->is_requested = $vals['is_requested'];
      }
      if (isset($vals['is_requesting'])) {
        $this->is_requesting = $vals['is_requesting'];
      }
      if (isset($vals['is_friend'])) {
        $this->is_friend = $vals['is_friend'];
      }
    }
  }

  public function getName() {
    return 'profileDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->account_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->personal = new personalInfo();
            $xfer += $this->personal->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->activation = new activationInfo();
            $xfer += $this->activation->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->network = new networkInfo();
            $xfer += $this->network->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->login_token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->login_token_expired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->privacy_settings = new personalSetting();
            $xfer += $this->privacy_settings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->created_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updated_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_banned);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_banning);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->last_login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_requested);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_requesting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_friend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileDetail');
    if ($this->account_id !== null) {
      $xfer += $output->writeFieldBegin('account_id', TType::I64, 1);
      $xfer += $output->writeI64($this->account_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 2);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->personal !== null) {
      if (!is_object($this->personal)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('personal', TType::STRUCT, 3);
      $xfer += $this->personal->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activation !== null) {
      if (!is_object($this->activation)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('activation', TType::STRUCT, 4);
      $xfer += $this->activation->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->network !== null) {
      if (!is_object($this->network)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('network', TType::STRUCT, 5);
      $xfer += $this->network->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->login_token !== null) {
      $xfer += $output->writeFieldBegin('login_token', TType::STRING, 6);
      $xfer += $output->writeString($this->login_token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->login_token_expired !== null) {
      $xfer += $output->writeFieldBegin('login_token_expired', TType::I32, 7);
      $xfer += $output->writeI32($this->login_token_expired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->privacy_settings !== null) {
      if (!is_object($this->privacy_settings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('privacy_settings', TType::STRUCT, 8);
      $xfer += $this->privacy_settings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_date !== null) {
      $xfer += $output->writeFieldBegin('created_date', TType::I64, 9);
      $xfer += $output->writeI64($this->created_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updated_date !== null) {
      $xfer += $output->writeFieldBegin('updated_date', TType::I64, 10);
      $xfer += $output->writeI64($this->updated_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_banned !== null) {
      $xfer += $output->writeFieldBegin('is_banned', TType::BOOL, 11);
      $xfer += $output->writeBool($this->is_banned);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_banning !== null) {
      $xfer += $output->writeFieldBegin('is_banning', TType::BOOL, 12);
      $xfer += $output->writeBool($this->is_banning);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_login !== null) {
      $xfer += $output->writeFieldBegin('last_login', TType::I64, 13);
      $xfer += $output->writeI64($this->last_login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_requested !== null) {
      $xfer += $output->writeFieldBegin('is_requested', TType::BOOL, 14);
      $xfer += $output->writeBool($this->is_requested);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_requesting !== null) {
      $xfer += $output->writeFieldBegin('is_requesting', TType::BOOL, 15);
      $xfer += $output->writeBool($this->is_requesting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_friend !== null) {
      $xfer += $output->writeFieldBegin('is_friend', TType::BOOL, 16);
      $xfer += $output->writeBool($this->is_friend);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileResponseStatus {
  static $_TSPEC;

  public $status_code = null;
  public $msg = null;
  public $msg_detail = null;
  public $verified_token = null;
  public $account_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'msg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg_detail',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'verified_token',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'account_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status_code'])) {
        $this->status_code = $vals['status_code'];
      }
      if (isset($vals['msg'])) {
        $this->msg = $vals['msg'];
      }
      if (isset($vals['msg_detail'])) {
        $this->msg_detail = $vals['msg_detail'];
      }
      if (isset($vals['verified_token'])) {
        $this->verified_token = $vals['verified_token'];
      }
      if (isset($vals['account_id'])) {
        $this->account_id = $vals['account_id'];
      }
    }
  }

  public function getName() {
    return 'profileResponseStatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg_detail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->verified_token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->account_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileResponseStatus');
    if ($this->status_code !== null) {
      $xfer += $output->writeFieldBegin('status_code', TType::I32, 1);
      $xfer += $output->writeI32($this->status_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg !== null) {
      $xfer += $output->writeFieldBegin('msg', TType::STRING, 2);
      $xfer += $output->writeString($this->msg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_detail !== null) {
      $xfer += $output->writeFieldBegin('msg_detail', TType::STRING, 3);
      $xfer += $output->writeString($this->msg_detail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verified_token !== null) {
      $xfer += $output->writeFieldBegin('verified_token', TType::STRING, 4);
      $xfer += $output->writeString($this->verified_token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account_id !== null) {
      $xfer += $output->writeFieldBegin('account_id', TType::I64, 5);
      $xfer += $output->writeI64($this->account_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileResponseDetail {
  static $_TSPEC;

  public $status = null;
  public $profile_result = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'profile_result',
          'type' => TType::STRUCT,
          'class' => 'profileDetail',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['profile_result'])) {
        $this->profile_result = $vals['profile_result'];
      }
    }
  }

  public function getName() {
    return 'profileResponseDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->profile_result = new profileDetail();
            $xfer += $this->profile_result->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileResponseDetail');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profile_result !== null) {
      if (!is_object($this->profile_result)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profile_result', TType::STRUCT, 2);
      $xfer += $this->profile_result->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileResultList {
  static $_TSPEC;

  public $status = null;
  public $profile_results = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'profile_results',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'profileDetail',
            ),
          ),
        3 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['profile_results'])) {
        $this->profile_results = $vals['profile_results'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'profileResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->profile_results = array();
            $_size32 = 0;
            $_etype35 = 0;
            $xfer += $input->readListBegin($_etype35, $_size32);
            for ($_i36 = 0; $_i36 < $_size32; ++$_i36)
            {
              $elem37 = null;
              $elem37 = new profileDetail();
              $xfer += $elem37->read($input);
              $this->profile_results []= $elem37;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileResultList');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profile_results !== null) {
      if (!is_array($this->profile_results)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profile_results', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->profile_results));
        {
          foreach ($this->profile_results as $iter38)
          {
            $xfer += $iter38->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 3);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileHobbyTagResultList {
  static $_TSPEC;

  public $status = null;
  public $hobbyTagList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'hobbyTagList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'profileHobbyTag',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['hobbyTagList'])) {
        $this->hobbyTagList = $vals['hobbyTagList'];
      }
    }
  }

  public function getName() {
    return 'profileHobbyTagResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->hobbyTagList = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $elem44 = new profileHobbyTag();
              $xfer += $elem44->read($input);
              $this->hobbyTagList []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileHobbyTagResultList');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hobbyTagList !== null) {
      if (!is_array($this->hobbyTagList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('hobbyTagList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->hobbyTagList));
        {
          foreach ($this->hobbyTagList as $iter45)
          {
            $xfer += $iter45->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileExtendResultList {
  static $_TSPEC;

  public $status = null;
  public $arrSetData = null;
  public $arrMapData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'arrSetData',
          'type' => TType::SET,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'arrMapData',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['arrSetData'])) {
        $this->arrSetData = $vals['arrSetData'];
      }
      if (isset($vals['arrMapData'])) {
        $this->arrMapData = $vals['arrMapData'];
      }
    }
  }

  public function getName() {
    return 'profileExtendResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::SET) {
            $this->arrSetData = array();
            $_size46 = 0;
            $_etype49 = 0;
            $xfer += $input->readSetBegin($_etype49, $_size46);
            for ($_i50 = 0; $_i50 < $_size46; ++$_i50)
            {
              $elem51 = null;
              $xfer += $input->readI64($elem51);
              if (is_scalar($elem51)) {
                $this->arrSetData[$elem51] = true;
              } else {
                $this->arrSetData []= $elem51;
              }
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->arrMapData = array();
            $_size52 = 0;
            $_ktype53 = 0;
            $_vtype54 = 0;
            $xfer += $input->readMapBegin($_ktype53, $_vtype54, $_size52);
            for ($_i56 = 0; $_i56 < $_size52; ++$_i56)
            {
              $key57 = '';
              $val58 = 0;
              $xfer += $input->readString($key57);
              $xfer += $input->readI64($val58);
              $this->arrMapData[$key57] = $val58;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileExtendResultList');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrSetData !== null) {
      if (!is_array($this->arrSetData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrSetData', TType::SET, 2);
      {
        $output->writeSetBegin(TType::I64, count($this->arrSetData));
        {
          foreach ($this->arrSetData as $iter59 => $iter60)
          {
            if (is_scalar($iter60)) {
            $xfer += $output->writeI64($iter59);
            } else {
            $xfer += $output->writeI64($iter60);
            }
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrMapData !== null) {
      if (!is_array($this->arrMapData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrMapData', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->arrMapData));
        {
          foreach ($this->arrMapData as $kiter61 => $viter62)
          {
            $xfer += $output->writeString($kiter61);
            $xfer += $output->writeI64($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class fbProfileInfo {
  static $_TSPEC;

  public $fbid = null;
  public $fb_name = null;
  public $fb_avatar_url = null;
  public $fb_first_name = null;
  public $fb_last_name = null;
  public $fb_email = null;
  public $fb_email_verified = null;
  public $fb_birthday = null;
  public $fb_about_me = null;
  public $fb_gender = null;
  public $fb_middle_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fbid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fb_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'fb_avatar_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'fb_first_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'fb_last_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'fb_email',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'fb_email_verified',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'fb_birthday',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'fb_about_me',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'fb_gender',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'fb_middle_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fbid'])) {
        $this->fbid = $vals['fbid'];
      }
      if (isset($vals['fb_name'])) {
        $this->fb_name = $vals['fb_name'];
      }
      if (isset($vals['fb_avatar_url'])) {
        $this->fb_avatar_url = $vals['fb_avatar_url'];
      }
      if (isset($vals['fb_first_name'])) {
        $this->fb_first_name = $vals['fb_first_name'];
      }
      if (isset($vals['fb_last_name'])) {
        $this->fb_last_name = $vals['fb_last_name'];
      }
      if (isset($vals['fb_email'])) {
        $this->fb_email = $vals['fb_email'];
      }
      if (isset($vals['fb_email_verified'])) {
        $this->fb_email_verified = $vals['fb_email_verified'];
      }
      if (isset($vals['fb_birthday'])) {
        $this->fb_birthday = $vals['fb_birthday'];
      }
      if (isset($vals['fb_about_me'])) {
        $this->fb_about_me = $vals['fb_about_me'];
      }
      if (isset($vals['fb_gender'])) {
        $this->fb_gender = $vals['fb_gender'];
      }
      if (isset($vals['fb_middle_name'])) {
        $this->fb_middle_name = $vals['fb_middle_name'];
      }
    }
  }

  public function getName() {
    return 'fbProfileInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fbid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_avatar_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_first_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_last_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->fb_email_verified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_about_me);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_gender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_middle_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('fbProfileInfo');
    if ($this->fbid !== null) {
      $xfer += $output->writeFieldBegin('fbid', TType::STRING, 1);
      $xfer += $output->writeString($this->fbid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_name !== null) {
      $xfer += $output->writeFieldBegin('fb_name', TType::STRING, 2);
      $xfer += $output->writeString($this->fb_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_avatar_url !== null) {
      $xfer += $output->writeFieldBegin('fb_avatar_url', TType::STRING, 3);
      $xfer += $output->writeString($this->fb_avatar_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_first_name !== null) {
      $xfer += $output->writeFieldBegin('fb_first_name', TType::STRING, 4);
      $xfer += $output->writeString($this->fb_first_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_last_name !== null) {
      $xfer += $output->writeFieldBegin('fb_last_name', TType::STRING, 5);
      $xfer += $output->writeString($this->fb_last_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_email !== null) {
      $xfer += $output->writeFieldBegin('fb_email', TType::STRING, 6);
      $xfer += $output->writeString($this->fb_email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_email_verified !== null) {
      $xfer += $output->writeFieldBegin('fb_email_verified', TType::BOOL, 7);
      $xfer += $output->writeBool($this->fb_email_verified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_birthday !== null) {
      $xfer += $output->writeFieldBegin('fb_birthday', TType::STRING, 8);
      $xfer += $output->writeString($this->fb_birthday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_about_me !== null) {
      $xfer += $output->writeFieldBegin('fb_about_me', TType::STRING, 9);
      $xfer += $output->writeString($this->fb_about_me);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_gender !== null) {
      $xfer += $output->writeFieldBegin('fb_gender', TType::STRING, 10);
      $xfer += $output->writeString($this->fb_gender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fb_middle_name !== null) {
      $xfer += $output->writeFieldBegin('fb_middle_name', TType::STRING, 11);
      $xfer += $output->writeString($this->fb_middle_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class fbMessageDetail {
  static $_TSPEC;

  public $fb_sender_id = null;
  public $message = null;
  public $create_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fb_sender_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'create_date',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fb_sender_id'])) {
        $this->fb_sender_id = $vals['fb_sender_id'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['create_date'])) {
        $this->create_date = $vals['create_date'];
      }
    }
  }

  public function getName() {
    return 'fbMessageDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fb_sender_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->create_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('fbMessageDetail');
    if ($this->fb_sender_id !== null) {
      $xfer += $output->writeFieldBegin('fb_sender_id', TType::STRING, 1);
      $xfer += $output->writeString($this->fb_sender_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->create_date !== null) {
      $xfer += $output->writeFieldBegin('create_date', TType::I64, 3);
      $xfer += $output->writeI64($this->create_date);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class fbMessageInChannel {
  static $_TSPEC;

  public $fbid = null;
  public $arrMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fbid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'arrMessage',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'fbMessageDetail',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fbid'])) {
        $this->fbid = $vals['fbid'];
      }
      if (isset($vals['arrMessage'])) {
        $this->arrMessage = $vals['arrMessage'];
      }
    }
  }

  public function getName() {
    return 'fbMessageInChannel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fbid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->arrMessage = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new fbMessageDetail();
              $xfer += $elem68->read($input);
              $this->arrMessage []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('fbMessageInChannel');
    if ($this->fbid !== null) {
      $xfer += $output->writeFieldBegin('fbid', TType::STRING, 1);
      $xfer += $output->writeString($this->fbid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrMessage !== null) {
      if (!is_array($this->arrMessage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrMessage', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->arrMessage));
        {
          foreach ($this->arrMessage as $iter69)
          {
            $xfer += $iter69->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class fbMessageInBox {
  static $_TSPEC;

  public $total = null;
  public $arrList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'arrList',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'fbMessageInChannel',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
      if (isset($vals['arrList'])) {
        $this->arrList = $vals['arrList'];
      }
    }
  }

  public function getName() {
    return 'fbMessageInBox';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->arrList = array();
            $_size70 = 0;
            $_ktype71 = 0;
            $_vtype72 = 0;
            $xfer += $input->readMapBegin($_ktype71, $_vtype72, $_size70);
            for ($_i74 = 0; $_i74 < $_size70; ++$_i74)
            {
              $key75 = '';
              $val76 = new fbMessageInChannel();
              $xfer += $input->readString($key75);
              $val76 = new fbMessageInChannel();
              $xfer += $val76->read($input);
              $this->arrList[$key75] = $val76;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('fbMessageInBox');
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 1);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrList !== null) {
      if (!is_array($this->arrList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrList', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->arrList));
        {
          foreach ($this->arrList as $kiter77 => $viter78)
          {
            $xfer += $output->writeString($kiter77);
            $xfer += $viter78->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class fbResultMessageInChannel {
  static $_TSPEC;

  public $status = null;
  public $list_message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'list_message',
          'type' => TType::STRUCT,
          'class' => 'fbMessageInChannel',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['list_message'])) {
        $this->list_message = $vals['list_message'];
      }
    }
  }

  public function getName() {
    return 'fbResultMessageInChannel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->list_message = new fbMessageInChannel();
            $xfer += $this->list_message->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('fbResultMessageInChannel');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->list_message !== null) {
      if (!is_object($this->list_message)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('list_message', TType::STRUCT, 2);
      $xfer += $this->list_message->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class fbResultFBFriend {
  static $_TSPEC;

  public $status = null;
  public $arrFBFriend = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'arrFBFriend',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'fbProfileInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['arrFBFriend'])) {
        $this->arrFBFriend = $vals['arrFBFriend'];
      }
    }
  }

  public function getName() {
    return 'fbResultFBFriend';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->arrFBFriend = array();
            $_size79 = 0;
            $_etype82 = 0;
            $xfer += $input->readListBegin($_etype82, $_size79);
            for ($_i83 = 0; $_i83 < $_size79; ++$_i83)
            {
              $elem84 = null;
              $elem84 = new fbProfileInfo();
              $xfer += $elem84->read($input);
              $this->arrFBFriend []= $elem84;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('fbResultFBFriend');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrFBFriend !== null) {
      if (!is_array($this->arrFBFriend)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrFBFriend', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->arrFBFriend));
        {
          foreach ($this->arrFBFriend as $iter85)
          {
            $xfer += $iter85->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class profileWithFBResultList {
  static $_TSPEC;

  public $status = null;
  public $profile_results = null;
  public $arrFBFriend = null;
  public $total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::STRUCT,
          'class' => 'profileResponseStatus',
          ),
        2 => array(
          'var' => 'profile_results',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'profileDetail',
            ),
          ),
        3 => array(
          'var' => 'arrFBFriend',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'fbProfileInfo',
            ),
          ),
        4 => array(
          'var' => 'total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['profile_results'])) {
        $this->profile_results = $vals['profile_results'];
      }
      if (isset($vals['arrFBFriend'])) {
        $this->arrFBFriend = $vals['arrFBFriend'];
      }
      if (isset($vals['total'])) {
        $this->total = $vals['total'];
      }
    }
  }

  public function getName() {
    return 'profileWithFBResultList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->status = new profileResponseStatus();
            $xfer += $this->status->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->profile_results = array();
            $_size86 = 0;
            $_etype89 = 0;
            $xfer += $input->readListBegin($_etype89, $_size86);
            for ($_i90 = 0; $_i90 < $_size86; ++$_i90)
            {
              $elem91 = null;
              $elem91 = new profileDetail();
              $xfer += $elem91->read($input);
              $this->profile_results []= $elem91;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->arrFBFriend = array();
            $_size92 = 0;
            $_etype95 = 0;
            $xfer += $input->readListBegin($_etype95, $_size92);
            for ($_i96 = 0; $_i96 < $_size92; ++$_i96)
            {
              $elem97 = null;
              $elem97 = new fbProfileInfo();
              $xfer += $elem97->read($input);
              $this->arrFBFriend []= $elem97;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('profileWithFBResultList');
    if ($this->status !== null) {
      if (!is_object($this->status)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('status', TType::STRUCT, 1);
      $xfer += $this->status->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profile_results !== null) {
      if (!is_array($this->profile_results)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('profile_results', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->profile_results));
        {
          foreach ($this->profile_results as $iter98)
          {
            $xfer += $iter98->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrFBFriend !== null) {
      if (!is_array($this->arrFBFriend)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrFBFriend', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->arrFBFriend));
        {
          foreach ($this->arrFBFriend as $iter99)
          {
            $xfer += $iter99->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->total !== null) {
      $xfer += $output->writeFieldBegin('total', TType::I32, 4);
      $xfer += $output->writeI32($this->total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
