<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class gnt_server_scopeNodeObject {
  static $_TSPEC;

  public $arrData = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrData',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrData'])) {
        $this->arrData = $vals['arrData'];
      }
    }
  }

  public function getName() {
    return 'scopeNodeObject';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->arrData = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->arrData[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('scopeNodeObject');
    if ($this->arrData !== null) {
      if (!is_array($this->arrData)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrData', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->arrData));
        {
          foreach ($this->arrData as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeDetail {
  static $_TSPEC;

  public $IsRead = null;
  public $ObjectID = null;
  public $ObjectType = null;
  public $ActionType = null;
  public $BlobData = null;
  public $ArrUserFrom = null;
  public $TotalUser = null;
  public $LastTime = null;
  public $ArrOwner = null;
  public $LastContent = null;
  public $ObjectUID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'IsRead',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ObjectID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectType',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ActionType',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'BlobData',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'ArrUserFrom',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'TotalUser',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'LastTime',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ArrOwner',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'LastContent',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'ObjectUID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['IsRead'])) {
        $this->IsRead = $vals['IsRead'];
      }
      if (isset($vals['ObjectID'])) {
        $this->ObjectID = $vals['ObjectID'];
      }
      if (isset($vals['ObjectType'])) {
        $this->ObjectType = $vals['ObjectType'];
      }
      if (isset($vals['ActionType'])) {
        $this->ActionType = $vals['ActionType'];
      }
      if (isset($vals['BlobData'])) {
        $this->BlobData = $vals['BlobData'];
      }
      if (isset($vals['ArrUserFrom'])) {
        $this->ArrUserFrom = $vals['ArrUserFrom'];
      }
      if (isset($vals['TotalUser'])) {
        $this->TotalUser = $vals['TotalUser'];
      }
      if (isset($vals['LastTime'])) {
        $this->LastTime = $vals['LastTime'];
      }
      if (isset($vals['ArrOwner'])) {
        $this->ArrOwner = $vals['ArrOwner'];
      }
      if (isset($vals['LastContent'])) {
        $this->LastContent = $vals['LastContent'];
      }
      if (isset($vals['ObjectUID'])) {
        $this->ObjectUID = $vals['ObjectUID'];
      }
    }
  }

  public function getName() {
    return 'nodeDetail';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->IsRead);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BlobData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->ArrUserFrom = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $xfer += $input->readString($elem14);
              $this->ArrUserFrom []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->TotalUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LastTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->ArrOwner = array();
            $_size15 = 0;
            $_etype18 = 0;
            $xfer += $input->readListBegin($_etype18, $_size15);
            for ($_i19 = 0; $_i19 < $_size15; ++$_i19)
            {
              $elem20 = null;
              $xfer += $input->readString($elem20);
              $this->ArrOwner []= $elem20;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LastContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeDetail');
    if ($this->IsRead !== null) {
      $xfer += $output->writeFieldBegin('IsRead', TType::I32, 1);
      $xfer += $output->writeI32($this->IsRead);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectID !== null) {
      $xfer += $output->writeFieldBegin('ObjectID', TType::STRING, 2);
      $xfer += $output->writeString($this->ObjectID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectType !== null) {
      $xfer += $output->writeFieldBegin('ObjectType', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActionType !== null) {
      $xfer += $output->writeFieldBegin('ActionType', TType::STRING, 4);
      $xfer += $output->writeString($this->ActionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BlobData !== null) {
      $xfer += $output->writeFieldBegin('BlobData', TType::STRING, 5);
      $xfer += $output->writeString($this->BlobData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ArrUserFrom !== null) {
      if (!is_array($this->ArrUserFrom)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrUserFrom', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->ArrUserFrom));
        {
          foreach ($this->ArrUserFrom as $iter21)
          {
            $xfer += $output->writeString($iter21);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TotalUser !== null) {
      $xfer += $output->writeFieldBegin('TotalUser', TType::I32, 7);
      $xfer += $output->writeI32($this->TotalUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastTime !== null) {
      $xfer += $output->writeFieldBegin('LastTime', TType::STRING, 8);
      $xfer += $output->writeString($this->LastTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ArrOwner !== null) {
      if (!is_array($this->ArrOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrOwner', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->ArrOwner));
        {
          foreach ($this->ArrOwner as $iter22)
          {
            $xfer += $output->writeString($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastContent !== null) {
      $xfer += $output->writeFieldBegin('LastContent', TType::STRING, 10);
      $xfer += $output->writeString($this->LastContent);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectUID !== null) {
      $xfer += $output->writeFieldBegin('ObjectUID', TType::STRING, 11);
      $xfer += $output->writeString($this->ObjectUID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeList {
  static $_TSPEC;

  public $ArrNodeDetail = null;
  public $Total = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ArrNodeDetail',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'gnt_server_nodeDetail',
            ),
          ),
        2 => array(
          'var' => 'Total',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ArrNodeDetail'])) {
        $this->ArrNodeDetail = $vals['ArrNodeDetail'];
      }
      if (isset($vals['Total'])) {
        $this->Total = $vals['Total'];
      }
    }
  }

  public function getName() {
    return 'nodeList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->ArrNodeDetail = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = new gnt_server_nodeDetail();
              $xfer += $elem28->read($input);
              $this->ArrNodeDetail []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Total);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeList');
    if ($this->ArrNodeDetail !== null) {
      if (!is_array($this->ArrNodeDetail)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ArrNodeDetail', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ArrNodeDetail));
        {
          foreach ($this->ArrNodeDetail as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Total !== null) {
      $xfer += $output->writeFieldBegin('Total', TType::I32, 2);
      $xfer += $output->writeI32($this->Total);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
