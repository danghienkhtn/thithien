<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/Node/node_types.php';

interface gnt_server_nodeServiceIf {
  public function setAppID($userIDTo, $appID, $deviceToken, $iScore);
  public function delAppID($userIDTo, $appID, $deviceToken);
  public function getListAppID($userIDTo);
  public function getAllDeviceToken($appID, $sTimestamp, $iLimit, $iOffset);
  public function getListDeviceToken($userIDTo, $appID);
  public function getListDeviceTokenByListIDs($arrUserIDTo, $appID);
  public function getListAppIDByDeviceToken($userIDTo, $deviceToken);
  public function setNotify($appID, $userIDTo, $objectID, $objectType, $actionType, $userIDFrom, $blobData, $statsName, $arrOwner, $isOnlyOwner, $LastContent);
  public function getNotify($appID, $userIDTo, $statsName, $iStart, $iEnd);
  public function getNotifyUnRead($appID, $userIDTo, $statsName, $iStart, $iEnd);
  public function delNotify($appID, $userIDTo, $nodeUID, $statsName);
  public function delRelated($nodeUID, $userID);
  public function getListRelated($nodeUID, $iStart, $iEnd);
  public function resetAll($appID, $userIDTo, $statsName);
  public function markReadAll($appID, $userIDTo, $statsName);
  public function markReadOne($appID, $userIDTo, $nodeUID, $statsName);
  public function getStaticstic($appID, $userIDTo);
  public function shutdown();
}

class gnt_server_nodeServiceClient implements gnt_server_nodeServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function setAppID($userIDTo, $appID, $deviceToken, $iScore)
  {
    $this->send_setAppID($userIDTo, $appID, $deviceToken, $iScore);
    return $this->recv_setAppID();
  }

  public function send_setAppID($userIDTo, $appID, $deviceToken, $iScore)
  {
    $args = new gnt_server_nodeService_setAppID_args();
    $args->userIDTo = $userIDTo;
    $args->appID = $appID;
    $args->deviceToken = $deviceToken;
    $args->iScore = $iScore;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setAppID', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setAppID', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setAppID()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_setAppID_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_setAppID_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setAppID failed: unknown result");
  }

  public function delAppID($userIDTo, $appID, $deviceToken)
  {
    $this->send_delAppID($userIDTo, $appID, $deviceToken);
    return $this->recv_delAppID();
  }

  public function send_delAppID($userIDTo, $appID, $deviceToken)
  {
    $args = new gnt_server_nodeService_delAppID_args();
    $args->userIDTo = $userIDTo;
    $args->appID = $appID;
    $args->deviceToken = $deviceToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delAppID', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delAppID', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delAppID()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_delAppID_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_delAppID_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delAppID failed: unknown result");
  }

  public function getListAppID($userIDTo)
  {
    $this->send_getListAppID($userIDTo);
    return $this->recv_getListAppID();
  }

  public function send_getListAppID($userIDTo)
  {
    $args = new gnt_server_nodeService_getListAppID_args();
    $args->userIDTo = $userIDTo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListAppID', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListAppID', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListAppID()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getListAppID_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getListAppID_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListAppID failed: unknown result");
  }

  public function getAllDeviceToken($appID, $sTimestamp, $iLimit, $iOffset)
  {
    $this->send_getAllDeviceToken($appID, $sTimestamp, $iLimit, $iOffset);
    return $this->recv_getAllDeviceToken();
  }

  public function send_getAllDeviceToken($appID, $sTimestamp, $iLimit, $iOffset)
  {
    $args = new gnt_server_nodeService_getAllDeviceToken_args();
    $args->appID = $appID;
    $args->sTimestamp = $sTimestamp;
    $args->iLimit = $iLimit;
    $args->iOffset = $iOffset;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllDeviceToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllDeviceToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllDeviceToken()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getAllDeviceToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getAllDeviceToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getAllDeviceToken failed: unknown result");
  }

  public function getListDeviceToken($userIDTo, $appID)
  {
    $this->send_getListDeviceToken($userIDTo, $appID);
    return $this->recv_getListDeviceToken();
  }

  public function send_getListDeviceToken($userIDTo, $appID)
  {
    $args = new gnt_server_nodeService_getListDeviceToken_args();
    $args->userIDTo = $userIDTo;
    $args->appID = $appID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListDeviceToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListDeviceToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListDeviceToken()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getListDeviceToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getListDeviceToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListDeviceToken failed: unknown result");
  }

  public function getListDeviceTokenByListIDs($arrUserIDTo, $appID)
  {
    $this->send_getListDeviceTokenByListIDs($arrUserIDTo, $appID);
    return $this->recv_getListDeviceTokenByListIDs();
  }

  public function send_getListDeviceTokenByListIDs($arrUserIDTo, $appID)
  {
    $args = new gnt_server_nodeService_getListDeviceTokenByListIDs_args();
    $args->arrUserIDTo = $arrUserIDTo;
    $args->appID = $appID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListDeviceTokenByListIDs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListDeviceTokenByListIDs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListDeviceTokenByListIDs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getListDeviceTokenByListIDs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getListDeviceTokenByListIDs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListDeviceTokenByListIDs failed: unknown result");
  }

  public function getListAppIDByDeviceToken($userIDTo, $deviceToken)
  {
    $this->send_getListAppIDByDeviceToken($userIDTo, $deviceToken);
    return $this->recv_getListAppIDByDeviceToken();
  }

  public function send_getListAppIDByDeviceToken($userIDTo, $deviceToken)
  {
    $args = new gnt_server_nodeService_getListAppIDByDeviceToken_args();
    $args->userIDTo = $userIDTo;
    $args->deviceToken = $deviceToken;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListAppIDByDeviceToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListAppIDByDeviceToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListAppIDByDeviceToken()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getListAppIDByDeviceToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getListAppIDByDeviceToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListAppIDByDeviceToken failed: unknown result");
  }

  public function setNotify($appID, $userIDTo, $objectID, $objectType, $actionType, $userIDFrom, $blobData, $statsName, $arrOwner, $isOnlyOwner, $LastContent)
  {
    $this->send_setNotify($appID, $userIDTo, $objectID, $objectType, $actionType, $userIDFrom, $blobData, $statsName, $arrOwner, $isOnlyOwner, $LastContent);
    return $this->recv_setNotify();
  }

  public function send_setNotify($appID, $userIDTo, $objectID, $objectType, $actionType, $userIDFrom, $blobData, $statsName, $arrOwner, $isOnlyOwner, $LastContent)
  {
    $args = new gnt_server_nodeService_setNotify_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->objectID = $objectID;
    $args->objectType = $objectType;
    $args->actionType = $actionType;
    $args->userIDFrom = $userIDFrom;
    $args->blobData = $blobData;
    $args->statsName = $statsName;
    $args->arrOwner = $arrOwner;
    $args->isOnlyOwner = $isOnlyOwner;
    $args->LastContent = $LastContent;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setNotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setNotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setNotify()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_setNotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_setNotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("setNotify failed: unknown result");
  }

  public function getNotify($appID, $userIDTo, $statsName, $iStart, $iEnd)
  {
    $this->send_getNotify($appID, $userIDTo, $statsName, $iStart, $iEnd);
    return $this->recv_getNotify();
  }

  public function send_getNotify($appID, $userIDTo, $statsName, $iStart, $iEnd)
  {
    $args = new gnt_server_nodeService_getNotify_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->statsName = $statsName;
    $args->iStart = $iStart;
    $args->iEnd = $iEnd;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNotify()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getNotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getNotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getNotify failed: unknown result");
  }

  public function getNotifyUnRead($appID, $userIDTo, $statsName, $iStart, $iEnd)
  {
    $this->send_getNotifyUnRead($appID, $userIDTo, $statsName, $iStart, $iEnd);
    return $this->recv_getNotifyUnRead();
  }

  public function send_getNotifyUnRead($appID, $userIDTo, $statsName, $iStart, $iEnd)
  {
    $args = new gnt_server_nodeService_getNotifyUnRead_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->statsName = $statsName;
    $args->iStart = $iStart;
    $args->iEnd = $iEnd;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNotifyUnRead', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNotifyUnRead', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNotifyUnRead()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getNotifyUnRead_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getNotifyUnRead_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getNotifyUnRead failed: unknown result");
  }

  public function delNotify($appID, $userIDTo, $nodeUID, $statsName)
  {
    $this->send_delNotify($appID, $userIDTo, $nodeUID, $statsName);
    return $this->recv_delNotify();
  }

  public function send_delNotify($appID, $userIDTo, $nodeUID, $statsName)
  {
    $args = new gnt_server_nodeService_delNotify_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->nodeUID = $nodeUID;
    $args->statsName = $statsName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delNotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delNotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delNotify()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_delNotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_delNotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delNotify failed: unknown result");
  }

  public function delRelated($nodeUID, $userID)
  {
    $this->send_delRelated($nodeUID, $userID);
    return $this->recv_delRelated();
  }

  public function send_delRelated($nodeUID, $userID)
  {
    $args = new gnt_server_nodeService_delRelated_args();
    $args->nodeUID = $nodeUID;
    $args->userID = $userID;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delRelated', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delRelated', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delRelated()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_delRelated_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_delRelated_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("delRelated failed: unknown result");
  }

  public function getListRelated($nodeUID, $iStart, $iEnd)
  {
    $this->send_getListRelated($nodeUID, $iStart, $iEnd);
    return $this->recv_getListRelated();
  }

  public function send_getListRelated($nodeUID, $iStart, $iEnd)
  {
    $args = new gnt_server_nodeService_getListRelated_args();
    $args->nodeUID = $nodeUID;
    $args->iStart = $iStart;
    $args->iEnd = $iEnd;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getListRelated', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getListRelated', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getListRelated()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getListRelated_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getListRelated_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getListRelated failed: unknown result");
  }

  public function resetAll($appID, $userIDTo, $statsName)
  {
    $this->send_resetAll($appID, $userIDTo, $statsName);
    return $this->recv_resetAll();
  }

  public function send_resetAll($appID, $userIDTo, $statsName)
  {
    $args = new gnt_server_nodeService_resetAll_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->statsName = $statsName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'resetAll', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('resetAll', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_resetAll()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_resetAll_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_resetAll_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("resetAll failed: unknown result");
  }

  public function markReadAll($appID, $userIDTo, $statsName)
  {
    $this->send_markReadAll($appID, $userIDTo, $statsName);
    return $this->recv_markReadAll();
  }

  public function send_markReadAll($appID, $userIDTo, $statsName)
  {
    $args = new gnt_server_nodeService_markReadAll_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->statsName = $statsName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'markReadAll', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('markReadAll', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_markReadAll()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_markReadAll_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_markReadAll_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("markReadAll failed: unknown result");
  }

  public function markReadOne($appID, $userIDTo, $nodeUID, $statsName)
  {
    $this->send_markReadOne($appID, $userIDTo, $nodeUID, $statsName);
    return $this->recv_markReadOne();
  }

  public function send_markReadOne($appID, $userIDTo, $nodeUID, $statsName)
  {
    $args = new gnt_server_nodeService_markReadOne_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $args->nodeUID = $nodeUID;
    $args->statsName = $statsName;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'markReadOne', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('markReadOne', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_markReadOne()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_markReadOne_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_markReadOne_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("markReadOne failed: unknown result");
  }

  public function getStaticstic($appID, $userIDTo)
  {
    $this->send_getStaticstic($appID, $userIDTo);
    return $this->recv_getStaticstic();
  }

  public function send_getStaticstic($appID, $userIDTo)
  {
    $args = new gnt_server_nodeService_getStaticstic_args();
    $args->appID = $appID;
    $args->userIDTo = $userIDTo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getStaticstic', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getStaticstic', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getStaticstic()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'gnt_server_nodeService_getStaticstic_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new gnt_server_nodeService_getStaticstic_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getStaticstic failed: unknown result");
  }

  public function shutdown()
  {
    $this->send_shutdown();
  }

  public function send_shutdown()
  {
    $args = new gnt_server_nodeService_shutdown_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'shutdown', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('shutdown', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
}

// HELPER FUNCTIONS AND STRUCTURES

class gnt_server_nodeService_setAppID_args {
  static $_TSPEC;

  public $userIDTo = null;
  public $appID = null;
  public $deviceToken = null;
  public $iScore = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'deviceToken',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iScore',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['deviceToken'])) {
        $this->deviceToken = $vals['deviceToken'];
      }
      if (isset($vals['iScore'])) {
        $this->iScore = $vals['iScore'];
      }
    }
  }

  public function getName() {
    return 'nodeService_setAppID_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->iScore);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_setAppID_args');
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 2);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceToken !== null) {
      $xfer += $output->writeFieldBegin('deviceToken', TType::STRING, 3);
      $xfer += $output->writeString($this->deviceToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iScore !== null) {
      $xfer += $output->writeFieldBegin('iScore', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->iScore);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_setAppID_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_setAppID_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_setAppID_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_delAppID_args {
  static $_TSPEC;

  public $userIDTo = null;
  public $appID = null;
  public $deviceToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'deviceToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['deviceToken'])) {
        $this->deviceToken = $vals['deviceToken'];
      }
    }
  }

  public function getName() {
    return 'nodeService_delAppID_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_delAppID_args');
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 2);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceToken !== null) {
      $xfer += $output->writeFieldBegin('deviceToken', TType::STRING, 3);
      $xfer += $output->writeString($this->deviceToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_delAppID_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_delAppID_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_delAppID_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListAppID_args {
  static $_TSPEC;

  public $userIDTo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListAppID_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListAppID_args');
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListAppID_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListAppID_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = '';
              $val36 = 0.0;
              $xfer += $input->readString($key35);
              $xfer += $input->readDouble($val36);
              $this->success[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListAppID_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::DOUBLE, count($this->success));
        {
          foreach ($this->success as $kiter37 => $viter38)
          {
            $xfer += $output->writeString($kiter37);
            $xfer += $output->writeDouble($viter38);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getAllDeviceToken_args {
  static $_TSPEC;

  public $appID = null;
  public $sTimestamp = null;
  public $iLimit = null;
  public $iOffset = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sTimestamp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'iLimit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iOffset',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['sTimestamp'])) {
        $this->sTimestamp = $vals['sTimestamp'];
      }
      if (isset($vals['iLimit'])) {
        $this->iLimit = $vals['iLimit'];
      }
      if (isset($vals['iOffset'])) {
        $this->iOffset = $vals['iOffset'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getAllDeviceToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iLimit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getAllDeviceToken_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sTimestamp !== null) {
      $xfer += $output->writeFieldBegin('sTimestamp', TType::STRING, 2);
      $xfer += $output->writeString($this->sTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iLimit !== null) {
      $xfer += $output->writeFieldBegin('iLimit', TType::I32, 3);
      $xfer += $output->writeI32($this->iLimit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iOffset !== null) {
      $xfer += $output->writeFieldBegin('iOffset', TType::I32, 4);
      $xfer += $output->writeI32($this->iOffset);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getAllDeviceToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getAllDeviceToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $xfer += $input->readString($elem44);
              $this->success []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getAllDeviceToken_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter45)
          {
            $xfer += $output->writeString($iter45);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListDeviceToken_args {
  static $_TSPEC;

  public $userIDTo = null;
  public $appID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListDeviceToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListDeviceToken_args');
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 2);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListDeviceToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListDeviceToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size46 = 0;
            $_etype49 = 0;
            $xfer += $input->readListBegin($_etype49, $_size46);
            for ($_i50 = 0; $_i50 < $_size46; ++$_i50)
            {
              $elem51 = null;
              $xfer += $input->readString($elem51);
              $this->success []= $elem51;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListDeviceToken_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter52)
          {
            $xfer += $output->writeString($iter52);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListDeviceTokenByListIDs_args {
  static $_TSPEC;

  public $arrUserIDTo = null;
  public $appID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'arrUserIDTo',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['arrUserIDTo'])) {
        $this->arrUserIDTo = $vals['arrUserIDTo'];
      }
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListDeviceTokenByListIDs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->arrUserIDTo = array();
            $_size53 = 0;
            $_etype56 = 0;
            $xfer += $input->readListBegin($_etype56, $_size53);
            for ($_i57 = 0; $_i57 < $_size53; ++$_i57)
            {
              $elem58 = null;
              $xfer += $input->readString($elem58);
              $this->arrUserIDTo []= $elem58;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListDeviceTokenByListIDs_args');
    if ($this->arrUserIDTo !== null) {
      if (!is_array($this->arrUserIDTo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrUserIDTo', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->arrUserIDTo));
        {
          foreach ($this->arrUserIDTo as $iter59)
          {
            $xfer += $output->writeString($iter59);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 2);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListDeviceTokenByListIDs_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListDeviceTokenByListIDs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size60 = 0;
            $_etype63 = 0;
            $xfer += $input->readListBegin($_etype63, $_size60);
            for ($_i64 = 0; $_i64 < $_size60; ++$_i64)
            {
              $elem65 = null;
              $xfer += $input->readString($elem65);
              $this->success []= $elem65;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListDeviceTokenByListIDs_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter66)
          {
            $xfer += $output->writeString($iter66);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListAppIDByDeviceToken_args {
  static $_TSPEC;

  public $userIDTo = null;
  public $deviceToken = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deviceToken',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['deviceToken'])) {
        $this->deviceToken = $vals['deviceToken'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListAppIDByDeviceToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deviceToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListAppIDByDeviceToken_args');
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 1);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deviceToken !== null) {
      $xfer += $output->writeFieldBegin('deviceToken', TType::STRING, 2);
      $xfer += $output->writeString($this->deviceToken);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListAppIDByDeviceToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListAppIDByDeviceToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size67 = 0;
            $_ktype68 = 0;
            $_vtype69 = 0;
            $xfer += $input->readMapBegin($_ktype68, $_vtype69, $_size67);
            for ($_i71 = 0; $_i71 < $_size67; ++$_i71)
            {
              $key72 = '';
              $val73 = 0.0;
              $xfer += $input->readString($key72);
              $xfer += $input->readDouble($val73);
              $this->success[$key72] = $val73;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListAppIDByDeviceToken_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::DOUBLE, count($this->success));
        {
          foreach ($this->success as $kiter74 => $viter75)
          {
            $xfer += $output->writeString($kiter74);
            $xfer += $output->writeDouble($viter75);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_setNotify_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $objectID = null;
  public $objectType = null;
  public $actionType = null;
  public $userIDFrom = null;
  public $blobData = null;
  public $statsName = null;
  public $arrOwner = null;
  public $isOnlyOwner = null;
  public $LastContent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'objectID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'objectType',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'actionType',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'userIDFrom',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'blobData',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'arrOwner',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'isOnlyOwner',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'LastContent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['objectID'])) {
        $this->objectID = $vals['objectID'];
      }
      if (isset($vals['objectType'])) {
        $this->objectType = $vals['objectType'];
      }
      if (isset($vals['actionType'])) {
        $this->actionType = $vals['actionType'];
      }
      if (isset($vals['userIDFrom'])) {
        $this->userIDFrom = $vals['userIDFrom'];
      }
      if (isset($vals['blobData'])) {
        $this->blobData = $vals['blobData'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
      if (isset($vals['arrOwner'])) {
        $this->arrOwner = $vals['arrOwner'];
      }
      if (isset($vals['isOnlyOwner'])) {
        $this->isOnlyOwner = $vals['isOnlyOwner'];
      }
      if (isset($vals['LastContent'])) {
        $this->LastContent = $vals['LastContent'];
      }
    }
  }

  public function getName() {
    return 'nodeService_setNotify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->objectType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->actionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->blobData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->arrOwner = array();
            $_size76 = 0;
            $_etype79 = 0;
            $xfer += $input->readListBegin($_etype79, $_size76);
            for ($_i80 = 0; $_i80 < $_size76; ++$_i80)
            {
              $elem81 = null;
              $xfer += $input->readString($elem81);
              $this->arrOwner []= $elem81;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isOnlyOwner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LastContent);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_setNotify_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectID !== null) {
      $xfer += $output->writeFieldBegin('objectID', TType::STRING, 3);
      $xfer += $output->writeString($this->objectID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objectType !== null) {
      $xfer += $output->writeFieldBegin('objectType', TType::STRING, 4);
      $xfer += $output->writeString($this->objectType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionType !== null) {
      $xfer += $output->writeFieldBegin('actionType', TType::STRING, 5);
      $xfer += $output->writeString($this->actionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDFrom !== null) {
      $xfer += $output->writeFieldBegin('userIDFrom', TType::STRING, 6);
      $xfer += $output->writeString($this->userIDFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blobData !== null) {
      $xfer += $output->writeFieldBegin('blobData', TType::STRING, 7);
      $xfer += $output->writeString($this->blobData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 8);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->arrOwner !== null) {
      if (!is_array($this->arrOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('arrOwner', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->arrOwner));
        {
          foreach ($this->arrOwner as $iter82)
          {
            $xfer += $output->writeString($iter82);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isOnlyOwner !== null) {
      $xfer += $output->writeFieldBegin('isOnlyOwner', TType::BOOL, 10);
      $xfer += $output->writeBool($this->isOnlyOwner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastContent !== null) {
      $xfer += $output->writeFieldBegin('LastContent', TType::STRING, 11);
      $xfer += $output->writeString($this->LastContent);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_setNotify_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_setNotify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size83 = 0;
            $_ktype84 = 0;
            $_vtype85 = 0;
            $xfer += $input->readMapBegin($_ktype84, $_vtype85, $_size83);
            for ($_i87 = 0; $_i87 < $_size83; ++$_i87)
            {
              $key88 = '';
              $val89 = 0.0;
              $xfer += $input->readString($key88);
              $xfer += $input->readDouble($val89);
              $this->success[$key88] = $val89;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_setNotify_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::DOUBLE, count($this->success));
        {
          foreach ($this->success as $kiter90 => $viter91)
          {
            $xfer += $output->writeString($kiter90);
            $xfer += $output->writeDouble($viter91);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getNotify_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $statsName = null;
  public $iStart = null;
  public $iEnd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iStart',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'iEnd',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
      if (isset($vals['iStart'])) {
        $this->iStart = $vals['iStart'];
      }
      if (isset($vals['iEnd'])) {
        $this->iEnd = $vals['iEnd'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getNotify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getNotify_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 3);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iStart !== null) {
      $xfer += $output->writeFieldBegin('iStart', TType::I32, 4);
      $xfer += $output->writeI32($this->iStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iEnd !== null) {
      $xfer += $output->writeFieldBegin('iEnd', TType::I32, 5);
      $xfer += $output->writeI32($this->iEnd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getNotify_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_nodeList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getNotify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_nodeList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getNotify_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getNotifyUnRead_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $statsName = null;
  public $iStart = null;
  public $iEnd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iStart',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'iEnd',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
      if (isset($vals['iStart'])) {
        $this->iStart = $vals['iStart'];
      }
      if (isset($vals['iEnd'])) {
        $this->iEnd = $vals['iEnd'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getNotifyUnRead_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getNotifyUnRead_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 3);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iStart !== null) {
      $xfer += $output->writeFieldBegin('iStart', TType::I32, 4);
      $xfer += $output->writeI32($this->iStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iEnd !== null) {
      $xfer += $output->writeFieldBegin('iEnd', TType::I32, 5);
      $xfer += $output->writeI32($this->iEnd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getNotifyUnRead_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'gnt_server_nodeList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getNotifyUnRead_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new gnt_server_nodeList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getNotifyUnRead_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_delNotify_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $nodeUID = null;
  public $statsName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nodeUID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['nodeUID'])) {
        $this->nodeUID = $vals['nodeUID'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
    }
  }

  public function getName() {
    return 'nodeService_delNotify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_delNotify_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeUID !== null) {
      $xfer += $output->writeFieldBegin('nodeUID', TType::STRING, 3);
      $xfer += $output->writeString($this->nodeUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 4);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_delNotify_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_delNotify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_delNotify_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_delRelated_args {
  static $_TSPEC;

  public $nodeUID = null;
  public $userID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nodeUID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nodeUID'])) {
        $this->nodeUID = $vals['nodeUID'];
      }
      if (isset($vals['userID'])) {
        $this->userID = $vals['userID'];
      }
    }
  }

  public function getName() {
    return 'nodeService_delRelated_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_delRelated_args');
    if ($this->nodeUID !== null) {
      $xfer += $output->writeFieldBegin('nodeUID', TType::STRING, 1);
      $xfer += $output->writeString($this->nodeUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userID !== null) {
      $xfer += $output->writeFieldBegin('userID', TType::STRING, 2);
      $xfer += $output->writeString($this->userID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_delRelated_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_delRelated_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_delRelated_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListRelated_args {
  static $_TSPEC;

  public $nodeUID = null;
  public $iStart = null;
  public $iEnd = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nodeUID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'iStart',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'iEnd',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['nodeUID'])) {
        $this->nodeUID = $vals['nodeUID'];
      }
      if (isset($vals['iStart'])) {
        $this->iStart = $vals['iStart'];
      }
      if (isset($vals['iEnd'])) {
        $this->iEnd = $vals['iEnd'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListRelated_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListRelated_args');
    if ($this->nodeUID !== null) {
      $xfer += $output->writeFieldBegin('nodeUID', TType::STRING, 1);
      $xfer += $output->writeString($this->nodeUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iStart !== null) {
      $xfer += $output->writeFieldBegin('iStart', TType::I32, 2);
      $xfer += $output->writeI32($this->iStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iEnd !== null) {
      $xfer += $output->writeFieldBegin('iEnd', TType::I32, 3);
      $xfer += $output->writeI32($this->iEnd);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getListRelated_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getListRelated_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size92 = 0;
            $_etype95 = 0;
            $xfer += $input->readListBegin($_etype95, $_size92);
            for ($_i96 = 0; $_i96 < $_size92; ++$_i96)
            {
              $elem97 = null;
              $xfer += $input->readString($elem97);
              $this->success []= $elem97;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getListRelated_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter98)
          {
            $xfer += $output->writeString($iter98);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_resetAll_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $statsName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
    }
  }

  public function getName() {
    return 'nodeService_resetAll_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_resetAll_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 3);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_resetAll_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_resetAll_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_resetAll_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_markReadAll_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $statsName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
    }
  }

  public function getName() {
    return 'nodeService_markReadAll_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_markReadAll_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 3);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_markReadAll_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_markReadAll_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_markReadAll_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_markReadOne_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;
  public $nodeUID = null;
  public $statsName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nodeUID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'statsName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
      if (isset($vals['nodeUID'])) {
        $this->nodeUID = $vals['nodeUID'];
      }
      if (isset($vals['statsName'])) {
        $this->statsName = $vals['statsName'];
      }
    }
  }

  public function getName() {
    return 'nodeService_markReadOne_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nodeUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statsName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_markReadOne_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeUID !== null) {
      $xfer += $output->writeFieldBegin('nodeUID', TType::STRING, 3);
      $xfer += $output->writeString($this->nodeUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statsName !== null) {
      $xfer += $output->writeFieldBegin('statsName', TType::STRING, 4);
      $xfer += $output->writeString($this->statsName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_markReadOne_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_markReadOne_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_markReadOne_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getStaticstic_args {
  static $_TSPEC;

  public $appID = null;
  public $userIDTo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'appID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userIDTo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['appID'])) {
        $this->appID = $vals['appID'];
      }
      if (isset($vals['userIDTo'])) {
        $this->userIDTo = $vals['userIDTo'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getStaticstic_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->appID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userIDTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getStaticstic_args');
    if ($this->appID !== null) {
      $xfer += $output->writeFieldBegin('appID', TType::STRING, 1);
      $xfer += $output->writeString($this->appID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userIDTo !== null) {
      $xfer += $output->writeFieldBegin('userIDTo', TType::STRING, 2);
      $xfer += $output->writeString($this->userIDTo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_getStaticstic_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'nodeService_getStaticstic_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size99 = 0;
            $_ktype100 = 0;
            $_vtype101 = 0;
            $xfer += $input->readMapBegin($_ktype100, $_vtype101, $_size99);
            for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
            {
              $key104 = '';
              $val105 = 0.0;
              $xfer += $input->readString($key104);
              $xfer += $input->readDouble($val105);
              $this->success[$key104] = $val105;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_getStaticstic_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::DOUBLE, count($this->success));
        {
          foreach ($this->success as $kiter106 => $viter107)
          {
            $xfer += $output->writeString($kiter106);
            $xfer += $output->writeDouble($viter107);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gnt_server_nodeService_shutdown_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'nodeService_shutdown_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('nodeService_shutdown_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
